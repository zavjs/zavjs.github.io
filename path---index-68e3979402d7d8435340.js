webpackJsonp([0x81b8806e4260],{"./node_modules/json-loader/index.js!./.cache/json/index.json":function(e,t){e.exports={data:{allMarkdownRemark:{totalCount:8,edges:[{node:{id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-17-private-routes-react/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Private Routes in React",date:"01/17/18",path:"/private-routes-react",tags:["react","react-router",""],excerpt:"As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this"}}},{node:{id:"/Users/zavareze/projects/zavjsblog/src/pages/2017-12-22-flattening-arbitrarily-nested-object/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Flattening an Arbitrarily Nested Object",date:"12/22/17",path:"/flatenning-arbitrarily-nested-object",tags:["javascript"],excerpt:"In this post, we'll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to deestructure the object, removing the keys and leaving values only; then, we should be able to transform the nested array into a single-level array."}}},{node:{id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-02-a-word-on-functions/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"A Word on Functions",date:"01/02/18",path:"/a-word-on-functions",tags:["javascript","functions"],excerpt:"Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions."}}},{node:{id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-15-my-attempt-of-deep-equals/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Attempting Deep Equals",date:"02/15/18",path:"/my-attempt-of-deep-equals",tags:["react","javascript"],excerpt:"One of the keys for React and Redux development is state immutability. Today, we'll discuss more specifically why, and build a function to compare deep equality betweeen two objects..."}}},{node:{id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-28-render-props-with-react/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"The Render Props Pattern",date:"02/28/18",path:"/render-props-with-react",tags:["react","javascript"],excerpt:"A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to delegate rendering away from the component implementation itself, meaning it simply expose function parameters to child components..."}}},{node:{id:"/Users/zavareze/projects/zavjsblog/src/pages/2017-12-28-handling-javascript-promises/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Using JavaScript Promises",date:"12/29/17",path:"/using-javascript-promises",tags:["javascript","promises","ajax"],excerpt:"For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time."}}},{node:{id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-09-29-most-useful-design-patterns/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Most Useful Design Patterns in JS",date:"02/28/18",path:"/most-useful-design-patterns",tags:["javascript"],excerpt:"Design patterns are proven solutions to a recurrent problem. Most of the times they describe a relationship between more than one structures"}}},{node:{id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-10-understanding-gulp/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Understading Automated Toolkits",date:"01/10/18",path:"/understanding-automated-toolkits",tags:["node.js","javascript","automation","gulp"],excerpt:"If you're familiar with toolkits that aim automating repetitive, painful or time consuming tasks, like compressing css, or ugliflying js files (like gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy that aim to replicate similar functionalities."}}}]}},pathContext:{}}}});
//# sourceMappingURL=path---index-68e3979402d7d8435340.js.map