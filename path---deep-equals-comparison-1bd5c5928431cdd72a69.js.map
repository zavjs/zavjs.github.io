{"version":3,"sources":["webpack:///path---deep-equals-comparison-1bd5c5928431cdd72a69.js","webpack:///./.cache/json/deep-equals-comparison.json"],"names":["webpackJsonp","355","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,um0BAAkq2BC,aAAmDC,MAAA,yBAAAC,KAAA,oBAAAC,KAAA,0BAAAC,MAAA,sBAAAC,QAAA,4QAAgZC,aAAgBC,MAAQR,KAAA;AAAy85CS,GAAA,yHAAAR,aAAi0BE,KAAA,YAAAC,KAAA,oCAAAF,MAAA,kCAAAI,QAAA,gVAAAD,MAAA,8CAAufK,KAAA","file":"path---deep-equals-comparison-1bd5c5928431cdd72a69.js","sourcesContent":["webpackJsonp([149464184762676],{\n\n/***/ 355:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Immutability</h2>\\n<p>Redux focus on the importance of immutability by enforcing pure functions as reducers as a way to generate new state, in opposition of patching old one with new data ([1, 2, 3].concat(4) vs [1, 2, 3].push(4)). However, little is discussed on why that is important, and the answer to this lies in one of React's lifecycle methods called <code class=\\\"language-text\\\">shouldComponentUpdate</code>.</p>\\n<h3>shouldComponentUpdate</h3>\\n<p>This method is part of the Update phase, and is one of the first hooks to be triggered. Natively in React, every time a component enters the Update phase, shouldComponent update returns true. However, it is available to developers as a way to further enhance component performance, and that is because React does shallow comparison between old and new props and state.</p>\\n<p>To evaluate equality, shallow comparison will do a few different things:</p>\\n<ul>\\n<li>Compare object signature (objA === objB), that is, if they both reference the same place in memory</li>\\n<li>Check if the amount of <strong>first level</strong> properties are the same (Object.keys(objA).length === Object.keys(objB).length)</li>\\n<li>Check if both object keys are the same in name and value</li>\\n</ul>\\n<p>Excerpt from React's PureRenderMixin:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>objA<span class=\\\"token punctuation\\\">:</span> mixed<span class=\\\"token punctuation\\\">,</span> objB<span class=\\\"token punctuation\\\">:</span> mixed<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> boolean <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>objA <span class=\\\"token operator\\\">===</span> objB<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> objA <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">\\\"object\\\"</span> <span class=\\\"token operator\\\">||</span>\\n    objA <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">||</span>\\n    <span class=\\\"token keyword\\\">typeof</span> objB <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">\\\"object\\\"</span> <span class=\\\"token operator\\\">||</span>\\n    objB <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> keysA <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>objA<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> keysB <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>objB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>keysA<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> keysB<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> bHasOwnProperty <span class=\\\"token operator\\\">=</span> hasOwnProperty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>objB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keysA<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">bHasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> objA<span class=\\\"token punctuation\\\">[</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> objB<span class=\\\"token punctuation\\\">[</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shallowCompare</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n    <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>One important thing to notice, and that you might have let pass is that Object.keys(obj) only return the first level object properties, which means:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n    d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//[\\\"a\\\"]</span></code></pre>\\n      </div>\\n<p>All of the other nested objects are left behind, which means that if our object's signature is the same, and the first level scalar value properties (strings, numbers) are equal then the object is deemed to be the same, and React doesn't trigger an update. Since we provided a mutated value, our code is not considered pure.</p>\\n<p>If in React we had the ability to manually push a value into an array inside state, and that value was passed down to a child component, the child component wouldn't update to reflect the new object. That's why it's only possible to re-render by changing state with setState.</p>\\n<h3>Deep Equals</h3>\\n<p>I thought about how I would create a deep equals functionality as a way to compare all object values, including nested objects between a given objA and a given objB. The requirements where as follows:</p>\\n<ul>\\n<li>Make sure the same props that exist in objA, also exist in objB</li>\\n<li>Make sure their values are equal</li>\\n</ul>\\n<p>So the first thing I would do is iterating over the first level properties for objA, and do something if these properties are objects themselves, and something else if not:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"object\\\"</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">doSomethingElse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>I figured that if these objects are objects themselves, I probably want to keep looking further until it's not anymore;</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"object\\\"</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">doSomethingElse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>And also, if it's finally not an object, then we'll simply check if the given property exists in objB and compare the two:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"object\\\"</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">:</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token operator\\\">?</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Now, with an array of booleans we reduce them to the final value:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"object\\\"</span>\\n        <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">?</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> acc <span class=\\\"token operator\\\">&amp;&amp;</span> curr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>Tests</h3>\\n<p>I'm using <a href=\\\"https://github.com/mjackson\\\">mjackson's expectjs library</a> to assert.</p>\\n<p>One: I expect objects with the same property names and values, including nested objects, to be considered equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Dog\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Dog\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"A\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"A\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Two: I expect objects with different property names and/or values, including nested objects, to be considered not equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//different values, same keys</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Cat\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Dog\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//diferent keys, same values</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"A\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"A\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//different keys, different values</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"C\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"D\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Three: I expect objects with different number of properties, including nested objects properties, even if everything else is the same, to be considered not equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//more keys in objA</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//more keys in objB</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Attempting Deep Equals\",\"date\":\"February 15, 2018\",\"path\":\"/deep-equals-comparison\",\"tags\":[\"react\",\"javascript\"],\"excerpt\":\"One of the keys for React and Redux development is state immutability. Today, we'll discuss more specifically why, and build a function to compare deep equality betweeen two objects. That function is definitely not performant, but it's good just for the exercise\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p>If you're familiar with toolkits that aim automating repetitive tasks, like compressing css, or ugliflying js files (like Gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy of one of these tools, that aim to replicate similar functionalities.</p>\\n<p>This post aims to demonstrate a few Node modules, and a few development patterns that would help us replicate similar functionalities as that of Gulp, for example. It's not intended for actual use or to be taken other than a learning resource.</p>\\n<h2>Use Case</h2>\\n<p>The way I like to address challenges/issues is by using real world use cases as guiding parameters. For that purpose, I randomly choose \\\"Droll\\\" to be my module's name, and there are a handful of things I wish Droll would do:</p>\\n<ul>\\n<li>Creating tasks that would allow users to encapsulate functionality and execute it when we they see fit</li>\\n<li>Watch for changes in directories or files as a way to execute functionality when it happens</li>\\n<li>Target and allocate files/file contents into a temporary place that would allow users to modify it, without changing the original copy</li>\\n<li>Enable users the ability to modify these temporary files by applying functions and composing functionality</li>\\n<li>The ability to create end files based on composed functionality of temporary data</li>\\n</ul>\\n<p>For example, let's assume a simple task that involves watching for changes on a given directory or file, applying changes to a temporary copy of that file, and creating a new file with the modified contents.</p>\\n<p>More specifically, a very common development task: having CSS files compressed into a new file. Let's assume two folders, one named <code class=\\\"language-text\\\">src</code>, and another named <code class=\\\"language-text\\\">dist</code>. <code class=\\\"language-text\\\">src</code> will contain the intact original css file whereas <code class=\\\"language-text\\\">dist</code> will hold the newly created minified version:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">project\\n|   droll.js (library)\\n│   drollfile.js (implementation)\\n│\\n└───src\\n│   │   styles.css\\n│   \\n└───dist\\n    │   styles.min.css</code></pre>\\n      </div>\\n<p>-</p>\\n<p>The following would be how I want things to work:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//drollfile.js</span>\\n<span class=\\\"token keyword\\\">const</span> droll <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'droll'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//create a droll task of name 'watch:css'</span>\\n<span class=\\\"token comment\\\">//assign the task a function to be executed whenever we decide to run it</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//watch for changes on a specific file </span>\\n  droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//get file contents</span>\\n    droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">//provide functions to modify the temporary data, composing if needed</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>doSomething<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>doSomethingElse<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">//create a final file with the modified content</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dist</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./dist/styles.min.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//arbitrarily deciding to run the task</span>\\n<span class=\\\"token comment\\\">//for now a javascript line, which later</span>\\n<span class=\\\"token comment\\\">//can be replaced for a command line like `droll watch:css`, for example</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>The Node.js File System Module</h2>\\n<p>The main star for tonight has to be Node's File System Module, as it contains all of the file managing functionalities we need to create Droll. </p>\\n<p>See, whenever we wish to read from a file (<code class=\\\"language-text\\\">./src/styles.css</code>, for example), we should use <code class=\\\"language-text\\\">fs.readFile</code>, or even <code class=\\\"language-text\\\">fs.readFileSync</code>. To write, we use <code class=\\\"language-text\\\">fs.writeFile</code>, or <code class=\\\"language-text\\\">fs.writeFileSync</code>. The difference between each of the items in both pairs is asynchronicity - that is, whether you want to block runtime while attempting to read the file or not.</p>\\n<p>Since we don't expect the user (or any other users for that matter) to be doing concurrent operations (like it would happen if we were to create a Node.js Web server, for example), we will <strong>explicitly</strong> and <strong>intentionally</strong> be using the synchronous versions of these methods. </p>\\n<p>Keep in mind however, that using synchronous methods is not recomended when you're expected to serve responsive applications in which the main thread is expected to be shared by multiple concurrent operations. You don't want user A to be blocked waiting for user's B long synchronous operation to finish executing.</p>\\n<p>See the module example below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//file contents</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mynewfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'my new file is aweseom'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//file written</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>Additionally, the FS module has another very important method called 'watch'. Watch will, ehrm, well... <em>watch</em> a given directory or filename and enable users the ability to execute functionality when that file is changed.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'rename', if file created or deleted </span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'change', if file changed</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>The Fluent Pattern</h2>\\n<p>Another key feature for our library is the ability to chain methods together for a more fluid architecture. This pattern is seen in many JavaScript libraries like jQuery, for example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// jQuery prefers this:</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.special-div'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//assign the color blue to special div</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'color'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//target special-div's immediate parent</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//hide it</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hide</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// instead of this:</span>\\n<span class=\\\"token keyword\\\">var</span> div <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.special-div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'color'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> parent <span class=\\\"token operator\\\">=</span> div<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nparent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hide</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>It's important to notice however that, when we execute any given object's method, that object doesn't return itself. It returns whatever the method should be returning:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  abc<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  def<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* not going to working, as it's going to try to execute the def method \\nfor the value 1 (which doesn't exist), instead of the object itself. */</span>\\nobj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">abc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">def</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> </code></pre>\\n      </div>\\n<p>-</p>\\n<p>The way to make Droll provide the ability to chain its methods is simple: we should return the Droll's context upon every method execution. </p>\\n<p>A little earlier we have already defined a few desired methods for our library, so let's sketch them here. Also, taking in consideration the aforementioned use case, note that the only methods chaining together are <code class=\\\"language-text\\\">src</code>, and <code class=\\\"language-text\\\">pipe</code>, so we'll go with that for now.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//node module, module.exports automatically exports the desired object</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//1. does something</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">//2. return itself</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//1. does something</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">//2. return itself</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Task</h3>\\n<p>In order for us to control when a specific functionality will be executed, we should hold that functionality encapsulated while naming it for later reference. We'll just create an internal property within Droll to associate a given task name to a given function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskname<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//this._tasks['watch:js']</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskname<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cb<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Execute</h3>\\n<p>We must specify a method to explicitly execute a given task when desired. It's simple, let's just receive a name, and go inside the internal <code class=\\\"language-text\\\">_tasks</code> property to execute the associated function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* collapsed */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>So, for example, we can specify when a task will be executed like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// this is just a simple registering</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mytask'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">anon</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'when executed, please log this'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// here is where the 'anon' function will be executed effectively </span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mytask'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Watch</h3>\\n<p>To watch for a specific file or directory, let's make our Droll's <code class=\\\"language-text\\\">watch</code> method receive a path to be watched as the first parameter, and also a callback function to be executed when changes happen, as a second parameter. Let's use Node's File System module to handle the dirty work:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>eventType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Source</h3>\\n<p>The source method is ideal for getting file contents. With it, we'll specify a file and get it's contents with <code class=\\\"language-text\\\">fs.readFileSync</code>. We'll create a property inside Droll to hold the file contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> </code></pre>\\n      </div>\\n<p>Since we're not specifying encoding, Node.js will create a Buffer object and assign it to the <code class=\\\"language-text\\\">_curVal</code> property.</p>\\n<h3>Pipe</h3>\\n<p>Pipe is a good way to compose functionality. Since we're trying to minify a css file, let's agree that <code class=\\\"language-text\\\">pipe</code> should accept a function, and execute that function over the temporary value allocated inside Droll's object. We'll mutate the previously created value to become something new:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Since <code class=\\\"language-text\\\">_curVal</code> is being stored as a Buffer object, our goal is to apply the function to a stringified version of that Buffer, and not the Buffer instance itself. After applying mutations, we'll transform it back to a Buffer object with <code class=\\\"language-text\\\">Buffer.from()</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Dist</h3>\\n<p>Dist will simply create a file with the previously set temporary values inside of it. The dist function will only receive one argument, the file name. The file content will be automatically inferred from Droll's property.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>Final Product</h2>\\n<p>The final product will look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//droll.js </span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cb<span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>eventType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>The intended functionality designed at the beginning should work properly, now.\\nFor educational purposes let's use an actual function inside the pipe method, that would simulate minifying a css file. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> droll <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./droll'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// use path module to specify the appropriate file location</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">toPath</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>filepath<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> filepath<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// simply remove spaces to simulate minifying</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">minify</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/\\\\s/g</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>minify<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dist</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./dist/styles.min.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The final minified css file will be created inside the destination folder. Be sure to test with an actual uncompressed css file and see it being converted into minified css.</p>\\n<h2>Improvements</h2>\\n<p>This toolkit can be improved in a variety of ways, for example:</p>\\n<ul>\\n<li>Targeting multiple files, instead of only one, by providing an array of files, instead of a string</li>\\n<li>Targeting files by extension, by providing wildcard values such as 'src/*<em>/</em>.js', in case we wish to target all js or css files inside a given folder</li>\\n</ul>\\n<p>Checkout the <a href=\\\"https://github.com/zavjs/drolljs\\\">github repository</a>. </p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-10-understanding-gulp/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"We, 01/18\",\"path\":\"/understanding-automated-toolkits\",\"title\":\"Understading Automated Toolkits\",\"excerpt\":\"If you're familiar with toolkits that aim automating repetitive, painful or time consuming tasks, like compressing css, or ugliflying js files (like gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy that aim to replicate similar functionalities.\",\"tags\":[\"node.js\",\"javascript\",\"automation\",\"gulp\"]}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---deep-equals-comparison-1bd5c5928431cdd72a69.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Immutability</h2>\\n<p>Redux focus on the importance of immutability by enforcing pure functions as reducers as a way to generate new state, in opposition of patching old one with new data ([1, 2, 3].concat(4) vs [1, 2, 3].push(4)). However, little is discussed on why that is important, and the answer to this lies in one of React's lifecycle methods called <code class=\\\"language-text\\\">shouldComponentUpdate</code>.</p>\\n<h3>shouldComponentUpdate</h3>\\n<p>This method is part of the Update phase, and is one of the first hooks to be triggered. Natively in React, every time a component enters the Update phase, shouldComponent update returns true. However, it is available to developers as a way to further enhance component performance, and that is because React does shallow comparison between old and new props and state.</p>\\n<p>To evaluate equality, shallow comparison will do a few different things:</p>\\n<ul>\\n<li>Compare object signature (objA === objB), that is, if they both reference the same place in memory</li>\\n<li>Check if the amount of <strong>first level</strong> properties are the same (Object.keys(objA).length === Object.keys(objB).length)</li>\\n<li>Check if both object keys are the same in name and value</li>\\n</ul>\\n<p>Excerpt from React's PureRenderMixin:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>objA<span class=\\\"token punctuation\\\">:</span> mixed<span class=\\\"token punctuation\\\">,</span> objB<span class=\\\"token punctuation\\\">:</span> mixed<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> boolean <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>objA <span class=\\\"token operator\\\">===</span> objB<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> objA <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">\\\"object\\\"</span> <span class=\\\"token operator\\\">||</span>\\n    objA <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">||</span>\\n    <span class=\\\"token keyword\\\">typeof</span> objB <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">\\\"object\\\"</span> <span class=\\\"token operator\\\">||</span>\\n    objB <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> keysA <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>objA<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> keysB <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>objB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>keysA<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> keysB<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> bHasOwnProperty <span class=\\\"token operator\\\">=</span> hasOwnProperty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>objB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keysA<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">bHasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> objA<span class=\\\"token punctuation\\\">[</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> objB<span class=\\\"token punctuation\\\">[</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shallowCompare</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n    <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>One important thing to notice, and that you might have let pass is that Object.keys(obj) only return the first level object properties, which means:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n    d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//[\\\"a\\\"]</span></code></pre>\\n      </div>\\n<p>All of the other nested objects are left behind, which means that if our object's signature is the same, and the first level scalar value properties (strings, numbers) are equal then the object is deemed to be the same, and React doesn't trigger an update. Since we provided a mutated value, our code is not considered pure.</p>\\n<p>If in React we had the ability to manually push a value into an array inside state, and that value was passed down to a child component, the child component wouldn't update to reflect the new object. That's why it's only possible to re-render by changing state with setState.</p>\\n<h3>Deep Equals</h3>\\n<p>I thought about how I would create a deep equals functionality as a way to compare all object values, including nested objects between a given objA and a given objB. The requirements where as follows:</p>\\n<ul>\\n<li>Make sure the same props that exist in objA, also exist in objB</li>\\n<li>Make sure their values are equal</li>\\n</ul>\\n<p>So the first thing I would do is iterating over the first level properties for objA, and do something if these properties are objects themselves, and something else if not:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"object\\\"</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">doSomethingElse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>I figured that if these objects are objects themselves, I probably want to keep looking further until it's not anymore;</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"object\\\"</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">doSomethingElse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>And also, if it's finally not an object, then we'll simply check if the given property exists in objB and compare the two:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"object\\\"</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">:</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token operator\\\">?</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Now, with an array of booleans we reduce them to the final value:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"object\\\"</span>\\n        <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">?</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> acc <span class=\\\"token operator\\\">&amp;&amp;</span> curr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>Tests</h3>\\n<p>I'm using <a href=\\\"https://github.com/mjackson\\\">mjackson's expectjs library</a> to assert.</p>\\n<p>One: I expect objects with the same property names and values, including nested objects, to be considered equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Dog\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Dog\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"A\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"A\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Two: I expect objects with different property names and/or values, including nested objects, to be considered not equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//different values, same keys</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Cat\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Dog\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//diferent keys, same values</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"A\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"A\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//different keys, different values</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"C\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"D\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Three: I expect objects with different number of properties, including nested objects properties, even if everything else is the same, to be considered not equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//more keys in objA</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//more keys in objB</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Attempting Deep Equals\",\"date\":\"February 15, 2018\",\"path\":\"/deep-equals-comparison\",\"tags\":[\"react\",\"javascript\"],\"excerpt\":\"One of the keys for React and Redux development is state immutability. Today, we'll discuss more specifically why, and build a function to compare deep equality betweeen two objects. That function is definitely not performant, but it's good just for the exercise\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p>If you're familiar with toolkits that aim automating repetitive tasks, like compressing css, or ugliflying js files (like Gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy of one of these tools, that aim to replicate similar functionalities.</p>\\n<p>This post aims to demonstrate a few Node modules, and a few development patterns that would help us replicate similar functionalities as that of Gulp, for example. It's not intended for actual use or to be taken other than a learning resource.</p>\\n<h2>Use Case</h2>\\n<p>The way I like to address challenges/issues is by using real world use cases as guiding parameters. For that purpose, I randomly choose \\\"Droll\\\" to be my module's name, and there are a handful of things I wish Droll would do:</p>\\n<ul>\\n<li>Creating tasks that would allow users to encapsulate functionality and execute it when we they see fit</li>\\n<li>Watch for changes in directories or files as a way to execute functionality when it happens</li>\\n<li>Target and allocate files/file contents into a temporary place that would allow users to modify it, without changing the original copy</li>\\n<li>Enable users the ability to modify these temporary files by applying functions and composing functionality</li>\\n<li>The ability to create end files based on composed functionality of temporary data</li>\\n</ul>\\n<p>For example, let's assume a simple task that involves watching for changes on a given directory or file, applying changes to a temporary copy of that file, and creating a new file with the modified contents.</p>\\n<p>More specifically, a very common development task: having CSS files compressed into a new file. Let's assume two folders, one named <code class=\\\"language-text\\\">src</code>, and another named <code class=\\\"language-text\\\">dist</code>. <code class=\\\"language-text\\\">src</code> will contain the intact original css file whereas <code class=\\\"language-text\\\">dist</code> will hold the newly created minified version:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">project\\n|   droll.js (library)\\n│   drollfile.js (implementation)\\n│\\n└───src\\n│   │   styles.css\\n│   \\n└───dist\\n    │   styles.min.css</code></pre>\\n      </div>\\n<p>-</p>\\n<p>The following would be how I want things to work:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//drollfile.js</span>\\n<span class=\\\"token keyword\\\">const</span> droll <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'droll'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//create a droll task of name 'watch:css'</span>\\n<span class=\\\"token comment\\\">//assign the task a function to be executed whenever we decide to run it</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//watch for changes on a specific file </span>\\n  droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//get file contents</span>\\n    droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">//provide functions to modify the temporary data, composing if needed</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>doSomething<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>doSomethingElse<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">//create a final file with the modified content</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dist</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./dist/styles.min.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//arbitrarily deciding to run the task</span>\\n<span class=\\\"token comment\\\">//for now a javascript line, which later</span>\\n<span class=\\\"token comment\\\">//can be replaced for a command line like `droll watch:css`, for example</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>The Node.js File System Module</h2>\\n<p>The main star for tonight has to be Node's File System Module, as it contains all of the file managing functionalities we need to create Droll. </p>\\n<p>See, whenever we wish to read from a file (<code class=\\\"language-text\\\">./src/styles.css</code>, for example), we should use <code class=\\\"language-text\\\">fs.readFile</code>, or even <code class=\\\"language-text\\\">fs.readFileSync</code>. To write, we use <code class=\\\"language-text\\\">fs.writeFile</code>, or <code class=\\\"language-text\\\">fs.writeFileSync</code>. The difference between each of the items in both pairs is asynchronicity - that is, whether you want to block runtime while attempting to read the file or not.</p>\\n<p>Since we don't expect the user (or any other users for that matter) to be doing concurrent operations (like it would happen if we were to create a Node.js Web server, for example), we will <strong>explicitly</strong> and <strong>intentionally</strong> be using the synchronous versions of these methods. </p>\\n<p>Keep in mind however, that using synchronous methods is not recomended when you're expected to serve responsive applications in which the main thread is expected to be shared by multiple concurrent operations. You don't want user A to be blocked waiting for user's B long synchronous operation to finish executing.</p>\\n<p>See the module example below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//file contents</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mynewfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'my new file is aweseom'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//file written</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>Additionally, the FS module has another very important method called 'watch'. Watch will, ehrm, well... <em>watch</em> a given directory or filename and enable users the ability to execute functionality when that file is changed.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'rename', if file created or deleted </span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'change', if file changed</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>The Fluent Pattern</h2>\\n<p>Another key feature for our library is the ability to chain methods together for a more fluid architecture. This pattern is seen in many JavaScript libraries like jQuery, for example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// jQuery prefers this:</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.special-div'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//assign the color blue to special div</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'color'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//target special-div's immediate parent</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//hide it</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hide</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// instead of this:</span>\\n<span class=\\\"token keyword\\\">var</span> div <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.special-div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'color'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> parent <span class=\\\"token operator\\\">=</span> div<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nparent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hide</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>It's important to notice however that, when we execute any given object's method, that object doesn't return itself. It returns whatever the method should be returning:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  abc<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  def<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* not going to working, as it's going to try to execute the def method \\nfor the value 1 (which doesn't exist), instead of the object itself. */</span>\\nobj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">abc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">def</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> </code></pre>\\n      </div>\\n<p>-</p>\\n<p>The way to make Droll provide the ability to chain its methods is simple: we should return the Droll's context upon every method execution. </p>\\n<p>A little earlier we have already defined a few desired methods for our library, so let's sketch them here. Also, taking in consideration the aforementioned use case, note that the only methods chaining together are <code class=\\\"language-text\\\">src</code>, and <code class=\\\"language-text\\\">pipe</code>, so we'll go with that for now.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//node module, module.exports automatically exports the desired object</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//1. does something</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">//2. return itself</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//1. does something</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">//2. return itself</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Task</h3>\\n<p>In order for us to control when a specific functionality will be executed, we should hold that functionality encapsulated while naming it for later reference. We'll just create an internal property within Droll to associate a given task name to a given function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskname<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//this._tasks['watch:js']</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskname<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cb<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Execute</h3>\\n<p>We must specify a method to explicitly execute a given task when desired. It's simple, let's just receive a name, and go inside the internal <code class=\\\"language-text\\\">_tasks</code> property to execute the associated function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* collapsed */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>So, for example, we can specify when a task will be executed like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// this is just a simple registering</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mytask'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">anon</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'when executed, please log this'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// here is where the 'anon' function will be executed effectively </span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mytask'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Watch</h3>\\n<p>To watch for a specific file or directory, let's make our Droll's <code class=\\\"language-text\\\">watch</code> method receive a path to be watched as the first parameter, and also a callback function to be executed when changes happen, as a second parameter. Let's use Node's File System module to handle the dirty work:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>eventType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Source</h3>\\n<p>The source method is ideal for getting file contents. With it, we'll specify a file and get it's contents with <code class=\\\"language-text\\\">fs.readFileSync</code>. We'll create a property inside Droll to hold the file contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> </code></pre>\\n      </div>\\n<p>Since we're not specifying encoding, Node.js will create a Buffer object and assign it to the <code class=\\\"language-text\\\">_curVal</code> property.</p>\\n<h3>Pipe</h3>\\n<p>Pipe is a good way to compose functionality. Since we're trying to minify a css file, let's agree that <code class=\\\"language-text\\\">pipe</code> should accept a function, and execute that function over the temporary value allocated inside Droll's object. We'll mutate the previously created value to become something new:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Since <code class=\\\"language-text\\\">_curVal</code> is being stored as a Buffer object, our goal is to apply the function to a stringified version of that Buffer, and not the Buffer instance itself. After applying mutations, we'll transform it back to a Buffer object with <code class=\\\"language-text\\\">Buffer.from()</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Dist</h3>\\n<p>Dist will simply create a file with the previously set temporary values inside of it. The dist function will only receive one argument, the file name. The file content will be automatically inferred from Droll's property.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>Final Product</h2>\\n<p>The final product will look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//droll.js </span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cb<span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>eventType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>The intended functionality designed at the beginning should work properly, now.\\nFor educational purposes let's use an actual function inside the pipe method, that would simulate minifying a css file. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> droll <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./droll'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// use path module to specify the appropriate file location</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">toPath</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>filepath<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> filepath<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// simply remove spaces to simulate minifying</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">minify</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/\\\\s/g</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>minify<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dist</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./dist/styles.min.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The final minified css file will be created inside the destination folder. Be sure to test with an actual uncompressed css file and see it being converted into minified css.</p>\\n<h2>Improvements</h2>\\n<p>This toolkit can be improved in a variety of ways, for example:</p>\\n<ul>\\n<li>Targeting multiple files, instead of only one, by providing an array of files, instead of a string</li>\\n<li>Targeting files by extension, by providing wildcard values such as 'src/*<em>/</em>.js', in case we wish to target all js or css files inside a given folder</li>\\n</ul>\\n<p>Checkout the <a href=\\\"https://github.com/zavjs/drolljs\\\">github repository</a>. </p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-10-understanding-gulp/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"We, 01/18\",\"path\":\"/understanding-automated-toolkits\",\"title\":\"Understading Automated Toolkits\",\"excerpt\":\"If you're familiar with toolkits that aim automating repetitive, painful or time consuming tasks, like compressing css, or ugliflying js files (like gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy that aim to replicate similar functionalities.\",\"tags\":[\"node.js\",\"javascript\",\"automation\",\"gulp\"]}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/deep-equals-comparison.json\n// module id = 355\n// module chunks = 149464184762676"],"sourceRoot":""}