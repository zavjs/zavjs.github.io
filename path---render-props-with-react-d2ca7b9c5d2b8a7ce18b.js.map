{"version":3,"sources":["webpack:///path---render-props-with-react-d2ca7b9c5d2b8a7ce18b.js","webpack:///./.cache/json/render-props-with-react.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/render-props-with-react.json","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,iFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,4xNAA4gOC,aAAqDC,MAAA,2BAAAC,KAAA,oBAAAC,KAAA,2BAAAC,MAAA,sBAAAC,QAAA,wSAA+aC,aAAgBC,MAAQR,KAAA;AAAsv2BS,GAAA,gIAAAR,aAA0LE,KAAA,2BAAAC,KAAA,6BAAAF,MAAA,yBAAAI,QAAA,2LAAAD,MAAA,wBAA2UK,MAASV,KAAA,o3wBAAy6xBS,GAAA,mIAAAR,aAA6iBE,KAAA,2BAAAC,KAAA,6BAAAF,MAAA,4BAAAI,QAAA,qOAAAD,MAAA","file":"path---render-props-with-react-d2ca7b9c5d2b8a7ce18b.js","sourcesContent":["webpackJsonp([141701966159975],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/render-props-with-react.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Render Props with React</h2>\\n<p>A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to <strong>delegate rendering away from the component implementation itself</strong>, meaning it simply expose function parameters to child components, </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  onClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>We have a good logic encapsulated within MyComponent, but we have little flexibility in how to use that logic. The state will always render the same thing. What if we provide more flexibility by just exposing logic out of the component, <strong>without caring</strong> on how this is effectively rendering?</p>\\n<p>To do so, we take in a props called render that's a function and have arguments provided to it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  onClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">,</span>\\n    onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onClick\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This makes sure our parent component logic and the rendering is decoupled. The function implementation of this component is the one deciding how the passed in props will evaluate to JSX, so we can put a given functionality, like a counter for example, but instead of tiying it to a specific child component, we leave it open to any others. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">ConsumerComp</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">&lt;</span>MyComponent\\n    render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">,</span> onClick <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"consumer-comp\\\"</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span>\\n       <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onClick<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"The Render Props Pattern\",\"date\":\"February 28, 2018\",\"path\":\"/render-props-with-react\",\"tags\":[\"react\",\"javascript\"],\"excerpt\":\"A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to delegate rendering away from the component implementation itself, meaning it simply expose function parameters to child components...\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h2>Immutability</h2>\\n<p>Redux focus on the importance of immutability by enforcing pure functions as reducers as a way to generate new state, in opposition of patching old one with new data ([1, 2, 3].concat(4) vs [1, 2, 3].push(4)). However, little is discussed on why that is important, and the answer to this lies in one of React's lifecycle methods called <code>shouldComponentUpdate</code>.</p>\\n<h3>shouldComponentUpdate</h3>\\n<p>This method is part of the Update phase, and is one of the first hooks to be triggered. Natively in React, every time a component enters the Update phase, shouldComponent update returns true. However, it is available to developers as a way to further enhance component performance, and that is because React does shallow comparison between old and new props and state.</p>\\n<p>To evaluate equality, shallow comparison will do a few different things:</p>\\n<ul>\\n<li>Compare object signature (objA === objB), that is, if they both reference the same place in memory</li>\\n<li>Check if the amount of <strong>first level</strong> properties are the same (Object.keys(objA).length === Object.keys(objB).length)</li>\\n<li>Check if both object keys are the same in name and value</li>\\n</ul>\\n<p>Excerpt from React's PureRenderMixin:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>objA<span class=\\\"token punctuation\\\">:</span> mixed<span class=\\\"token punctuation\\\">,</span> objB<span class=\\\"token punctuation\\\">:</span> mixed<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> boolean <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>objA <span class=\\\"token operator\\\">===</span> objB<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> objA <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">||</span> objA <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">||</span>\\n      <span class=\\\"token keyword\\\">typeof</span> objB <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">||</span> objB <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> keysA <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>objA<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> keysB <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>objB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>keysA<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> keysB<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> bHasOwnProperty <span class=\\\"token operator\\\">=</span> hasOwnProperty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>objB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keysA<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">bHasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> objA<span class=\\\"token punctuation\\\">[</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> objB<span class=\\\"token punctuation\\\">[</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shallowCompare</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n    <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>One important thing to notice, and that you might have let pass is that Object.keys(obj) only return the first level object properties, which means:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> \\n    c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n    d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//[\\\"a\\\"]</span>\\n</code></pre>\\n      </div>\\n<p>All of the other nested objects are left behind, which means that if our object's signature is the same, and the first level scalar value properties (strings, numbers) are equal then the object is deemed to be the same, and React doesn't trigger an update. Since we provided a mutated value, our code is not considered pure.</p>\\n<p>If in React we had the ability to manually push a value into an array inside state, and that value was passed down to a child component, the child component wouldn't update to reflect the new object. That's why it's only possible to re-render by changing state with setState.</p>\\n<h3>Deep Equals</h3>\\n<p>I thought about how I would create a deep equals functionality as a way to compare all object values, including nested objects between a given objA and a given objB. The requirements where as follows:</p>\\n<ul>\\n<li>Make sure the same props that exist in objA, also exist in objB</li>\\n<li>Make sure their values are equal</li>\\n</ul>\\n<p>So the first thing I would do is iterating over the first level properties for objA, and do something if these properties are objects themselves, and something else if not:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> \\n      <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">doSomethingElse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>I figured that if these objects are objects themselves, I probably want to keep looking further until it's not anymore;</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> \\n      <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">doSomethingElse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>And also, if it's finally not an object, then we'll simply check if the given property exists in objB and compare the two:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">:</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Now, with an array of booleans we reduce them to the final value:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">:</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> acc <span class=\\\"token operator\\\">&amp;&amp;</span> curr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Tests</h3>\\n<p>I'm using <a href=\\\"https://github.com/mjackson\\\">mjackson's expectjs library</a> to assert.</p>\\n<p>One: I expect objects with the same property names and values, including nested objects, to be considered equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Two: I expect objects with different property names and/or values, including nested objects, to be considered not equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//different values, same keys</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Cat'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//diferent keys, same values</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//different keys, different values</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'C'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'D'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Three: I expect objects with different number of properties, including nested objects properties, even if everything else is the same, to be considered not equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//more keys in objA</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//more keys in objB</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-15-my-attempt-of-deep-equals/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-02-15T03:11:45.165Z\",\"path\":\"/my-attempt-of-deep-equals\",\"title\":\"Attempting Deep Equals\",\"excerpt\":\"One of the keys for React and Redux development is state immutability. Today, we'll discuss more specifically why, and build a function to compare deep equality betweeen two objects...\",\"tags\":[\"react\",\"javascript\"]}},\"next\":{\"html\":\"<h2>Handling JavaScript Promises</h2>\\n<p>For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time. </p>\\n<h3>XMLHttpRequest example</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> xhr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">XMLHttpRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'api.github.com/users'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'load'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'response is here'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The XMLHttpRequest way to do things involved callback functions. That is, pieces of code to be executed when the external process is finished and the response is back. </p>\\n<p>Soon enough - as code bases grew and environments such as Node.js appeared, it became more and more difficult to handle asynchronous requests in a desired order through a series of steps, handling any errors that might come up, and also keeping good readability. The <strong>callback hell</strong> emerged.</p>\\n<h3>Callback Hell</h3>\\n<p>As callbacks usage was increased and widely adopted to handle both synchronous and asynchronous operations, a peculiar symptom started to appear: the nesting of these callbacks in a very confusing fashion, leading to poor code readability.</p>\\n<h4>Sample Node.js file</h4>\\n<p>Checking if a file exists, reading its content and updating it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> myFile <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'my-file.js'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> message <span class=\\\"token operator\\\">=</span> process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">editFile</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> additionalContent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> content <span class=\\\"token operator\\\">+</span> additionalContent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exists</span><span class=\\\"token punctuation\\\">(</span>myFile<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>exists<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>exists<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n\\n            fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">editFile</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">//writing finished</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>The Promise Way</h3>\\n<p>Promises had a better proposal on how to structure and order asynchronous calls in a series of steps while maintaining readability and organization. Additionally with Promises when errors occurr it's possible to catch 'em on the spot, without need for checks in every step of the way.</p>\\n<p>To see how to implement a Promise in a very basic manner, first let's compare it with an old callback-nesting version of it. The scenario is simple, loading an image and handling cases of sucess and error for it:</p>\\n<h4>Old callback-nesting way</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'blossom.png'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'wrapper'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findElementById</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`error found while loading image: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> containerId<span class=\\\"token punctuation\\\">,</span> success<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n\\n    img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">success</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>With Promises, we need to wrap our operations (timers, requests, etc) on a new Promise instantiation and either Resolve or Reject with the response of these requests. The same example above, in Promises, would be:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'blossom.png'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'wrapper'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findElementById</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`error found while loading image: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> containerId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n\\n        img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>As you can see, it's possible to chain calls together, with <code>.then</code>, and catch errors with <code>.catch</code>. You can do as many operations as you wish, by resolving promises and having the resolved values as the first argument of the next function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">users</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> users <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">,</span>\\n            content<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'This is my description description '</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        getUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        editUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//fetch api uses promises natively</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getUser</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.github.com/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>userName<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">users</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//json parse</span>\\n        <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//returning description</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">users</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">editUser</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>username<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">.</span>description<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//...</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>It's also possible to assign a Promise to a variable and use it progressively, as necessary, instead of chaining:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">promiseFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\npromise\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\npromise\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">handleSomeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>In essence, a Promise is an object that serves as temporary placeholder for a future evaluation, which is usually an asynchronous operation like an async request or a timer. Using the Promise object, you can layout the path the actual value will take for when it's ready to be executed, by registering callbacks to be ran when the operation succeeds or fails.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2017-12-28-handling-javascript-promises/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-29T03:15:59.165Z\",\"path\":\"/using-javascript-promises\",\"title\":\"Using JavaScript Promises\",\"excerpt\":\"For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time.\",\"tags\":[\"javascript\",\"promises\",\"ajax\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---render-props-with-react-d2ca7b9c5d2b8a7ce18b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Render Props with React</h2>\\n<p>A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to <strong>delegate rendering away from the component implementation itself</strong>, meaning it simply expose function parameters to child components, </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  onClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>We have a good logic encapsulated within MyComponent, but we have little flexibility in how to use that logic. The state will always render the same thing. What if we provide more flexibility by just exposing logic out of the component, <strong>without caring</strong> on how this is effectively rendering?</p>\\n<p>To do so, we take in a props called render that's a function and have arguments provided to it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  onClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">,</span>\\n    onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onClick\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This makes sure our parent component logic and the rendering is decoupled. The function implementation of this component is the one deciding how the passed in props will evaluate to JSX, so we can put a given functionality, like a counter for example, but instead of tiying it to a specific child component, we leave it open to any others. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">ConsumerComp</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">&lt;</span>MyComponent\\n    render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">,</span> onClick <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"consumer-comp\\\"</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span>\\n       <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onClick<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"The Render Props Pattern\",\"date\":\"February 28, 2018\",\"path\":\"/render-props-with-react\",\"tags\":[\"react\",\"javascript\"],\"excerpt\":\"A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to delegate rendering away from the component implementation itself, meaning it simply expose function parameters to child components...\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h2>Immutability</h2>\\n<p>Redux focus on the importance of immutability by enforcing pure functions as reducers as a way to generate new state, in opposition of patching old one with new data ([1, 2, 3].concat(4) vs [1, 2, 3].push(4)). However, little is discussed on why that is important, and the answer to this lies in one of React's lifecycle methods called <code>shouldComponentUpdate</code>.</p>\\n<h3>shouldComponentUpdate</h3>\\n<p>This method is part of the Update phase, and is one of the first hooks to be triggered. Natively in React, every time a component enters the Update phase, shouldComponent update returns true. However, it is available to developers as a way to further enhance component performance, and that is because React does shallow comparison between old and new props and state.</p>\\n<p>To evaluate equality, shallow comparison will do a few different things:</p>\\n<ul>\\n<li>Compare object signature (objA === objB), that is, if they both reference the same place in memory</li>\\n<li>Check if the amount of <strong>first level</strong> properties are the same (Object.keys(objA).length === Object.keys(objB).length)</li>\\n<li>Check if both object keys are the same in name and value</li>\\n</ul>\\n<p>Excerpt from React's PureRenderMixin:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>objA<span class=\\\"token punctuation\\\">:</span> mixed<span class=\\\"token punctuation\\\">,</span> objB<span class=\\\"token punctuation\\\">:</span> mixed<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> boolean <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>objA <span class=\\\"token operator\\\">===</span> objB<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> objA <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">||</span> objA <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">||</span>\\n      <span class=\\\"token keyword\\\">typeof</span> objB <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">||</span> objB <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> keysA <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>objA<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> keysB <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>objB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>keysA<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> keysB<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> bHasOwnProperty <span class=\\\"token operator\\\">=</span> hasOwnProperty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>objB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keysA<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">bHasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> objA<span class=\\\"token punctuation\\\">[</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> objB<span class=\\\"token punctuation\\\">[</span>keysA<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shallowCompare</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n    <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">shallowEqual</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>One important thing to notice, and that you might have let pass is that Object.keys(obj) only return the first level object properties, which means:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> \\n    c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n    d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//[\\\"a\\\"]</span>\\n</code></pre>\\n      </div>\\n<p>All of the other nested objects are left behind, which means that if our object's signature is the same, and the first level scalar value properties (strings, numbers) are equal then the object is deemed to be the same, and React doesn't trigger an update. Since we provided a mutated value, our code is not considered pure.</p>\\n<p>If in React we had the ability to manually push a value into an array inside state, and that value was passed down to a child component, the child component wouldn't update to reflect the new object. That's why it's only possible to re-render by changing state with setState.</p>\\n<h3>Deep Equals</h3>\\n<p>I thought about how I would create a deep equals functionality as a way to compare all object values, including nested objects between a given objA and a given objB. The requirements where as follows:</p>\\n<ul>\\n<li>Make sure the same props that exist in objA, also exist in objB</li>\\n<li>Make sure their values are equal</li>\\n</ul>\\n<p>So the first thing I would do is iterating over the first level properties for objA, and do something if these properties are objects themselves, and something else if not:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> \\n      <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">doSomethingElse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>I figured that if these objects are objects themselves, I probably want to keep looking further until it's not anymore;</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> \\n      <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">doSomethingElse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>And also, if it's finally not an object, then we'll simply check if the given property exists in objB and compare the two:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">:</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Now, with an array of booleans we reduce them to the final value:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span>\\n      <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">:</span> b <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasOwnProperty</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> a<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> acc <span class=\\\"token operator\\\">&amp;&amp;</span> curr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Tests</h3>\\n<p>I'm using <a href=\\\"https://github.com/mjackson\\\">mjackson's expectjs library</a> to assert.</p>\\n<p>One: I expect objects with the same property names and values, including nested objects, to be considered equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Two: I expect objects with different property names and/or values, including nested objects, to be considered not equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//different values, same keys</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Cat'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> animal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//diferent keys, same values</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//different keys, different values</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'C'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> make<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'D'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Three: I expect objects with different number of properties, including nested objects properties, even if everything else is the same, to be considered not equal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//more keys in objA</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//more keys in objB</span>\\n<span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">deepEquals</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Dog'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-15-my-attempt-of-deep-equals/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-02-15T03:11:45.165Z\",\"path\":\"/my-attempt-of-deep-equals\",\"title\":\"Attempting Deep Equals\",\"excerpt\":\"One of the keys for React and Redux development is state immutability. Today, we'll discuss more specifically why, and build a function to compare deep equality betweeen two objects...\",\"tags\":[\"react\",\"javascript\"]}},\"next\":{\"html\":\"<h2>Handling JavaScript Promises</h2>\\n<p>For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time. </p>\\n<h3>XMLHttpRequest example</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> xhr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">XMLHttpRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'api.github.com/users'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'load'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'response is here'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The XMLHttpRequest way to do things involved callback functions. That is, pieces of code to be executed when the external process is finished and the response is back. </p>\\n<p>Soon enough - as code bases grew and environments such as Node.js appeared, it became more and more difficult to handle asynchronous requests in a desired order through a series of steps, handling any errors that might come up, and also keeping good readability. The <strong>callback hell</strong> emerged.</p>\\n<h3>Callback Hell</h3>\\n<p>As callbacks usage was increased and widely adopted to handle both synchronous and asynchronous operations, a peculiar symptom started to appear: the nesting of these callbacks in a very confusing fashion, leading to poor code readability.</p>\\n<h4>Sample Node.js file</h4>\\n<p>Checking if a file exists, reading its content and updating it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> myFile <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'my-file.js'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> message <span class=\\\"token operator\\\">=</span> process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">editFile</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> additionalContent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> content <span class=\\\"token operator\\\">+</span> additionalContent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exists</span><span class=\\\"token punctuation\\\">(</span>myFile<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>exists<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>exists<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n\\n            fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">editFile</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">//writing finished</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>The Promise Way</h3>\\n<p>Promises had a better proposal on how to structure and order asynchronous calls in a series of steps while maintaining readability and organization. Additionally with Promises when errors occurr it's possible to catch 'em on the spot, without need for checks in every step of the way.</p>\\n<p>To see how to implement a Promise in a very basic manner, first let's compare it with an old callback-nesting version of it. The scenario is simple, loading an image and handling cases of sucess and error for it:</p>\\n<h4>Old callback-nesting way</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'blossom.png'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'wrapper'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findElementById</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`error found while loading image: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> containerId<span class=\\\"token punctuation\\\">,</span> success<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n\\n    img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">success</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>With Promises, we need to wrap our operations (timers, requests, etc) on a new Promise instantiation and either Resolve or Reject with the response of these requests. The same example above, in Promises, would be:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'blossom.png'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'wrapper'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findElementById</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`error found while loading image: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> containerId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n\\n        img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>As you can see, it's possible to chain calls together, with <code>.then</code>, and catch errors with <code>.catch</code>. You can do as many operations as you wish, by resolving promises and having the resolved values as the first argument of the next function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">users</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> users <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">,</span>\\n            content<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'This is my description description '</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        getUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        editUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//fetch api uses promises natively</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getUser</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.github.com/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>userName<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">users</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//json parse</span>\\n        <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//returning description</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">users</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">editUser</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>username<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">.</span>description<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//...</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>It's also possible to assign a Promise to a variable and use it progressively, as necessary, instead of chaining:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">promiseFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\npromise\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\npromise\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">handleSomeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>In essence, a Promise is an object that serves as temporary placeholder for a future evaluation, which is usually an asynchronous operation like an async request or a timer. Using the Promise object, you can layout the path the actual value will take for when it's ready to be executed, by registering callbacks to be ran when the operation succeeds or fails.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2017-12-28-handling-javascript-promises/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-29T03:15:59.165Z\",\"path\":\"/using-javascript-promises\",\"title\":\"Using JavaScript Promises\",\"excerpt\":\"For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time.\",\"tags\":[\"javascript\",\"promises\",\"ajax\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/render-props-with-react.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/render-props-with-react.json\n// module chunks = 141701966159975"],"sourceRoot":""}