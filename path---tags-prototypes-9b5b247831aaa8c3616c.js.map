{"version":3,"sources":["webpack:///path---tags-prototypes-9b5b247831aaa8c3616c.js","webpack:///./.cache/json/tags-prototypes.json"],"names":["webpackJsonp","390","module","exports","pathContext","posts","html","id","frontmatter","date","path","title","excerpt","tags","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,KAAA,izFAA0sEC,GAAA,0HAAAC,aAAu0BC,KAAA,YAAAC,KAAA,uBAAAC,MAAA,0BAAAC,QAAA,GAAAC,MAAA,yCAAiJP,KAAA,g8XAAwwYC,GAAA,6HAAAC,aAA0VC,KAAA,YAAAC,KAAA,0BAAAC,MAAA,0BAAAC,QAAA,GAAAC,MAAA,yCAAoJP,KAAA,ggIAA4jIC,GAAA,wHAAAC,aAA8OC,KAAA,YAAAC,KAAA,qBAAAC,MAAA,sBAAAC,QAAA,GAAAC,MAAA,8BAA8HC,QAAA","file":"path---tags-prototypes-9b5b247831aaa8c3616c.js","sourcesContent":["webpackJsonp([123714770088071],{\n\n/***/ 390:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<p>A prototype is an object used to model other objects. It's similar to a class in the sense it allows for the creation of any number of object instances, but with the exception that a prototype is an object itself.</p>\\n<h3>Delegation, not Inheritance</h3>\\n<p>Different from the classical model, we don't inherit from prototypes as we would with classes. Instead, we delegate from these objects to the ones after.</p>\\n<h3>The Chain</h3>\\n<p>When using prototype objects to create new ones, the methods are not replicated in the instance object. Instead, they're referenced. Each instance has a link pointing to the prototype (original object) so when we execute one object's method, JavaScript first tries to see if it finds in the instance, going up the chain until it finds if it doesn't.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SuperAnimal</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nSuperAnimal<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"some super animal\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">SuperAnimal</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nAnimal<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"some regular animal\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> rabbit <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Animal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nrabbit<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'some regular animal'</span>\\n\\n<span class=\\\"token comment\\\">// keep in mind the `class` syntax in JS is just a syntactic sugar over the es5 prototype model</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">rabbit.name</code> will evaluate to <code class=\\\"language-text\\\">some regular animal</code> because the next object in the chain is Animal. If we comment the <code class=\\\"language-text\\\">Animal.prototype.name</code> assignment, <code class=\\\"language-text\\\">rabbit.name</code> would then be \\\"some super animal\\\"</p>\\n<p><strong>Keywords:</strong> Object delegation, Prototype chain, Definitely not like old school classes</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-03-glossary-prototypes/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Su, 02/19\",\"path\":\"/glossary-prototypes\",\"title\":\"Glossary: JS prototypes\",\"excerpt\":\"\",\"tags\":[\"prototypes\",\"javascript\",\"glossary\"]}},{\"html\":\"<p><code class=\\\"language-text\\\">Object.create</code> is a method that takes one object as the first parameter and makes it the delegate for the newly created object instances.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> someReferenceObject <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Ragnar Lothbrok\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  skills<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    powerAttack<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"For oodiiin!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// each viking lives with the spirit of Ragnar</span>\\n<span class=\\\"token keyword\\\">const</span> viking <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>someReferenceObject<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>viking<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Object { powerAttack: f }</span></code></pre>\\n      </div>\\n<p>When you use a constructor function with the <code class=\\\"language-text\\\">new</code> keyword, the object referenced by the constructor's prototype property gets set as the delegate for the objects that get created after.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nCat<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">attack</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"meowow?\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> instanceCat <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ninstanceCat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attack</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// meowow?</span></code></pre>\\n      </div>\\n<p>So this means we can replicate <code class=\\\"language-text\\\">Object.create</code> by having a function that accepts an object, creates a new constructor, attributes the provided object as prototype of the newly created constructor, creates and returns an instance:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">create</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>protoReference<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Any</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  Any<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> protoReference<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Any</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><strong>Important</strong>: changing properties on the instance should not reflect in changes on the prototype, or other instances that use it.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> peopleProto <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  someName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"eric\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> person <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>peopleProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> person2 <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>peopleProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nperson<span class=\\\"token punctuation\\\">.</span>someName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"joanne\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"1: \\\"</span><span class=\\\"token punctuation\\\">,</span> person<span class=\\\"token punctuation\\\">.</span>someName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// joanne</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"2: \\\"</span><span class=\\\"token punctuation\\\">,</span> person2<span class=\\\"token punctuation\\\">.</span>someName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// eric</span></code></pre>\\n      </div>\\n<p>Here's something tricky! If you change an object or array inside prototype directly, that will cause unexpected errors:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> anotherProto <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  skills<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    thunderStrike<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"you just got thunder STRUCK!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"skill name: thunder strike\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// creating two instances</span>\\n<span class=\\\"token keyword\\\">const</span> alex <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>anotherProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> jack <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>anotherProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// changing an object property directly</span>\\nalex<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">thunderStrike</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"you just got COMPLIMENTED\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// seeing if it impacted jack</span>\\njack<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">thunderStrike</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// you just got COMPLIMENTED</span></code></pre>\\n      </div>\\n<p><em>Thanks to Alex, Jack is no longer the aggressive warrior he once was and now distributes compliments around.</em></p>\\n<p>The solution is to reassign the entire object:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> alex <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>anotherProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nalex<span class=\\\"token punctuation\\\">.</span>skills <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  thunderStrike<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/* */</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\njack<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">thunderStrike</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// you just got thunder STRUCK!</span></code></pre>\\n      </div>\\n<p>Refer to <a href=\\\"/glossary-prototypes\\\">this post</a> for more info on JS prototypes.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2019-02-03-glossary-object-create/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Su, 02/19\",\"path\":\"/glossary-object-create\",\"title\":\"Glossary: Object Create\",\"excerpt\":\"\",\"tags\":[\"prototypes\",\"javascript\",\"glossary\"]}},{\"html\":\"<p>Sometimes you don't want to delegate from a prototype, like mentioned <a href=\\\"/glossary-object-create\\\">here</a> and <a href=\\\"/glossary-prototypes\\\">here</a>. Instead, you want to have all properties of the prototype copied into the new object. That can be done with <code class=\\\"language-text\\\">Object.assign</code>.</p>\\n<p>Here's a possible implementation of such a behavior:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">copyFrom</span> <span class=\\\"token operator\\\">=</span> ref <span class=\\\"token operator\\\">=></span>\\n  Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>ref<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span>acc<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span>curr<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> ref<span class=\\\"token punctuation\\\">[</span>curr<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><a href=\\\"https://repl.it/@zavareze/Objectextend-Assign-Cloning\\\">Live Code on Repl.it</a></p>\\n<p>The difference between cloning and prototyping is that the latter is more memory efficient. So it's a good idea to use delegation for publicly shared methods, and cloning for properties in order to prevent shared state issues.</p>\\n<p><strong>Important</strong>: just as seen previously, object and array direct assingments are shared between instances whereas replacements are instance-specific:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> somePrototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> skills<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"ray\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> inst1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">copyFrom</span><span class=\\\"token punctuation\\\">(</span>somePrototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> inst2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">copyFrom</span><span class=\\\"token punctuation\\\">(</span>somePrototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ninst1<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"thunder\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// did it affect 'inst2'?</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>inst2<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'thunder' Yes, it did</span></code></pre>\\n      </div>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2019-02-04-prototype-cloning/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Su, 02/19\",\"path\":\"/prototype-cloning\",\"title\":\"Prototype and Clone\",\"excerpt\":\"\",\"tags\":[\"prototypes\",\"javascript\"]}}],\"tagName\":\"prototypes\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-prototypes-9b5b247831aaa8c3616c.js","module.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<p>A prototype is an object used to model other objects. It's similar to a class in the sense it allows for the creation of any number of object instances, but with the exception that a prototype is an object itself.</p>\\n<h3>Delegation, not Inheritance</h3>\\n<p>Different from the classical model, we don't inherit from prototypes as we would with classes. Instead, we delegate from these objects to the ones after.</p>\\n<h3>The Chain</h3>\\n<p>When using prototype objects to create new ones, the methods are not replicated in the instance object. Instead, they're referenced. Each instance has a link pointing to the prototype (original object) so when we execute one object's method, JavaScript first tries to see if it finds in the instance, going up the chain until it finds if it doesn't.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SuperAnimal</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nSuperAnimal<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"some super animal\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">SuperAnimal</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nAnimal<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"some regular animal\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> rabbit <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Animal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nrabbit<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'some regular animal'</span>\\n\\n<span class=\\\"token comment\\\">// keep in mind the `class` syntax in JS is just a syntactic sugar over the es5 prototype model</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">rabbit.name</code> will evaluate to <code class=\\\"language-text\\\">some regular animal</code> because the next object in the chain is Animal. If we comment the <code class=\\\"language-text\\\">Animal.prototype.name</code> assignment, <code class=\\\"language-text\\\">rabbit.name</code> would then be \\\"some super animal\\\"</p>\\n<p><strong>Keywords:</strong> Object delegation, Prototype chain, Definitely not like old school classes</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-03-glossary-prototypes/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Su, 02/19\",\"path\":\"/glossary-prototypes\",\"title\":\"Glossary: JS prototypes\",\"excerpt\":\"\",\"tags\":[\"prototypes\",\"javascript\",\"glossary\"]}},{\"html\":\"<p><code class=\\\"language-text\\\">Object.create</code> is a method that takes one object as the first parameter and makes it the delegate for the newly created object instances.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> someReferenceObject <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Ragnar Lothbrok\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  skills<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    powerAttack<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"For oodiiin!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// each viking lives with the spirit of Ragnar</span>\\n<span class=\\\"token keyword\\\">const</span> viking <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>someReferenceObject<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>viking<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Object { powerAttack: f }</span></code></pre>\\n      </div>\\n<p>When you use a constructor function with the <code class=\\\"language-text\\\">new</code> keyword, the object referenced by the constructor's prototype property gets set as the delegate for the objects that get created after.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nCat<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">attack</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"meowow?\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> instanceCat <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ninstanceCat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attack</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// meowow?</span></code></pre>\\n      </div>\\n<p>So this means we can replicate <code class=\\\"language-text\\\">Object.create</code> by having a function that accepts an object, creates a new constructor, attributes the provided object as prototype of the newly created constructor, creates and returns an instance:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">create</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>protoReference<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Any</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  Any<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> protoReference<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Any</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><strong>Important</strong>: changing properties on the instance should not reflect in changes on the prototype, or other instances that use it.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> peopleProto <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  someName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"eric\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> person <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>peopleProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> person2 <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>peopleProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nperson<span class=\\\"token punctuation\\\">.</span>someName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"joanne\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"1: \\\"</span><span class=\\\"token punctuation\\\">,</span> person<span class=\\\"token punctuation\\\">.</span>someName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// joanne</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"2: \\\"</span><span class=\\\"token punctuation\\\">,</span> person2<span class=\\\"token punctuation\\\">.</span>someName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// eric</span></code></pre>\\n      </div>\\n<p>Here's something tricky! If you change an object or array inside prototype directly, that will cause unexpected errors:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> anotherProto <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  skills<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    thunderStrike<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"you just got thunder STRUCK!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"skill name: thunder strike\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// creating two instances</span>\\n<span class=\\\"token keyword\\\">const</span> alex <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>anotherProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> jack <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>anotherProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// changing an object property directly</span>\\nalex<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">thunderStrike</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"you just got COMPLIMENTED\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// seeing if it impacted jack</span>\\njack<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">thunderStrike</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// you just got COMPLIMENTED</span></code></pre>\\n      </div>\\n<p><em>Thanks to Alex, Jack is no longer the aggressive warrior he once was and now distributes compliments around.</em></p>\\n<p>The solution is to reassign the entire object:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> alex <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>anotherProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nalex<span class=\\\"token punctuation\\\">.</span>skills <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  thunderStrike<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/* */</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\njack<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">thunderStrike</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// you just got thunder STRUCK!</span></code></pre>\\n      </div>\\n<p>Refer to <a href=\\\"/glossary-prototypes\\\">this post</a> for more info on JS prototypes.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2019-02-03-glossary-object-create/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Su, 02/19\",\"path\":\"/glossary-object-create\",\"title\":\"Glossary: Object Create\",\"excerpt\":\"\",\"tags\":[\"prototypes\",\"javascript\",\"glossary\"]}},{\"html\":\"<p>Sometimes you don't want to delegate from a prototype, like mentioned <a href=\\\"/glossary-object-create\\\">here</a> and <a href=\\\"/glossary-prototypes\\\">here</a>. Instead, you want to have all properties of the prototype copied into the new object. That can be done with <code class=\\\"language-text\\\">Object.assign</code>.</p>\\n<p>Here's a possible implementation of such a behavior:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">copyFrom</span> <span class=\\\"token operator\\\">=</span> ref <span class=\\\"token operator\\\">=></span>\\n  Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>ref<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span>acc<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span>curr<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> ref<span class=\\\"token punctuation\\\">[</span>curr<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><a href=\\\"https://repl.it/@zavareze/Objectextend-Assign-Cloning\\\">Live Code on Repl.it</a></p>\\n<p>The difference between cloning and prototyping is that the latter is more memory efficient. So it's a good idea to use delegation for publicly shared methods, and cloning for properties in order to prevent shared state issues.</p>\\n<p><strong>Important</strong>: just as seen previously, object and array direct assingments are shared between instances whereas replacements are instance-specific:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> somePrototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> skills<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"ray\\\"</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> inst1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">copyFrom</span><span class=\\\"token punctuation\\\">(</span>somePrototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> inst2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">copyFrom</span><span class=\\\"token punctuation\\\">(</span>somePrototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ninst1<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"thunder\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// did it affect 'inst2'?</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>inst2<span class=\\\"token punctuation\\\">.</span>skills<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'thunder' Yes, it did</span></code></pre>\\n      </div>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2019-02-04-prototype-cloning/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Su, 02/19\",\"path\":\"/prototype-cloning\",\"title\":\"Prototype and Clone\",\"excerpt\":\"\",\"tags\":[\"prototypes\",\"javascript\"]}}],\"tagName\":\"prototypes\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-prototypes.json\n// module id = 390\n// module chunks = 123714770088071"],"sourceRoot":""}