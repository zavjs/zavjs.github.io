{"version":3,"sources":["webpack:///path---what-is-a-container-8a143569f550eb093377.js","webpack:///./.cache/json/what-is-a-container.json"],"names":["webpackJsonp","387","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,q1BAA6uBC,aAAiIC,MAAA,uBAAAC,KAAA,oBAAAC,KAAA,uBAAAC,MAAA,qBAAAC,QAAA,MAAoIC,aAAgBC,MAAQR,KAAA,6zlBAA43kBS,GAAA,kIAAAR,aAA8rCE,KAAA,YAAAC,KAAA,+BAAAF,MAAA,8BAAAI,QAAA,+IAAAD,MAAA,gBAA+QK,KAAA","file":"path---what-is-a-container-8a143569f550eb093377.js","sourcesContent":["webpackJsonp([238369137922760],{\n\n/***/ 387:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>A container is a set of one or more applications isolated from the rest of a system. It's a mechanism originated from the necesity of sharing server resources like memory and CPU amongst different apps.</p>\\n<p>The previously used model of Hypervisors, popularly known as virtual machines would require each application to have its own operational system, which is suboptimal as it incurs in monetary and operational costs such as licensing and hardware upgrades, as operational systems require the consumption of resources for its own sustaining.</p>\\n<p>Instead, containers sit on top of and share the same operational system as all others in the machine.</p>\\n<img style=\\\"max-width: 75%; margin: 0 auto; padding: 20px; display: block;\\\" src=\\\"https://www.docker.com/sites/default/files/d8/2018-11/docker-containerized-and-vm-transparent-bg.png\\\">\",\"frontmatter\":{\"title\":\"What is a container?\",\"date\":\"February 02, 2019\",\"path\":\"/what-is-a-container\",\"tags\":[\"container\",\"linux\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p>Design patterns are proven reusable solutions to a recurrent problem. To be considered a pattern, the solution must not be obvious. Most of the times, patterns describe a relationship between structures.</p>\\n<p>One major benefit of design patterns is the creation of jargons for common vocabulary. Instead of explaining complex structures we just say \\\"why not do a module here, my good sir?\\\". So, tighten your seatbealts and let's delve into some of my favorite.</p>\\n<blockquote>\\n<p>Did you know the concept of Design Patterns is original from construction? Coined by Christopher Alexander in his book \\\"A Pattern Language\\\", he wrote it to outline common patterns or solutions he came across when building stuff out in the physical world.</p>\\n</blockquote>\\n<blockquote>\\n<p><em>For example, the Cloverleaf interchanges are a common proven solution to help drivers transition between highways without the need of turns or even traffic lights.</em></p>\\n</blockquote>\\n<h3>Design Patterns in JavaScript</h3>\\n<hr>\\n<p>The first pattern is categorized under the creational type of patterns. A module is simply a containarized toolbox of related functionalities that is commonly created as a list of methods within an object literal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> SongBox <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  songs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  singSong<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// check if the song already exist in the list</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>song<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// adds if it doesn't</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> song\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\\u266a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  getSongById<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2>The Module Pattern</h2>\\n<hr>\\n<p><strong>The Module Pattern</strong> became more recurrent with modern browser JavaScript in the moment which it started being possible to create files as modules in the browsers, and have them imported by other files. The popularization of this approach is due to tools like Browserify, Webpack, and others.</p>\\n<p>We can even make a module to be a function so it accepts arguments, and does calculations, or delays execution before returning the methods. Another common use for modules as functions is to create private vaiables.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// accepting arguments that will enhance functionality</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">SongBox</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// songs is a private variable and cannot be retrieved from outside</span>\\n  <span class=\\\"token comment\\\">// SongBox.songs doesn't exist outside</span>\\n  <span class=\\\"token keyword\\\">var</span> songs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">addSong</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    songs <span class=\\\"token operator\\\">=</span> songs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getSongs</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> limit <span class=\\\"token operator\\\">?</span> songs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> songs<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    addSong<span class=\\\"token punctuation\\\">,</span>\\n    getSongs\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>What do you think is the benefit for creating modules? My take is that it becomes much better to reason, discern and organize our code if we manage to logically separate all differing structures of our software apart. Each component is very well delimited and we know exactly when one ends and another begins.</p>\\n<p>Additionally, if we are able to separate our components we get to be able to test them separately as well. And isn't that much better when we need to work on new functionality, or to alter existing ones? Isn't separation of concerns a much more efficient tactic when we need to find a pesky bug in the code? I know for a fact it is, because if there's a clearer distinction of <em>what's what</em>, specific tests will fail, and specific functions will accuse the error more prominently.</p>\\n<p>Software developers already know the importance of decomposing big problems in multiple small specialized functions that solve small units (the divide and conquer tactic). With the module pattern, we can take this to another level to group similar functionality.</p>\\n<h2>The Facade Pattern</h2>\\n<hr>\\n<p>Simplicity. Simplicity is key to software development. Not because of machines, but because of those that operate the machines - we, humans. The Facade Pattern is aimed to enhance software construction by providing a simplified interface to a complicated sub-system.</p>\\n<p>Like most web developers, my early days of hacking in the web started with jQuery. Oh, and how powerful I felt using jQuery. A few lines of code and BAM! I'm making an element slide into view, almost like a Ninja. Another line and SHAZAM! this div is fading out from view.</p>\\n<p>This apparent simplicity of the few <code class=\\\"language-text\\\">$(el).slideDown()</code> and <code class=\\\"language-text\\\">$(el).fadeOut()</code> methods hide quite a lot of complexity. For starters, the actual animation within those functions usually took way more than a couple of lines. Then, there's the problem of browser compatibility. How are you making sure that everything you do in JavaScript is compatible with the latest Chrome browser, and IE8 altogether?</p>\\n<p>Something as simple as creating an event listener had different syntaxes in different browsers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// webkit:</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'clicked!'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ie 8/opera</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onclick'</span><span class=\\\"token punctuation\\\">,</span> div<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">detachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onclick'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Now imagine something a little more complicated, like JS animations. So when it comes to actually supporting all browsers, developers would have to be mindful of quite a few different possibilities for compatibility. jQuery took that away,by taking care of common complexities found in web development, so that the final developer doesn't have to.</p>\\n<p><code class=\\\"language-text\\\">$(el).css()</code>, <code class=\\\"language-text\\\">$(el).animate()</code> are just a few other examples on why a beginner would feel so competent writing JavaScript.</p>\\n<h3>Creating a Facade ourselves</h3>\\n<hr>\\n<p>A Facade is just a simplified interface for a complex sub-system. Just as the seemingly nice neighbour who smiles and greets, but deep inside despises and envies you.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// Immediately-invoked function expression for</span>\\n<span class=\\\"token comment\\\">// separate scope</span>\\n<span class=\\\"token keyword\\\">var</span> myBankingModule <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> _private <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    deposit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>cash<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash <span class=\\\"token operator\\\">+</span> cash<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    transfer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>amount<span class=\\\"token punctuation\\\">,</span> destination<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"transfering\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"$\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">+</span> amount <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" to: \\\"</span> <span class=\\\"token operator\\\">+</span> destination<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    getBalance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is how much you have now\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    depositTransferAndLog<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">deposit</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">.</span>depositAmount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">.</span>transferAmount<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">.</span>transferDestinationId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBalance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> account <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">myBankingModule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\naccount<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">depositTransferAndLog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  depositAmount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1500</span><span class=\\\"token punctuation\\\">,</span>\\n  transferAmount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span>\\n  transferDestinationId<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"af043748399930948d9\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Notice that when calling <code class=\\\"language-text\\\">.depositTransferAndLog()</code> we are triggering a set of private behavior within the module, that the consuming part doesn't even have to be aware of. We made it much easier to consume a feature without needing to worry about implementation-level details. Think of all APIs you have consumed. They usually expose a few methods that are very intuitive and simple to use while the hardwork is done at the server level.</p>\\n<h2>Conclusion</h2>\\n<hr>\\n<p>Design patterns are proven solutions to recurrent software problems. They can't be obvious and they offer good standards on how we create, structure and extend functionality.</p>\\n<p><strong>The Module Pattern</strong>: the grouping of similar functions together. Separation of concerns, enhanced testability and debuggability.</p>\\n<p><strong>The Facade Pattern</strong>: the simplification of a complex sub-system. Creating abstractions that hide potential complexities or obscurities from the original code.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-09-29-most-useful-design-patterns/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Sa, 09/18\",\"path\":\"/most-useful-design-patterns\",\"title\":\"Design Patterns: JavaScript\",\"excerpt\":\"Design patterns are proven solutions to a recurrent problem. Most of the times they describe a relationship between more than one structures\",\"tags\":[\"javascript\"]}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---what-is-a-container-8a143569f550eb093377.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>A container is a set of one or more applications isolated from the rest of a system. It's a mechanism originated from the necesity of sharing server resources like memory and CPU amongst different apps.</p>\\n<p>The previously used model of Hypervisors, popularly known as virtual machines would require each application to have its own operational system, which is suboptimal as it incurs in monetary and operational costs such as licensing and hardware upgrades, as operational systems require the consumption of resources for its own sustaining.</p>\\n<p>Instead, containers sit on top of and share the same operational system as all others in the machine.</p>\\n<img style=\\\"max-width: 75%; margin: 0 auto; padding: 20px; display: block;\\\" src=\\\"https://www.docker.com/sites/default/files/d8/2018-11/docker-containerized-and-vm-transparent-bg.png\\\">\",\"frontmatter\":{\"title\":\"What is a container?\",\"date\":\"February 02, 2019\",\"path\":\"/what-is-a-container\",\"tags\":[\"container\",\"linux\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p>Design patterns are proven reusable solutions to a recurrent problem. To be considered a pattern, the solution must not be obvious. Most of the times, patterns describe a relationship between structures.</p>\\n<p>One major benefit of design patterns is the creation of jargons for common vocabulary. Instead of explaining complex structures we just say \\\"why not do a module here, my good sir?\\\". So, tighten your seatbealts and let's delve into some of my favorite.</p>\\n<blockquote>\\n<p>Did you know the concept of Design Patterns is original from construction? Coined by Christopher Alexander in his book \\\"A Pattern Language\\\", he wrote it to outline common patterns or solutions he came across when building stuff out in the physical world.</p>\\n</blockquote>\\n<blockquote>\\n<p><em>For example, the Cloverleaf interchanges are a common proven solution to help drivers transition between highways without the need of turns or even traffic lights.</em></p>\\n</blockquote>\\n<h3>Design Patterns in JavaScript</h3>\\n<hr>\\n<p>The first pattern is categorized under the creational type of patterns. A module is simply a containarized toolbox of related functionalities that is commonly created as a list of methods within an object literal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> SongBox <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  songs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  singSong<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// check if the song already exist in the list</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>song<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// adds if it doesn't</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> song\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\\u266a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  getSongById<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2>The Module Pattern</h2>\\n<hr>\\n<p><strong>The Module Pattern</strong> became more recurrent with modern browser JavaScript in the moment which it started being possible to create files as modules in the browsers, and have them imported by other files. The popularization of this approach is due to tools like Browserify, Webpack, and others.</p>\\n<p>We can even make a module to be a function so it accepts arguments, and does calculations, or delays execution before returning the methods. Another common use for modules as functions is to create private vaiables.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// accepting arguments that will enhance functionality</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">SongBox</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// songs is a private variable and cannot be retrieved from outside</span>\\n  <span class=\\\"token comment\\\">// SongBox.songs doesn't exist outside</span>\\n  <span class=\\\"token keyword\\\">var</span> songs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">addSong</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    songs <span class=\\\"token operator\\\">=</span> songs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getSongs</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> limit <span class=\\\"token operator\\\">?</span> songs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> songs<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    addSong<span class=\\\"token punctuation\\\">,</span>\\n    getSongs\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>What do you think is the benefit for creating modules? My take is that it becomes much better to reason, discern and organize our code if we manage to logically separate all differing structures of our software apart. Each component is very well delimited and we know exactly when one ends and another begins.</p>\\n<p>Additionally, if we are able to separate our components we get to be able to test them separately as well. And isn't that much better when we need to work on new functionality, or to alter existing ones? Isn't separation of concerns a much more efficient tactic when we need to find a pesky bug in the code? I know for a fact it is, because if there's a clearer distinction of <em>what's what</em>, specific tests will fail, and specific functions will accuse the error more prominently.</p>\\n<p>Software developers already know the importance of decomposing big problems in multiple small specialized functions that solve small units (the divide and conquer tactic). With the module pattern, we can take this to another level to group similar functionality.</p>\\n<h2>The Facade Pattern</h2>\\n<hr>\\n<p>Simplicity. Simplicity is key to software development. Not because of machines, but because of those that operate the machines - we, humans. The Facade Pattern is aimed to enhance software construction by providing a simplified interface to a complicated sub-system.</p>\\n<p>Like most web developers, my early days of hacking in the web started with jQuery. Oh, and how powerful I felt using jQuery. A few lines of code and BAM! I'm making an element slide into view, almost like a Ninja. Another line and SHAZAM! this div is fading out from view.</p>\\n<p>This apparent simplicity of the few <code class=\\\"language-text\\\">$(el).slideDown()</code> and <code class=\\\"language-text\\\">$(el).fadeOut()</code> methods hide quite a lot of complexity. For starters, the actual animation within those functions usually took way more than a couple of lines. Then, there's the problem of browser compatibility. How are you making sure that everything you do in JavaScript is compatible with the latest Chrome browser, and IE8 altogether?</p>\\n<p>Something as simple as creating an event listener had different syntaxes in different browsers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// webkit:</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'clicked!'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ie 8/opera</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onclick'</span><span class=\\\"token punctuation\\\">,</span> div<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">detachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onclick'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Now imagine something a little more complicated, like JS animations. So when it comes to actually supporting all browsers, developers would have to be mindful of quite a few different possibilities for compatibility. jQuery took that away,by taking care of common complexities found in web development, so that the final developer doesn't have to.</p>\\n<p><code class=\\\"language-text\\\">$(el).css()</code>, <code class=\\\"language-text\\\">$(el).animate()</code> are just a few other examples on why a beginner would feel so competent writing JavaScript.</p>\\n<h3>Creating a Facade ourselves</h3>\\n<hr>\\n<p>A Facade is just a simplified interface for a complex sub-system. Just as the seemingly nice neighbour who smiles and greets, but deep inside despises and envies you.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// Immediately-invoked function expression for</span>\\n<span class=\\\"token comment\\\">// separate scope</span>\\n<span class=\\\"token keyword\\\">var</span> myBankingModule <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> _private <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    deposit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>cash<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash <span class=\\\"token operator\\\">+</span> cash<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    transfer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>amount<span class=\\\"token punctuation\\\">,</span> destination<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"transfering\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"$\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">+</span> amount <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" to: \\\"</span> <span class=\\\"token operator\\\">+</span> destination<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    getBalance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is how much you have now\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    depositTransferAndLog<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">deposit</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">.</span>depositAmount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">.</span>transferAmount<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">.</span>transferDestinationId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBalance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> account <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">myBankingModule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\naccount<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">depositTransferAndLog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  depositAmount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1500</span><span class=\\\"token punctuation\\\">,</span>\\n  transferAmount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span>\\n  transferDestinationId<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"af043748399930948d9\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Notice that when calling <code class=\\\"language-text\\\">.depositTransferAndLog()</code> we are triggering a set of private behavior within the module, that the consuming part doesn't even have to be aware of. We made it much easier to consume a feature without needing to worry about implementation-level details. Think of all APIs you have consumed. They usually expose a few methods that are very intuitive and simple to use while the hardwork is done at the server level.</p>\\n<h2>Conclusion</h2>\\n<hr>\\n<p>Design patterns are proven solutions to recurrent software problems. They can't be obvious and they offer good standards on how we create, structure and extend functionality.</p>\\n<p><strong>The Module Pattern</strong>: the grouping of similar functions together. Separation of concerns, enhanced testability and debuggability.</p>\\n<p><strong>The Facade Pattern</strong>: the simplification of a complex sub-system. Creating abstractions that hide potential complexities or obscurities from the original code.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-09-29-most-useful-design-patterns/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Sa, 09/18\",\"path\":\"/most-useful-design-patterns\",\"title\":\"Design Patterns: JavaScript\",\"excerpt\":\"Design patterns are proven solutions to a recurrent problem. Most of the times they describe a relationship between more than one structures\",\"tags\":[\"javascript\"]}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/what-is-a-container.json\n// module id = 387\n// module chunks = 238369137922760"],"sourceRoot":""}