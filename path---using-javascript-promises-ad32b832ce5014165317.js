webpackJsonp([60085421944301],{376:function(n,s){n.exports={data:{markdownRemark:{html:'<p>For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time.</p>\n<h3>XMLHttpRequest example</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"api.github.com/users"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"response is here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The XMLHttpRequest way to do things involved callback functions. That is, pieces of code to be executed when the external process is finished and the response is back.</p>\n<p>Soon enough - as code bases grew and environments such as Node.js appeared, it became more and more difficult to handle asynchronous requests in a desired order through a series of steps, handling any errors that might come up, and also keeping good readability. The <strong>callback hell</strong> emerged.</p>\n<h3>Callback Hell</h3>\n<p>As callbacks usage was increased and widely adopted to handle both synchronous and asynchronous operations, a peculiar symptom started to appear: the nesting of these callbacks in a very confusing fashion, leading to poor code readability.</p>\n<h4>Sample Node.js file</h4>\n<p>Checking if a file exists, reading its content and updating it:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> myFile <span class="token operator">=</span> <span class="token string">"my-file.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> message <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">editFile</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> additionalContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> content <span class="token operator">+</span> additionalContent<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nfs<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>myFile<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n\n      fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token function">editFile</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//writing finished</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3>The Promise Way</h3>\n<p>Promises had a better proposal on how to structure and order asynchronous calls in a series of steps while maintaining readability and organization. Additionally with Promises when errors occurr it\'s possible to catch \'em on the spot, without need for checks in every step of the way.</p>\n<p>To see how to implement a Promise in a very basic manner, first let\'s compare it with an old callback-nesting version of it. The scenario is simple, loading an image and handling cases of sucess and error for it:</p>\n<h4>Old callback-nesting way</h4>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">\'blossom.png\'</span><span class="token punctuation">,</span> <span class="token string">\'wrapper\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>containerId<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    document<span class="token punctuation">.</span><span class="token function">findElementById</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`error found while loading image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> containerId<span class="token punctuation">,</span> success<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">success</span><span class="token punctuation">(</span>containerId<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>With Promises, we need to wrap our operations (timers, requests, etc) on a new Promise instantiation and either Resolve or Reject with the response of these requests. The same example above, in Promises, would be:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">\'blossom.png\'</span><span class="token punctuation">,</span> <span class="token string">\'wrapper\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>containerId<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        document<span class="token punctuation">.</span><span class="token function">findElementById</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`error found while loading image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> containerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n        img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>containerId<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>As you can see, it\'s possible to chain calls together, with <code class="language-text">.then</code>, and catch errors with <code class="language-text">.catch</code>. You can do as many operations as you wish, by resolving promises and having the resolved values as the first argument of the next function:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">users</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">{</span>\n    zavjs<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      id<span class="token punctuation">:</span> <span class="token string">"zavjs"</span><span class="token punctuation">,</span>\n      content<span class="token punctuation">:</span> <span class="token string">"This is my description description "</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    getUser<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> users<span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    editUser<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      users<span class="token punctuation">[</span>userName<span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> users<span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> users<span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//fetch api uses promises natively</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getUser</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.github.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">getUser</span><span class="token punctuation">(</span><span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token string">"zavjs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//json parse</span>\n    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//returning description</span>\n    <span class="token keyword">return</span> <span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">editUser</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">,</span> data<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>It\'s also possible to assign a Promise to a variable and use it progressively, as necessary, instead of chaining:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token function">promiseFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npromise<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">handleSomeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In essence, a Promise is an object that serves as temporary placeholder for a future evaluation, which is usually an asynchronous operation like an async request or a timer. Using the Promise object, you can layout the path the actual value will take for when it\'s ready to be executed, by registering callbacks to be ran when the operation succeeds or fails.</p>',frontmatter:{title:"Using JavaScript Promises",date:"December 29, 2017",path:"/using-javascript-promises",tags:["javascript","promises","ajax"],excerpt:"For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time."}}},pathContext:{prev:{html:'<p>Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions.</p>\n<p>This capacity opens a new world of possibilities, especially when it comes to composing functionality. Check this example in JavaScript:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">removeSpaces</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toSlug</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>\n    <span class="token function">toLowerCase</span><span class="token punctuation">(</span>\n      <span class="token function">removeSpaces</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>something<span class="token punctuation">,</span> <span class="token keyword">with</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token keyword">with</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">doSomething</span><span class="token punctuation">(</span>toSlug<span class="token punctuation">,</span> <span class="token string">\'CREATING a @@ $$ UNIFORM url-friendly ** # STRING\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//creating-a-%40%40-%24%24-uniform-url-friendly-**-%23-string</span></code></pre>\n      </div>\n<p>Creating reusable functionality in a similar fashion to the code above would be quite a considerable challenge in many other programming languages, but at the same time increase in functionality also means increase in complexity. We need to understand how these functions behave in all possible scenarios.</p>\n<p>There are a few different ways to invoke a function: as a function, as a method, and as a constructor. Today we\'ll be discussing that.</p>\n<h3>Functions as functions</h3>\n<p>Referring a function by saying it is invoked as a function might be too obvious, but it\'s not. That\'s because there are different ways to do so, which we\'ll be discussing later.</p>\n<p>To invoke a function as a function, we simply invoke the function as it is, with the execution operator <code class="language-text">()</code>. Again, it might sound obvious, but we\'ll see how that evolves:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//1.</span>\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Window, if in browser</span>\n\n<span class="token comment">//2.</span>\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Window, again</span></code></pre>\n      </div>\n<p>It\'s safe to say that when we invoke a function as a function its context is always the global object. Window in the case of the browser, or Global Object if we\'re talking about Node.js for example.</p>\n<p>Considering Window is an object, functions invoked as functions are actually invoked as methods, but for Window only. We decide not to treat it as a method invokation because of Window\'s implicit nature. It\'s always going to be the global object, so we might as well categorize it differently.</p>\n<p>Note that ES6\'s arrow functions behave differently, and this is a topic for other post.</p>\n<h3>Functions as methods</h3>\n<p>Methods in JavaScript are nothing more than object properties that refer to functions. See the following example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sound<span class="token punctuation">:</span> <span class="token string">"Meow"</span><span class="token punctuation">,</span>\n  getSound<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sound<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ncat<span class="token punctuation">.</span><span class="token function">getSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Meow</span></code></pre>\n      </div>\n<p>Since the <code class="language-text">getSound</code> method returns \'meow\', which is exactly the cat\'s object sound we might jump to conclude that <code class="language-text">this</code> always refers to the cat object, which is not true. See the next example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sound<span class="token punctuation">:</span> <span class="token string">"Woof"</span><span class="token punctuation">,</span>\n  getSound<span class="token punctuation">:</span> cat<span class="token punctuation">.</span>getSound\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ndog<span class="token punctuation">.</span><span class="token function">getSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Woof</span></code></pre>\n      </div>\n<p>The function itself is not in anyway bound to the initial object (cat). So much that we\'re able to "lend" it to a new one (dog). What happens is <code class="language-text">this</code> refers to the <strong>execution context</strong> whichever it is, more specifically, <strong>whoever use that method</strong>.</p>\n<p>If we created a Giraffe object we could lend it one more time, and it would have giraffe\'s value. We don\'t need to recreate this here, but remember that for functions invoked as methods what really matters it the execution context, not the definition one.</p>\n<p>This behavior might generate unexpected results. Sometimes we want to delegate functionality, but not hand over context. See pitoresque example below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>\n  names<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Anna"</span><span class="token punctuation">,</span> <span class="token string">"Allison"</span><span class="token punctuation">,</span> <span class="token string">"Brandon"</span><span class="token punctuation">,</span> <span class="token string">"Caroline"</span><span class="token punctuation">,</span> <span class="token string">"Isabel"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  getPeople<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//WARNING: Don\'t do this</span>\n<span class="token keyword">var</span> party <span class="token operator">=</span> <span class="token punctuation">{</span>\n  party<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  addToParty<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>party<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  getPeople<span class="token punctuation">:</span> people<span class="token punctuation">.</span>getPeople\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Remember this is a demonstrative example. You probably wouldn\'t, and if you would you probably shouldn\'t do as shown above. The idea is to add people names to the party object by concatenating it into the party array. Since people object already has a method that does so, the sloppy developer thought about reusing it this way.</p>\n<p>The thing is this is not going to work, because again what really counts is the execution context. <code class="language-text">party.getPeople</code> will try to find the property called <code class="language-text">names</code> inside the party object, and it won\'t find.</p>\n<p>The way to solve this is to circumveint the execution context and explicitly setting it with the <code class="language-text">bind</code> method, providing the context we want to assign as the first argument for the function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> party <span class="token operator">=</span> <span class="token punctuation">{</span>\n    party<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    addToParty<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/**/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    getPeople<span class="token punctuation">:</span> people<span class="token punctuation">.</span>getPeople<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">getPeople</code> when executed will now return <code class="language-text">people</code>\'s names and not <code class="language-text">party</code>\'s.</p>\n<p>Other ways to do it, would be with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code class="language-text">apply</code></a>, and <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code class="language-text">call</code></a>, which are just other ways to execute a function with an explicit context. The difference between these two methods are mainly their parameters. You can invoke call with a list of parameters while apply requires an actual array as the second parameter.</p>\n<h3>Functions as constructors</h3>\n<p>Invoking a function as a constructor refers to the mechanism of inheritance in JavaScript.</p>\n<p>The first difference is the fact that invoking a function as a constructor creates a new empty object, and this object is set as the instance\'s context. Whatever you do inside the function constructor referring <code class="language-text">this</code> will actually mean the instance object, and not the constructor. The context is bound to the new and recently created instance object.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Purr"</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Whenever we refer <code class="language-text">this</code>, the first place to be looked is the instance object. If nothing under that name is found there, JavaScript goes all the way up in the inheritance chain to see if any ancestors possess a property with that given name:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> <span class="token string">"Super Master Animal"</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getGrade</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//creating a prototypal inheritance chain</span>\nAnimal<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>As we can see, since no method <code class="language-text">getGrade</code> or no property <code class="language-text">grade</code> exists in the cat instance, JavaScript will look all the way up in the inheritance chain. It will look <code class="language-text">cat</code>, then <code class="language-text">Animal</code>, then <code class="language-text">SuperAnimal</code> until there\'s no more places to look.</p>\n<p>Inheritance is another very exciting complex topic to be discussed on a later opportunity, but the overall behavior is this.</p>\n<h3>Remember</h3>\n<p>When it comes to:</p>\n<ul>\n<li>Invoking functions as functions, the context will always be the global context</li>\n<li>Invoking functions as methods, the context will be assigned to the current object executing the method</li>\n<li>Invoking functions as constructors will create a new object and refer to it.</li>\n</ul>\n<p>Also:</p>\n<ul>\n<li>It\'s possible to explicitly set the method context by using <code class="language-text">bind</code>, <code class="language-text">call</code> or <code class="language-text">apply</code>.</li>\n</ul>',
id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-02-a-word-on-functions/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"Tu, 01/18",path:"/a-word-on-functions",title:"Function context in JavaScript",excerpt:"Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions.",tags:["javascript","functions"]}},next:{html:'<p>In this post we\'ll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to destructure the object, removing the keys and leaving values only.</p>\n<p>To achieve this, recursion. While traversing the object, we\'ll check if the object\'s property holds a simple value (like a number) or another object. We apply the function recursively until the returned value is a simple one.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  b<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>\n  c<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    d<span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>\n    e<span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>\n    f<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      g<span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>\n      h<span class="token punctuation">:</span> <span class="token string">"5"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  i<span class="token punctuation">:</span> <span class="token string">"6"</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">serialize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> <span class="token function">serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>If we test this function, we\'ll see it returns an array, and depending on the level of nesting, internal arrays as values. To make sure we always have a one-level array, our goal now is to flatten it.</p>\n<p>To do so, we\'ll use the example from a previous post <a href="/flattening-arbitrarily-nested-arrays">Flattening Arbitrarily Nested Arrays</a> to recursively flatten the array until the remaining value is not an array.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">:</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>There you go. The flatten function simply verifies if the <code class="language-text">curr</code> value is an array or not. If it is, it will flatten it again by checking if its items are also arrays or not. That will be done until only simple values are returned. When that happens, <code class="language-text">curr</code> will be appended to the original accumulator (identified by the <code class="language-text">acc</code> parameter).</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span></code></pre>\n      </div>\n<h3>Composition</h3>\n<p>The initial challenge is solved. Now, to make this look better, why not use functional compositional to achieve a clearer, more beautiful execution order?</p>\n<p>Composition is about putting together small simple functions to achieve a more complex functionality while still maintaing readability. Remember the DOT and KISS principles, respectively <strong>"DO ONE THING"</strong> and <strong>"KEEP IT SIMPLE, STUPID"</strong>.</p>\n<p>Instead of writing one function that does everything, we write multiple functions that are really good at doing one thing only, and compose them together like lego bricks, into higher functionality.</p>\n<p>To achieve this, we\'ll create a composer function that, from an initial value will apply multiple functions in order:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">composer</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">curr</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Then, we compose these two functions together and use the composer anytime we wish to do this same operation:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> objectFlattener <span class="token operator">=</span> <span class="token function">composer</span><span class="token punctuation">(</span>serialize<span class="token punctuation">,</span> flatten<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">objectFlattener</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span></code></pre>\n      </div>',id:"/Users/zavareze/projects/zavjsblog/src/pages/2017-12-22-flattening-arbitrarily-nested-object/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"Fr, 12/17",path:"/flatenning-arbitrarily-nested-object",title:"Flattening an Arbitrarily Nested Object",excerpt:"In this post, we'll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to deestructure the object, removing the keys and leaving values only; then, we should be able to transform the nested array into a single-level array.",tags:["javascript"]}}}}}});
//# sourceMappingURL=path---using-javascript-promises-ad32b832ce5014165317.js.map