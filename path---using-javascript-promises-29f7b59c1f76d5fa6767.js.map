{"version":3,"sources":["webpack:///path---using-javascript-promises-29f7b59c1f76d5fa6767.js","webpack:///./.cache/json/using-javascript-promises.json"],"names":["webpackJsonp","373","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,ohxBAA2lyBC,aAAmaC,MAAA,4BAAAC,KAAA,oBAAAC,KAAA,6BAAAC,MAAA,gCAAAC,QAAA,wOAA4XC,aAAgBC,MAAQR,KAAA;AAA0kOS,GAAA,8HAAAR,aAAsLE,KAAA,2BAAAC,KAAA,2BAAAF,MAAA,2BAAAI,QAAA,qSAAAD,MAAA,wBAAqbK,MAASV,KAAA;AAAy85CS,GAAA,yHAAAR,aAAi0BE,KAAA,2BAAAC,KAAA,oCAAAF,MAAA,kCAAAI,QAAA,gVAAAD,MAAA","file":"path---using-javascript-promises-29f7b59c1f76d5fa6767.js","sourcesContent":["webpackJsonp([60085421944301],{\n\n/***/ 373:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Handling JavaScript Promises</h2>\\n<p>For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time. </p>\\n<h3>XMLHttpRequest example</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> xhr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">XMLHttpRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'api.github.com/users'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'load'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'response is here'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The XMLHttpRequest way to do things involved callback functions. That is, pieces of code to be executed when the external process is finished and the response is back. </p>\\n<p>Soon enough - as code bases grew and environments such as Node.js appeared, it became more and more difficult to handle asynchronous requests in a desired order through a series of steps, handling any errors that might come up, and also keeping good readability. The <strong>callback hell</strong> emerged.</p>\\n<h3>Callback Hell</h3>\\n<p>As callbacks usage was increased and widely adopted to handle both synchronous and asynchronous operations, a peculiar symptom started to appear: the nesting of these callbacks in a very confusing fashion, leading to poor code readability.</p>\\n<h4>Sample Node.js file</h4>\\n<p>Checking if a file exists, reading its content and updating it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> myFile <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'my-file.js'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> message <span class=\\\"token operator\\\">=</span> process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">editFile</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> additionalContent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> content <span class=\\\"token operator\\\">+</span> additionalContent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exists</span><span class=\\\"token punctuation\\\">(</span>myFile<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>exists<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>exists<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n\\n            fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">editFile</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">//writing finished</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>The Promise Way</h3>\\n<p>Promises had a better proposal on how to structure and order asynchronous calls in a series of steps while maintaining readability and organization. Additionally with Promises when errors occurr it's possible to catch 'em on the spot, without need for checks in every step of the way.</p>\\n<p>To see how to implement a Promise in a very basic manner, first let's compare it with an old callback-nesting version of it. The scenario is simple, loading an image and handling cases of sucess and error for it:</p>\\n<h4>Old callback-nesting way</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'blossom.png'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'wrapper'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findElementById</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`error found while loading image: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> containerId<span class=\\\"token punctuation\\\">,</span> success<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n\\n    img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">success</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>With Promises, we need to wrap our operations (timers, requests, etc) on a new Promise instantiation and either Resolve or Reject with the response of these requests. The same example above, in Promises, would be:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'blossom.png'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'wrapper'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findElementById</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`error found while loading image: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> containerId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n\\n        img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>As you can see, it's possible to chain calls together, with <code class=\\\"language-text\\\">.then</code>, and catch errors with <code class=\\\"language-text\\\">.catch</code>. You can do as many operations as you wish, by resolving promises and having the resolved values as the first argument of the next function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">users</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> users <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">,</span>\\n            content<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'This is my description description '</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        getUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        editUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//fetch api uses promises natively</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getUser</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.github.com/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>userName<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">users</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//json parse</span>\\n        <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//returning description</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">users</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">editUser</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>username<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">.</span>description<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//...</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>It's also possible to assign a Promise to a variable and use it progressively, as necessary, instead of chaining:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">promiseFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\npromise\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\npromise\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">handleSomeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>In essence, a Promise is an object that serves as temporary placeholder for a future evaluation, which is usually an asynchronous operation like an async request or a timer. Using the Promise object, you can layout the path the actual value will take for when it's ready to be executed, by registering callbacks to be ran when the operation succeeds or fails.</p>\",\"frontmatter\":{\"title\":\"Using JavaScript Promises\",\"date\":\"December 29, 2017\",\"path\":\"/using-javascript-promises\",\"tags\":[\"javascript\",\"promises\",\"ajax\"],\"excerpt\":\"For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time.\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h2>Render Props with React</h2>\\n<p>A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to <strong>delegate rendering away from the component implementation itself</strong>, meaning it simply expose function parameters to child components, </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  onClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>We have a good logic encapsulated within MyComponent, but we have little flexibility in how to use that logic. The state will always render the same thing. What if we provide more flexibility by just exposing logic out of the component, <strong>without caring</strong> on how this is effectively rendering?</p>\\n<p>To do so, we take in a props called render that's a function and have arguments provided to it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  onClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">,</span>\\n    onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onClick\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This makes sure our parent component logic and the rendering is decoupled. The function implementation of this component is the one deciding how the passed in props will evaluate to JSX, so we can put a given functionality, like a counter for example, but instead of tiying it to a specific child component, we leave it open to any others. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">ConsumerComp</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">&lt;</span>MyComponent\\n    render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">,</span> onClick <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"consumer-comp\\\"</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span>\\n       <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onClick<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-28-render-props-with-react/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-02-28T03:11:45.165Z\",\"path\":\"/render-props-with-react\",\"title\":\"The Render Props Pattern\",\"excerpt\":\"A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to delegate rendering away from the component implementation itself, meaning it simply expose function parameters to child components...\",\"tags\":[\"react\",\"javascript\"]}},\"next\":{\"html\":\"<p>If you're familiar with toolkits that aim automating repetitive tasks, like compressing css, or ugliflying js files (like Gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy of one of these tools, that aim to replicate similar functionalities.</p>\\n<p>This post aims to demonstrate a few Node modules, and a few development patterns that would help us replicate similar functionalities as that of Gulp, for example. It's not intended for actual use or to be taken other than a learning resource.</p>\\n<h2>Use Case</h2>\\n<p>The way I like to address challenges/issues is by using real world use cases as guiding parameters. For that purpose, I randomly choose \\\"Droll\\\" to be my module's name, and there are a handful of things I wish Droll would do:</p>\\n<ul>\\n<li>Creating tasks that would allow users to encapsulate functionality and execute it when we they see fit</li>\\n<li>Watch for changes in directories or files as a way to execute functionality when it happens</li>\\n<li>Target and allocate files/file contents into a temporary place that would allow users to modify it, without changing the original copy</li>\\n<li>Enable users the ability to modify these temporary files by applying functions and composing functionality</li>\\n<li>The ability to create end files based on composed functionality of temporary data</li>\\n</ul>\\n<p>For example, let's assume a simple task that involves watching for changes on a given directory or file, applying changes to a temporary copy of that file, and creating a new file with the modified contents.</p>\\n<p>More specifically, a very common development task: having CSS files compressed into a new file. Let's assume two folders, one named <code class=\\\"language-text\\\">src</code>, and another named <code class=\\\"language-text\\\">dist</code>. <code class=\\\"language-text\\\">src</code> will contain the intact original css file whereas <code class=\\\"language-text\\\">dist</code> will hold the newly created minified version:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">project\\n|   droll.js (library)\\n│   drollfile.js (implementation)\\n│\\n└───src\\n│   │   styles.css\\n│   \\n└───dist\\n    │   styles.min.css</code></pre>\\n      </div>\\n<p>-</p>\\n<p>The following would be how I want things to work:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//drollfile.js</span>\\n<span class=\\\"token keyword\\\">const</span> droll <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'droll'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//create a droll task of name 'watch:css'</span>\\n<span class=\\\"token comment\\\">//assign the task a function to be executed whenever we decide to run it</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//watch for changes on a specific file </span>\\n  droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//get file contents</span>\\n    droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">//provide functions to modify the temporary data, composing if needed</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>doSomething<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>doSomethingElse<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">//create a final file with the modified content</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dist</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./dist/styles.min.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//arbitrarily deciding to run the task</span>\\n<span class=\\\"token comment\\\">//for now a javascript line, which later</span>\\n<span class=\\\"token comment\\\">//can be replaced for a command line like `droll watch:css`, for example</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>The Node.js File System Module</h2>\\n<p>The main star for tonight has to be Node's File System Module, as it contains all of the file managing functionalities we need to create Droll. </p>\\n<p>See, whenever we wish to read from a file (<code class=\\\"language-text\\\">./src/styles.css</code>, for example), we should use <code class=\\\"language-text\\\">fs.readFile</code>, or even <code class=\\\"language-text\\\">fs.readFileSync</code>. To write, we use <code class=\\\"language-text\\\">fs.writeFile</code>, or <code class=\\\"language-text\\\">fs.writeFileSync</code>. The difference between each of the items in both pairs is asynchronicity - that is, whether you want to block runtime while attempting to read the file or not.</p>\\n<p>Since we don't expect the user (or any other users for that matter) to be doing concurrent operations (like it would happen if we were to create a Node.js Web server, for example), we will <strong>explicitly</strong> and <strong>intentionally</strong> be using the synchronous versions of these methods. </p>\\n<p>Keep in mind however, that using synchronous methods is not recomended when you're expected to serve responsive applications in which the main thread is expected to be shared by multiple concurrent operations. You don't want user A to be blocked waiting for user's B long synchronous operation to finish executing.</p>\\n<p>See the module example below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//file contents</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mynewfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'my new file is aweseom'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//file written</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>Additionally, the FS module has another very important method called 'watch'. Watch will, ehrm, well... <em>watch</em> a given directory or filename and enable users the ability to execute functionality when that file is changed.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'rename', if file created or deleted </span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'change', if file changed</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>The Fluent Pattern</h2>\\n<p>Another key feature for our library is the ability to chain methods together for a more fluid architecture. This pattern is seen in many JavaScript libraries like jQuery, for example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// jQuery prefers this:</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.special-div'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//assign the color blue to special div</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'color'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//target special-div's immediate parent</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//hide it</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hide</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// instead of this:</span>\\n<span class=\\\"token keyword\\\">var</span> div <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.special-div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'color'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> parent <span class=\\\"token operator\\\">=</span> div<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nparent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hide</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>It's important to notice however that, when we execute any given object's method, that object doesn't return itself. It returns whatever the method should be returning:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  abc<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  def<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* not going to working, as it's going to try to execute the def method \\nfor the value 1 (which doesn't exist), instead of the object itself. */</span>\\nobj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">abc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">def</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> </code></pre>\\n      </div>\\n<p>-</p>\\n<p>The way to make Droll provide the ability to chain its methods is simple: we should return the Droll's context upon every method execution. </p>\\n<p>A little earlier we have already defined a few desired methods for our library, so let's sketch them here. Also, taking in consideration the aforementioned use case, note that the only methods chaining together are <code class=\\\"language-text\\\">src</code>, and <code class=\\\"language-text\\\">pipe</code>, so we'll go with that for now.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//node module, module.exports automatically exports the desired object</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//1. does something</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">//2. return itself</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//1. does something</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">//2. return itself</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Task</h3>\\n<p>In order for us to control when a specific functionality will be executed, we should hold that functionality encapsulated while naming it for later reference. We'll just create an internal property within Droll to associate a given task name to a given function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskname<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//this._tasks['watch:js']</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskname<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cb<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Execute</h3>\\n<p>We must specify a method to explicitly execute a given task when desired. It's simple, let's just receive a name, and go inside the internal <code class=\\\"language-text\\\">_tasks</code> property to execute the associated function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* collapsed */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>So, for example, we can specify when a task will be executed like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// this is just a simple registering</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mytask'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">anon</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'when executed, please log this'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// here is where the 'anon' function will be executed effectively </span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mytask'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Watch</h3>\\n<p>To watch for a specific file or directory, let's make our Droll's <code class=\\\"language-text\\\">watch</code> method receive a path to be watched as the first parameter, and also a callback function to be executed when changes happen, as a second parameter. Let's use Node's File System module to handle the dirty work:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>eventType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Source</h3>\\n<p>The source method is ideal for getting file contents. With it, we'll specify a file and get it's contents with <code class=\\\"language-text\\\">fs.readFileSync</code>. We'll create a property inside Droll to hold the file contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> </code></pre>\\n      </div>\\n<p>Since we're not specifying encoding, Node.js will create a Buffer object and assign it to the <code class=\\\"language-text\\\">_curVal</code> property.</p>\\n<h3>Pipe</h3>\\n<p>Pipe is a good way to compose functionality. Since we're trying to minify a css file, let's agree that <code class=\\\"language-text\\\">pipe</code> should accept a function, and execute that function over the temporary value allocated inside Droll's object. We'll mutate the previously created value to become something new:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Since <code class=\\\"language-text\\\">_curVal</code> is being stored as a Buffer object, our goal is to apply the function to a stringified version of that Buffer, and not the Buffer instance itself. After applying mutations, we'll transform it back to a Buffer object with <code class=\\\"language-text\\\">Buffer.from()</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Dist</h3>\\n<p>Dist will simply create a file with the previously set temporary values inside of it. The dist function will only receive one argument, the file name. The file content will be automatically inferred from Droll's property.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>Final Product</h2>\\n<p>The final product will look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//droll.js </span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cb<span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>eventType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>The intended functionality designed at the beginning should work properly, now.\\nFor educational purposes let's use an actual function inside the pipe method, that would simulate minifying a css file. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> droll <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./droll'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// use path module to specify the appropriate file location</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">toPath</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>filepath<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> filepath<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// simply remove spaces to simulate minifying</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">minify</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/\\\\s/g</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>minify<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dist</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./dist/styles.min.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The final minified css file will be created inside the destination folder. Be sure to test with an actual uncompressed css file and see it being converted into minified css.</p>\\n<h2>Improvements</h2>\\n<p>This toolkit can be improved in a variety of ways, for example:</p>\\n<ul>\\n<li>Targeting multiple files, instead of only one, by providing an array of files, instead of a string</li>\\n<li>Targeting files by extension, by providing wildcard values such as 'src/*<em>/</em>.js', in case we wish to target all js or css files inside a given folder</li>\\n</ul>\\n<p>Checkout the <a href=\\\"https://github.com/zavjs/drolljs\\\">github repository</a>. </p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-10-understanding-gulp/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-10T03:11:29.165Z\",\"path\":\"/understanding-automated-toolkits\",\"title\":\"Understading Automated Toolkits\",\"excerpt\":\"If you're familiar with toolkits that aim automating repetitive, painful or time consuming tasks, like compressing css, or ugliflying js files (like gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy that aim to replicate similar functionalities.\",\"tags\":[\"node.js\",\"javascript\",\"automation\",\"gulp\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---using-javascript-promises-29f7b59c1f76d5fa6767.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Handling JavaScript Promises</h2>\\n<p>For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time. </p>\\n<h3>XMLHttpRequest example</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> xhr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">XMLHttpRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'api.github.com/users'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'load'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'response is here'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nxhr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The XMLHttpRequest way to do things involved callback functions. That is, pieces of code to be executed when the external process is finished and the response is back. </p>\\n<p>Soon enough - as code bases grew and environments such as Node.js appeared, it became more and more difficult to handle asynchronous requests in a desired order through a series of steps, handling any errors that might come up, and also keeping good readability. The <strong>callback hell</strong> emerged.</p>\\n<h3>Callback Hell</h3>\\n<p>As callbacks usage was increased and widely adopted to handle both synchronous and asynchronous operations, a peculiar symptom started to appear: the nesting of these callbacks in a very confusing fashion, leading to poor code readability.</p>\\n<h4>Sample Node.js file</h4>\\n<p>Checking if a file exists, reading its content and updating it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> myFile <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'my-file.js'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> message <span class=\\\"token operator\\\">=</span> process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">editFile</span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">,</span> additionalContent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> content <span class=\\\"token operator\\\">+</span> additionalContent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exists</span><span class=\\\"token punctuation\\\">(</span>myFile<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>exists<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>exists<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n\\n            fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">editFile</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">//writing finished</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>The Promise Way</h3>\\n<p>Promises had a better proposal on how to structure and order asynchronous calls in a series of steps while maintaining readability and organization. Additionally with Promises when errors occurr it's possible to catch 'em on the spot, without need for checks in every step of the way.</p>\\n<p>To see how to implement a Promise in a very basic manner, first let's compare it with an old callback-nesting version of it. The scenario is simple, loading an image and handling cases of sucess and error for it:</p>\\n<h4>Old callback-nesting way</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'blossom.png'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'wrapper'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findElementById</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`error found while loading image: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> containerId<span class=\\\"token punctuation\\\">,</span> success<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n\\n    img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">success</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>With Promises, we need to wrap our operations (timers, requests, etc) on a new Promise instantiation and either Resolve or Reject with the response of these requests. The same example above, in Promises, would be:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'blossom.png'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'wrapper'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findElementById</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`error found while loading image: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> containerId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n\\n        img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>containerId<span class=\\\"token punctuation\\\">,</span> img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>As you can see, it's possible to chain calls together, with <code class=\\\"language-text\\\">.then</code>, and catch errors with <code class=\\\"language-text\\\">.catch</code>. You can do as many operations as you wish, by resolving promises and having the resolved values as the first argument of the next function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">users</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> users <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">,</span>\\n            content<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'This is my description description '</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        getUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        editUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> users<span class=\\\"token punctuation\\\">[</span>userName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//fetch api uses promises natively</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getUser</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>userName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.github.com/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>userName<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">users</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'zavjs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//json parse</span>\\n        <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//returning description</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">users</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">editUser</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>username<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">.</span>description<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//...</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>It's also possible to assign a Promise to a variable and use it progressively, as necessary, instead of chaining:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">promiseFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\npromise\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\npromise\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">handleSomeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>In essence, a Promise is an object that serves as temporary placeholder for a future evaluation, which is usually an asynchronous operation like an async request or a timer. Using the Promise object, you can layout the path the actual value will take for when it's ready to be executed, by registering callbacks to be ran when the operation succeeds or fails.</p>\",\"frontmatter\":{\"title\":\"Using JavaScript Promises\",\"date\":\"December 29, 2017\",\"path\":\"/using-javascript-promises\",\"tags\":[\"javascript\",\"promises\",\"ajax\"],\"excerpt\":\"For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time.\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h2>Render Props with React</h2>\\n<p>A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to <strong>delegate rendering away from the component implementation itself</strong>, meaning it simply expose function parameters to child components, </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  onClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>We have a good logic encapsulated within MyComponent, but we have little flexibility in how to use that logic. The state will always render the same thing. What if we provide more flexibility by just exposing logic out of the component, <strong>without caring</strong> on how this is effectively rendering?</p>\\n<p>To do so, we take in a props called render that's a function and have arguments provided to it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  onClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">:</span> counter <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    counter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>counter<span class=\\\"token punctuation\\\">,</span>\\n    onClick<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onClick\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This makes sure our parent component logic and the rendering is decoupled. The function implementation of this component is the one deciding how the passed in props will evaluate to JSX, so we can put a given functionality, like a counter for example, but instead of tiying it to a specific child component, we leave it open to any others. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">ConsumerComp</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">&lt;</span>MyComponent\\n    render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> counter<span class=\\\"token punctuation\\\">,</span> onClick <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"consumer-comp\\\"</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>counter<span class=\\\"token punctuation\\\">}</span>\\n       <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onClick<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-28-render-props-with-react/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-02-28T03:11:45.165Z\",\"path\":\"/render-props-with-react\",\"title\":\"The Render Props Pattern\",\"excerpt\":\"A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to delegate rendering away from the component implementation itself, meaning it simply expose function parameters to child components...\",\"tags\":[\"react\",\"javascript\"]}},\"next\":{\"html\":\"<p>If you're familiar with toolkits that aim automating repetitive tasks, like compressing css, or ugliflying js files (like Gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy of one of these tools, that aim to replicate similar functionalities.</p>\\n<p>This post aims to demonstrate a few Node modules, and a few development patterns that would help us replicate similar functionalities as that of Gulp, for example. It's not intended for actual use or to be taken other than a learning resource.</p>\\n<h2>Use Case</h2>\\n<p>The way I like to address challenges/issues is by using real world use cases as guiding parameters. For that purpose, I randomly choose \\\"Droll\\\" to be my module's name, and there are a handful of things I wish Droll would do:</p>\\n<ul>\\n<li>Creating tasks that would allow users to encapsulate functionality and execute it when we they see fit</li>\\n<li>Watch for changes in directories or files as a way to execute functionality when it happens</li>\\n<li>Target and allocate files/file contents into a temporary place that would allow users to modify it, without changing the original copy</li>\\n<li>Enable users the ability to modify these temporary files by applying functions and composing functionality</li>\\n<li>The ability to create end files based on composed functionality of temporary data</li>\\n</ul>\\n<p>For example, let's assume a simple task that involves watching for changes on a given directory or file, applying changes to a temporary copy of that file, and creating a new file with the modified contents.</p>\\n<p>More specifically, a very common development task: having CSS files compressed into a new file. Let's assume two folders, one named <code class=\\\"language-text\\\">src</code>, and another named <code class=\\\"language-text\\\">dist</code>. <code class=\\\"language-text\\\">src</code> will contain the intact original css file whereas <code class=\\\"language-text\\\">dist</code> will hold the newly created minified version:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">project\\n|   droll.js (library)\\n│   drollfile.js (implementation)\\n│\\n└───src\\n│   │   styles.css\\n│   \\n└───dist\\n    │   styles.min.css</code></pre>\\n      </div>\\n<p>-</p>\\n<p>The following would be how I want things to work:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//drollfile.js</span>\\n<span class=\\\"token keyword\\\">const</span> droll <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'droll'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//create a droll task of name 'watch:css'</span>\\n<span class=\\\"token comment\\\">//assign the task a function to be executed whenever we decide to run it</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//watch for changes on a specific file </span>\\n  droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//get file contents</span>\\n    droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">//provide functions to modify the temporary data, composing if needed</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>doSomething<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>doSomethingElse<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">//create a final file with the modified content</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dist</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./dist/styles.min.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//arbitrarily deciding to run the task</span>\\n<span class=\\\"token comment\\\">//for now a javascript line, which later</span>\\n<span class=\\\"token comment\\\">//can be replaced for a command line like `droll watch:css`, for example</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>The Node.js File System Module</h2>\\n<p>The main star for tonight has to be Node's File System Module, as it contains all of the file managing functionalities we need to create Droll. </p>\\n<p>See, whenever we wish to read from a file (<code class=\\\"language-text\\\">./src/styles.css</code>, for example), we should use <code class=\\\"language-text\\\">fs.readFile</code>, or even <code class=\\\"language-text\\\">fs.readFileSync</code>. To write, we use <code class=\\\"language-text\\\">fs.writeFile</code>, or <code class=\\\"language-text\\\">fs.writeFileSync</code>. The difference between each of the items in both pairs is asynchronicity - that is, whether you want to block runtime while attempting to read the file or not.</p>\\n<p>Since we don't expect the user (or any other users for that matter) to be doing concurrent operations (like it would happen if we were to create a Node.js Web server, for example), we will <strong>explicitly</strong> and <strong>intentionally</strong> be using the synchronous versions of these methods. </p>\\n<p>Keep in mind however, that using synchronous methods is not recomended when you're expected to serve responsive applications in which the main thread is expected to be shared by multiple concurrent operations. You don't want user A to be blocked waiting for user's B long synchronous operation to finish executing.</p>\\n<p>See the module example below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//file contents</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mynewfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'my new file is aweseom'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//file written</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>Additionally, the FS module has another very important method called 'watch'. Watch will, ehrm, well... <em>watch</em> a given directory or filename and enable users the ability to execute functionality when that file is changed.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myfile.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'rename', if file created or deleted </span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'change', if file changed</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>The Fluent Pattern</h2>\\n<p>Another key feature for our library is the ability to chain methods together for a more fluid architecture. This pattern is seen in many JavaScript libraries like jQuery, for example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// jQuery prefers this:</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.special-div'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//assign the color blue to special div</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'color'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//target special-div's immediate parent</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//hide it</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hide</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// instead of this:</span>\\n<span class=\\\"token keyword\\\">var</span> div <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.special-div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'color'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> parent <span class=\\\"token operator\\\">=</span> div<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nparent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hide</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>It's important to notice however that, when we execute any given object's method, that object doesn't return itself. It returns whatever the method should be returning:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  abc<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  def<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* not going to working, as it's going to try to execute the def method \\nfor the value 1 (which doesn't exist), instead of the object itself. */</span>\\nobj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">abc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">def</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> </code></pre>\\n      </div>\\n<p>-</p>\\n<p>The way to make Droll provide the ability to chain its methods is simple: we should return the Droll's context upon every method execution. </p>\\n<p>A little earlier we have already defined a few desired methods for our library, so let's sketch them here. Also, taking in consideration the aforementioned use case, note that the only methods chaining together are <code class=\\\"language-text\\\">src</code>, and <code class=\\\"language-text\\\">pipe</code>, so we'll go with that for now.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//node module, module.exports automatically exports the desired object</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//1. does something</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">//2. return itself</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//1. does something</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">//2. return itself</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Task</h3>\\n<p>In order for us to control when a specific functionality will be executed, we should hold that functionality encapsulated while naming it for later reference. We'll just create an internal property within Droll to associate a given task name to a given function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskname<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//this._tasks['watch:js']</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskname<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cb<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Execute</h3>\\n<p>We must specify a method to explicitly execute a given task when desired. It's simple, let's just receive a name, and go inside the internal <code class=\\\"language-text\\\">_tasks</code> property to execute the associated function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* collapsed */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>So, for example, we can specify when a task will be executed like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// this is just a simple registering</span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mytask'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">anon</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'when executed, please log this'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// here is where the 'anon' function will be executed effectively </span>\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mytask'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Watch</h3>\\n<p>To watch for a specific file or directory, let's make our Droll's <code class=\\\"language-text\\\">watch</code> method receive a path to be watched as the first parameter, and also a callback function to be executed when changes happen, as a second parameter. Let's use Node's File System module to handle the dirty work:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>eventType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Source</h3>\\n<p>The source method is ideal for getting file contents. With it, we'll specify a file and get it's contents with <code class=\\\"language-text\\\">fs.readFileSync</code>. We'll create a property inside Droll to hold the file contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> </code></pre>\\n      </div>\\n<p>Since we're not specifying encoding, Node.js will create a Buffer object and assign it to the <code class=\\\"language-text\\\">_curVal</code> property.</p>\\n<h3>Pipe</h3>\\n<p>Pipe is a good way to compose functionality. Since we're trying to minify a css file, let's agree that <code class=\\\"language-text\\\">pipe</code> should accept a function, and execute that function over the temporary value allocated inside Droll's object. We'll mutate the previously created value to become something new:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/**/</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Since <code class=\\\"language-text\\\">_curVal</code> is being stored as a Buffer object, our goal is to apply the function to a stringified version of that Buffer, and not the Buffer instance itself. After applying mutations, we'll transform it back to a Buffer object with <code class=\\\"language-text\\\">Buffer.from()</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h3>Dist</h3>\\n<p>Dist will simply create a file with the previously set temporary values inside of it. The dist function will only receive one argument, the file name. The file content will be automatically inferred from Droll's property.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>-</p>\\n<h2>Final Product</h2>\\n<p>The final product will look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//droll.js </span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  _tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  _curVal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  src<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  dist<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  task<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cb<span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  execute<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>taskName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_tasks<span class=\\\"token punctuation\\\">[</span>taskName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pipe<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_curVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>eventType<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>eventType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>-</p>\\n<p>The intended functionality designed at the beginning should work properly, now.\\nFor educational purposes let's use an actual function inside the pipe method, that would simulate minifying a css file. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> droll <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./droll'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// use path module to specify the appropriate file location</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">toPath</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>filepath<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> filepath<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// simply remove spaces to simulate minifying</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">minify</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/\\\\s/g</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ndroll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'watch:css'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    droll<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/styles.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>minify<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dist</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./dist/styles.min.css'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The final minified css file will be created inside the destination folder. Be sure to test with an actual uncompressed css file and see it being converted into minified css.</p>\\n<h2>Improvements</h2>\\n<p>This toolkit can be improved in a variety of ways, for example:</p>\\n<ul>\\n<li>Targeting multiple files, instead of only one, by providing an array of files, instead of a string</li>\\n<li>Targeting files by extension, by providing wildcard values such as 'src/*<em>/</em>.js', in case we wish to target all js or css files inside a given folder</li>\\n</ul>\\n<p>Checkout the <a href=\\\"https://github.com/zavjs/drolljs\\\">github repository</a>. </p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-10-understanding-gulp/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-10T03:11:29.165Z\",\"path\":\"/understanding-automated-toolkits\",\"title\":\"Understading Automated Toolkits\",\"excerpt\":\"If you're familiar with toolkits that aim automating repetitive, painful or time consuming tasks, like compressing css, or ugliflying js files (like gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy that aim to replicate similar functionalities.\",\"tags\":[\"node.js\",\"javascript\",\"automation\",\"gulp\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/using-javascript-promises.json\n// module id = 373\n// module chunks = 60085421944301"],"sourceRoot":""}