{"version":3,"sources":["webpack:///path---tags-es-6-daf6f29714df1d5aeb17.js","webpack:///./.cache/json/tags-es-6.json"],"names":["webpackJsonp","381","module","exports","pathContext","posts","html","id","frontmatter","date","path","title","excerpt","tags","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,KAAA,inHAA4/GC,GAAA,sHAAAC,aAA+YC,KAAA,YAAAC,KAAA,uBAAAC,MAAA,sBAAAC,QAAA,GAAAC,MAAA,uBAAyHC,QAAA","file":"path---tags-es-6-daf6f29714df1d5aeb17.js","sourcesContent":["webpackJsonp([20342444442079],{\n\n/***/ 381:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<p><a href=\\\"/a-word-on-functions\\\">This post</a> showed the different ways a function can be executed and the context implications of each. The keyword <code class=\\\"language-text\\\">this</code> is source of a lot of confusion, even for seasoned developers. The arrow function showed up as a way to make our lives easier and is one of the most appreciated ES6 features.</p>\\n<p>Shorter syntax:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sum2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// arrow counterpart</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sum2</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=></span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Notice we got rid of a few things: the function identifier, the return statement and in this particular case even the curly braces. Think of nested callbacks or even promises: no need for multiple repetitive function and return statements.</p>\\n<p>Consistency in context with <code class=\\\"language-text\\\">this</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Animal<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">attack</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"animal-key\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`/animals/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> key <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">this.id</code> will always be set to the caller's context (in this case the attack prototype function) and the arrow function cannot be coerced to treat it any differently (apply, bind).</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2019-02-03-arrow-functions/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Su, 02/19\",\"path\":\"/arrow-functions-es6\",\"title\":\"ES6 Arrow Functions\",\"excerpt\":\"\",\"tags\":[\"javascript\",\"es6\"]}}],\"tagName\":\"es6\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-es-6-daf6f29714df1d5aeb17.js","module.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<p><a href=\\\"/a-word-on-functions\\\">This post</a> showed the different ways a function can be executed and the context implications of each. The keyword <code class=\\\"language-text\\\">this</code> is source of a lot of confusion, even for seasoned developers. The arrow function showed up as a way to make our lives easier and is one of the most appreciated ES6 features.</p>\\n<p>Shorter syntax:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sum2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// arrow counterpart</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sum2</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=></span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Notice we got rid of a few things: the function identifier, the return statement and in this particular case even the curly braces. Think of nested callbacks or even promises: no need for multiple repetitive function and return statements.</p>\\n<p>Consistency in context with <code class=\\\"language-text\\\">this</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Animal<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">attack</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"animal-key\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`/animals/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> key <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">this.id</code> will always be set to the caller's context (in this case the attack prototype function) and the arrow function cannot be coerced to treat it any differently (apply, bind).</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2019-02-03-arrow-functions/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Su, 02/19\",\"path\":\"/arrow-functions-es6\",\"title\":\"ES6 Arrow Functions\",\"excerpt\":\"\",\"tags\":[\"javascript\",\"es6\"]}}],\"tagName\":\"es6\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-es-6.json\n// module id = 381\n// module chunks = 20342444442079"],"sourceRoot":""}