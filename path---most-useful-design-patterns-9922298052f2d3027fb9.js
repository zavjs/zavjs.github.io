webpackJsonp([0x974203ae6c91],{357:function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Most Useful Design Patterns in JS</h1>\n<h3>What are design patterns?</h3>\n<p>Design patterns are proven reusable solutions to a recurrent problem. To be considered a pattern, the solution must not be obvious. Most of the times, patterns describe a relationship between structures.</p>\n<p>One major benefit of design patterns is the creation of jargons for common vocabulary. Instead of explaining complex structures we just say "why not do a module here, my good sir?". So, tighten your seatbealts and let\'s delve into some of my favorite.</p>\n<blockquote>\n<p>Fun fact: did you know the concept of Design Patterns is original from construction? Coined by Christopher Alexander in his book "A Pattern Language", he wrote it to outline common patterns or solutions he came across when building stuff out in the physical world. </p>\n</blockquote>\n<blockquote>\n<p>For example, the Cloverleaf interchanges are a common proven solution to help drivers transition between highways without the need of turns or even traffic lights.</p>\n</blockquote>\n<h3>Design Patterns in JavaScript</h3>\n<p>The first pattern is categorized under the creational type of patterns. A module is simply a containarized toolbox of related functionalities that is commonly created as a list of methods within an object literal:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> SongBox <span class="token operator">=</span> <span class="token punctuation">{</span>\n  songs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  singSong<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>song<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// check if the song already exist in the list</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>songs<span class="token punctuation">[</span>song<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// adds if it doesn\'t</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>songs <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>songs<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">:</span> song<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'\\u266a\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>songs<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  getSongById<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>songs<span class="token punctuation">[</span>id<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2>The Module Pattern</h2>\n<p><strong>The Module Pattern</strong> became more recurrent with modern browser JavaScript in the moment which it started being possible to create files as modules in the browsers, and have them imported by other files. The popularization of this approach is due to tools like Browserify, Webpack, and others.</p>\n<p>We can even make a module to be a function so it accepts arguments, and does calculations, or delays execution before returning the methods. Another common use for modules as functions is to create private vaiables.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// accepting arguments that will enhance functionality</span>\n<span class="token keyword">var</span> <span class="token function-variable function">SongBox</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// songs is a private variable and cannot be retrieved from outside </span>\n  <span class="token comment">// SongBox.songs doesn\'t exist outside</span>\n  <span class="token keyword">var</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">addSong</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>song<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    songs <span class="token operator">=</span> songs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">getSongs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> limit \n      <span class="token operator">?</span> songs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> songs\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    addSong<span class="token punctuation">,</span>\n    getSongs\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> </code></pre>\n      </div>\n<p>What do you think is the benefit for creating modules? My take is that it becomes much better to reason, discern and organize our code if we manage to logically separate all differing structures of our software apart. Each component is very well delimited and we know exactly when one ends and another begins.</p>\n<p>Additionally, if we are able to separate our components we get to be able to test them separately as well. And isn\'t that much better when we need to work on new functionality, or to alter existing ones? Isn\'t separation of concerns a much more efficient tactic when we need to find a pesky bug in the code? I know for a fact it is, because if there\'s a clearer distinction of <em>what\'s what</em>, specific tests will fail, and specific functions will accuse the error more prominently.</p>\n<p>Software developers already know the importance of decomposing big problems in multiple small specialized functions that solve small units (the divide and conquer tactic). With the module pattern, we can take this to another level to group similar functionality.</p>\n<h2>The Facade Pattern</h2>\n<p>Simplicity. Simplicity is key to software development. Not because of machines, but because of those that operate the machines - we, humans. The Facade Pattern is aimed to enhance software construction by providing a simplified interface to a complicated sub-system.</p>\n<p>Like most web developers, my early days of hacking in the web started with jQuery. Oh, and how powerful I felt using jQuery. A few lines of code and BAM! I\'m making an element slide into view, almost like a Ninja. Another line and SHAZAM! this div is fading out from view.</p>\n<p>This apparent simplicity of the few <code class="language-text">$(el).slideDown()</code> and <code class="language-text">$(el).fadeOut()</code> methods hide quite a lot of complexity. For starters, the actual animation within those functions usually took way more than a couple of lines. Then, there\'s the problem of browser compatibility. How are you making sure that everythin you do in JavaScript is compatible with the latest Chrome browser, and IE8 altogether?</p>\n<p>Something as simple as creating an event listener had different syntaxes in different browsers:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// webkit:</span>\ndiv<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'clicked!\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\ndiv<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ie 8/opera</span>\ndiv<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">\'onclick\'</span><span class="token punctuation">,</span> div<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\ndiv<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">\'onclick\'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Now imagine something a little more complicated, like JS animations. So when it comes to actually supporting all browsers, developers would have to be mindful of quite a few different possibilities for compatibility. jQuery took that away,by taking care of common complexities found in web development, so that the final developer doesn\'t have to.</p>\n<p><code class="language-text">$(el).css()</code>, <code class="language-text">$(el).animate()</code> are just a few other examples on why a beginner would feel so competend writing JavaScript.</p>\n<h3>Creating a Facade ourselves</h3>\n<p>A Facade is just a simplified interface for a complex sub-system. Just as the seemingly nice neighbour who smiles and greets, but deep inside despise and envy you.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Immediately-invoked function expression for</span>\n<span class="token comment">// separate scope</span>\n<span class="token keyword">var</span> myBankingModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> _private <span class="token operator">=</span> <span class="token punctuation">{</span>\n    deposit<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>cash<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>cash <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cash <span class="token operator">+</span> cash<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> \n    transfer<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>amount<span class="token punctuation">,</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'transfering\'</span> <span class="token operator">+</span> <span class="token string">\'$\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">\' to: \'</span> <span class="token operator">+</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    getBalance<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cash<span class="token punctuation">,</span> <span class="token string">\'is how much you have now\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    depositTransferAndLog<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _private<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>depositAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      _private<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>transferAmount<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>transferDestinationId<span class="token punctuation">)</span>\n      _private<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> account <span class="token operator">=</span> <span class="token function">myBankingModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\naccount<span class="token punctuation">.</span><span class="token function">depositTransferAndLog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  depositAmount<span class="token punctuation">:</span> <span class="token number">1500</span><span class="token punctuation">,</span>\n  transferAmount<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n  transferDestinationId<span class="token punctuation">:</span> <span class="token string">\'af043748399930948d9\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Notice that when calling <code class="language-text">.depositTransferAndLog()</code> we are triggering a set of private behavior within the module, that the consuming part doesn\'t even have to be aware of. We made it much easier to consume a feature without needing to worry about implementation-level details. Think of all APIs you have consumed. They usually expose a few methods that are very intuitive and simple to use while the hardwork is done at the server level.</p>\n<h2>Conclusion</h2>\n<p>Design patterns are proven solutions to recurrent software problems. They can\'t be obvious. It commonly guide how we create, structure and extend functionality.</p>\n<p><strong>The Module Pattern</strong>: the grouping of similar functions together. Separation of concerns, enhanced testability and debuggability. </p>\n<p><strong>The Facade Pattern</strong>: the simplification of a complex sub-system. Creating abstractions that hide potential complexities or obscurities from the original code. </p>',frontmatter:{title:"Most Useful Design Patterns in JS",date:"February 28, 2018",path:"/most-useful-design-patterns",tags:["javascript"],excerpt:"Design patterns are proven solutions to a recurrent problem. Most of the times they describe a relationship between more than one structures"}}},pathContext:{prev:{html:'<h2>Immutability</h2>\n<p>Redux focus on the importance of immutability by enforcing pure functions as reducers as a way to generate new state, in opposition of patching old one with new data ([1, 2, 3].concat(4) vs [1, 2, 3].push(4)). However, little is discussed on why that is important, and the answer to this lies in one of React\'s lifecycle methods called <code class="language-text">shouldComponentUpdate</code>.</p>\n<h3>shouldComponentUpdate</h3>\n<p>This method is part of the Update phase, and is one of the first hooks to be triggered. Natively in React, every time a component enters the Update phase, shouldComponent update returns true. However, it is available to developers as a way to further enhance component performance, and that is because React does shallow comparison between old and new props and state.</p>\n<p>To evaluate equality, shallow comparison will do a few different things:</p>\n<ul>\n<li>Compare object signature (objA === objB), that is, if they both reference the same place in memory</li>\n<li>Check if the amount of <strong>first level</strong> properties are the same (Object.keys(objA).length === Object.keys(objB).length)</li>\n<li>Check if both object keys are the same in name and value</li>\n</ul>\n<p>Excerpt from React\'s PureRenderMixin:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shallowEqual</span><span class="token punctuation">(</span>objA<span class="token punctuation">:</span> mixed<span class="token punctuation">,</span> objB<span class="token punctuation">:</span> mixed<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>objA <span class="token operator">===</span> objB<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> objA <span class="token operator">!==</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> objA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>\n      <span class="token keyword">typeof</span> objB <span class="token operator">!==</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> objB <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> keysA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> keysB <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>keysA<span class="token punctuation">.</span>length <span class="token operator">!==</span> keysB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> bHasOwnProperty <span class="token operator">=</span> hasOwnProperty<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keysA<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">bHasOwnProperty</span><span class="token punctuation">(</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> objA<span class="token punctuation">[</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> objB<span class="token punctuation">[</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">shallowCompare</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span> <span class="token operator">||</span>\n    <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>state<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>One important thing to notice, and that you might have let pass is that Object.keys(obj) only return the first level object properties, which means:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> \n    c<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    d<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      a<span class="token punctuation">:</span> <span class="token number">3</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["a"]</span></code></pre>\n      </div>\n<p>All of the other nested objects are left behind, which means that if our object\'s signature is the same, and the first level scalar value properties (strings, numbers) are equal then the object is deemed to be the same, and React doesn\'t trigger an update. Since we provided a mutated value, our code is not considered pure.</p>\n<p>If in React we had the ability to manually push a value into an array inside state, and that value was passed down to a child component, the child component wouldn\'t update to reflect the new object. That\'s why it\'s only possible to re-render by changing state with setState.</p>\n<h3>Deep Equals</h3>\n<p>I thought about how I would create a deep equals functionality as a way to compare all object values, including nested objects between a given objA and a given objB. The requirements where as follows:</p>\n<ul>\n<li>Make sure the same props that exist in objA, also exist in objB</li>\n<li>Make sure their values are equal</li>\n</ul>\n<p>So the first thing I would do is iterating over the first level properties for objA, and do something if these properties are objects themselves, and something else if not:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n      <span class="token punctuation">:</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>I figured that if these objects are objects themselves, I probably want to keep looking further until it\'s not anymore;</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> \n      <span class="token punctuation">:</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>And also, if it\'s finally not an object, then we\'ll simply check if the given property exists in objB and compare the two:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> b <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Now, with an array of booleans we reduce them to the final value:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> b <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>Tests</h3>\n<p>I\'m using <a href="https://github.com/mjackson">mjackson\'s expectjs library</a> to assert.</p>\n<p>One: I expect objects with the same property names and values, including nested objects, to be considered equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Two: I expect objects with different property names and/or values, including nested objects, to be considered not equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">//different values, same keys</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Cat\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//diferent keys, same values</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> d<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//different keys, different values</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'C\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'D\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Three: I expect objects with different number of properties, including nested objects properties, even if everything else is the same, to be considered not equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">//more keys in objA</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//more keys in objB</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>',
id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-15-my-attempt-of-deep-equals/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-02-15T03:11:45.165Z",path:"/my-attempt-of-deep-equals",title:"Attempting Deep Equals",excerpt:"One of the keys for React and Redux development is state immutability. Today, we'll discuss more specifically why, and build a function to compare deep equality betweeen two objects...",tags:["react","javascript"]}},next:null}}}});
//# sourceMappingURL=path---most-useful-design-patterns-9922298052f2d3027fb9.js.map