webpackJsonp([86365296742699],{"./node_modules/json-loader/index.js!./.cache/json/my-attempt-of-deep-equals.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>Immutability</h2>\n<p>Redux focus on the importance of immutability by enforcing pure functions as reducers as a way to generate new state, in opposition of patching old one with new data ([1, 2, 3].concat(4) vs [1, 2, 3].push(4)). However, little is discussed on why that is important, and the answer to this lies in one of React\'s lifecycle methods called <code>shouldComponentUpdate</code>.</p>\n<h3>shouldComponentUpdate</h3>\n<p>This method is part of the Update phase, and is one of the first hooks to be triggered. Natively in React, every time a component enters the Update phase, shouldComponent update returns true. However, it is available to developers as a way to further enhance component performance, and that is because React does shallow comparison between old and new props and state.</p>\n<p>To evaluate equality, shallow comparison will do a few different things:</p>\n<ul>\n<li>Compare object signature (objA === objB), that is, if they both reference the same place in memory</li>\n<li>Check if the amount of <strong>first level</strong> properties are the same (Object.keys(objA).length === Object.keys(objB).length)</li>\n<li>Check if both object keys are the same in name and value</li>\n</ul>\n<p>Excerpt from React\'s PureRenderMixin:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">shallowEqual</span><span class="token punctuation">(</span>objA<span class="token punctuation">:</span> mixed<span class="token punctuation">,</span> objB<span class="token punctuation">:</span> mixed<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>objA <span class="token operator">===</span> objB<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> objA <span class="token operator">!==</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> objA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>\n      <span class="token keyword">typeof</span> objB <span class="token operator">!==</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> objB <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> keysA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> keysB <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>keysA<span class="token punctuation">.</span>length <span class="token operator">!==</span> keysB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> bHasOwnProperty <span class="token operator">=</span> hasOwnProperty<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keysA<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">bHasOwnProperty</span><span class="token punctuation">(</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> objA<span class="token punctuation">[</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> objB<span class="token punctuation">[</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">shallowCompare</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span> <span class="token operator">||</span>\n    <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>state<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>One important thing to notice, and that you might have let pass is that Object.keys(obj) only return the first level object properties, which means:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> \n    c<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    d<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      a<span class="token punctuation">:</span> <span class="token number">3</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["a"]</span>\n</code></pre>\n      </div>\n<p>All of the other nested objects are left behind, which means that if our object\'s signature is the same, and the first level scalar value properties (strings, numbers) are equal then the object is deemed to be the same, and React doesn\'t trigger an update. Since we provided a mutated value, our code is not considered pure.</p>\n<p>If in React we had the ability to manually push a value into an array inside state, and that value was passed down to a child component, the child component wouldn\'t update to reflect the new object. That\'s why it\'s only possible to re-render by changing state with setState.</p>\n<h3>Deep Equals</h3>\n<p>I thought about how I would create a deep equals functionality as a way to compare all object values, including nested objects between a given objA and a given objB. The requirements where as follows:</p>\n<ul>\n<li>Make sure the same props that exist in objA, also exist in objB</li>\n<li>Make sure their values are equal</li>\n</ul>\n<p>So the first thing I would do is iterating over the first level properties for objA, and do something if these properties are objects themselves, and something else if not:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n      <span class="token punctuation">:</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>I figured that if these objects are objects themselves, I probably want to keep looking further until it\'s not anymore;</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> \n      <span class="token punctuation">:</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>And also, if it\'s finally not an object, then we\'ll simply check if the given property exists in objB and compare the two:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> b <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Now, with an array of booleans we reduce them to the final value:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> b <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Tests</h3>\n<p>I\'m using <a href="https://github.com/mjackson">mjackson\'s expectjs library</a> to assert.</p>\n<p>One: I expect objects with the same property names and values, including nested objects, to be considered equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Two: I expect objects with different property names and/or values, including nested objects, to be considered not equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">//different values, same keys</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Cat\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//diferent keys, same values</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> d<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//different keys, different values</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'C\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'D\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Three: I expect objects with different number of properties, including nested objects properties, even if everything else is the same, to be considered not equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">//more keys in objA</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//more keys in objB</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',frontmatter:{title:"Attempting Deep Equals",date:"February 15, 2018",path:"/my-attempt-of-deep-equals",tags:["react","javascript"],excerpt:"One of the keys for React and Redux development is state immutability. Today, we'll discuss more specifically why, and build a function to compare deep equality betweeen two objects..."}}},pathContext:{prev:{html:'<h2>A Word on Functions</h2>\n<p>Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions. </p>\n<p>This capacity opens a new world of possibilities, especially when it comes to composing functionality. Check this example in JavaScript:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">removeSpaces</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toSlug</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>\n    <span class="token function">toLowerCase</span><span class="token punctuation">(</span>\n      <span class="token function">removeSpaces</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>something<span class="token punctuation">,</span> <span class="token keyword">with</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token keyword">with</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">doSomething</span><span class="token punctuation">(</span>toSlug<span class="token punctuation">,</span> <span class="token string">\'CREATING a @@ $$ UNIFORM url-friendly ** # STRING\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">//creating-a-%40%40-%24%24-uniform-url-friendly-**-%23-string</span>\n</code></pre>\n      </div>\n<p>Creating reusable functionality in a similar fashion to the code above would be quite a considerable challenge in many other programming languages, but at the same time increase in functionality also means increase in complexity. We need to understand how these functions behave in all possible scenarios.</p>\n<p>There are a few different ways to invoke a function: as a function, as a method, and as a constructor. Today we\'ll be discussing that.</p>\n<h3>Functions as functions</h3>\n<p>Referring a function by saying it is invoked as a function might be too obvious, but it\'s not. That\'s because there are different ways to do so, which we\'ll be discussing later.</p>\n<p>To invoke a function as a function, we simply invoke the function as it is, with the execution operator <code>()</code>. Again, it might sound obvious, but we\'ll see how that evolves:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//1.</span>\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Window, if in browser</span>\n\n<span class="token comment">//2.</span>\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Window, again</span>\n</code></pre>\n      </div>\n<p>It\'s safe to say that when we invoke a function as a function its context is always the global object. Window in the case of the browser, or Global Object if we\'re talking about Node.js for example. </p>\n<p>Considering Window is an object, functions invoked as functions are actually invoked as methods, but for Window only. We decide not to treat it as a method invokation because of Window\'s implicit nature. It\'s always going to be the global object, so we might as well categorize it differently.</p>\n<p>Note that ES6\'s arrow functions behave differently, and this is a topic for other post.</p>\n<h3>Functions as methods</h3>\n<p>Methods in JavaScript are nothing more than object properties that refer to functions. See the following example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sound<span class="token punctuation">:</span> <span class="token string">\'Meow\'</span><span class="token punctuation">,</span>\n  getSound<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sound<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ncat<span class="token punctuation">.</span><span class="token function">getSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Meow</span>\n</code></pre>\n      </div>\n<p>Since the <code>getSound</code> method returns \'meow\', which is exactly the cat\'s object sound we might jump to conclude that <code>this</code> always refers to the cat object, which is not true. See the next example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sound<span class="token punctuation">:</span> <span class="token string">\'Woof\'</span><span class="token punctuation">,</span>\n  getSound<span class="token punctuation">:</span> cat<span class="token punctuation">.</span>getSound\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ndog<span class="token punctuation">.</span><span class="token function">getSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Woof</span>\n</code></pre>\n      </div>\n<p>The function itself is not in anyway bound to the initial object (cat). So much that we\'re able to "lend" it to a new one (dog). What happens is <code>this</code> refers to the <strong>execution context</strong> whichever it is, more specifically, <strong>whoever use that method</strong>.</p>\n<p>If we created a Giraffe object we could lend it one more time, and it would have giraffe\'s value. We don\'t need to recreate this here, but remember that for functions invoked as methods what really matters it the execution context, not the definition one. </p>\n<p>This behavior might generate unexpected results. Sometimes we want to delegate functionality, but not hand over context. See pitoresque example below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>\n  names<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'Anna\'</span><span class="token punctuation">,</span> <span class="token string">\'Allison\'</span><span class="token punctuation">,</span> <span class="token string">\'Brandon\'</span><span class="token punctuation">,</span> <span class="token string">\'Caroline\'</span><span class="token punctuation">,</span> <span class="token string">\'Isabel\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  getPeople<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//WARNING: Don\'t do this</span>\n<span class="token keyword">var</span> party <span class="token operator">=</span> <span class="token punctuation">{</span>\n  party<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  addToParty<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>party<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  getPeople<span class="token punctuation">:</span> people<span class="token punctuation">.</span>getPeople\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Remember this is a demonstrative example. You probably wouldn\'t, and if you would you probably shouldn\'t do as shown above. The idea is to add people names to the party object by concatenating it into the party array. Since people object already has a method that does so, the sloppy developer thought about reusing it this way. </p>\n<p>The thing is this is not going to work, because again what really counts is the execution context. <code>party.getPeople</code> will try to find the property called <code>names</code> inside the party object, and it won\'t find.</p>\n<p>The way to solve this is to circumveint the execution context and explicitly setting it  with the <code>bind</code> method, providing the context we want to assign as the first argument for the function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> party <span class="token operator">=</span> <span class="token punctuation">{</span>\n    party<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    addToParty<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/**/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    getPeople<span class="token punctuation">:</span> people<span class="token punctuation">.</span>getPeople<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><code>getPeople</code> when executed will now return <code>people</code>\'s names and not <code>party</code>\'s.</p>\n<p>Other ways to do it, would be with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply</code></a>, and <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call</code></a>, which are just other ways to execute a function with an explicit context. The difference between these two methods are mainly their parameters. You can invoke call with a list of parameters while apply requires an actual array as the second parameter.</p>\n<h3>Functions as constructors</h3>\n<p>Invoking a function as a constructor refers to the mechanism of inheritance in JavaScript.</p>\n<p>The first difference is the fact that invoking a function as a constructor creates a new empty object, and this object is set as the instance\'s context. Whatever you do inside the function constructor referring <code>this</code> will actually mean the instance object, and not the constructor. The context is bound to the new and recently created instance object.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'Purr\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Whenever we refer <code>this</code>, the first place to be looked is the instance object. If nothing under that name is found there, JavaScript goes all the way up in the inheritance chain to see if any ancestors possess a property with that given name:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">SuperAnimal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> <span class="token string">\'Super Master Animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getGrade</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//creating a prototypal inheritance chain</span>\nAnimal<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>As we can see, since no method <code>getGrade</code> or no property <code>grade</code> exists in the cat instance, JavaScript will look all the way up in the inheritance chain. It will look <code>cat</code>, then <code>Animal</code>, then <code>SuperAnimal</code> until there\'s no more places to look.</p>\n<p>Inheritance is another very exciting complex topic to be discussed on a later opportunity, but the overall behavior is this.</p>\n<h3>Remember</h3>\n<p>When it comes to:</p>\n<ul>\n<li>Invoking functions as functions, the context will always be the global context</li>\n<li>Invoking functions as methods, the context will be assigned to the current object executing the method</li>\n<li>Invoking functions as constructors will create a new object and refer to it.</li>\n</ul>\n<p>Also:</p>\n<ul>\n<li>It\'s possible to explicitly set the method context by using <code>bind</code>, <code>call</code> or <code>apply</code>.</li>\n</ul>',
id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-02-a-word-on-functions/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-01-02T03:15:59.165Z",path:"/a-word-on-functions",title:"A Word on Functions",excerpt:"Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions.",tags:["javascript","functions"]}},next:{html:'<h2>Render Props with React</h2>\n<p>A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to <strong>delegate rendering away from the component implementation itself</strong>, meaning it simply expose function parameters to child components, </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token operator">...</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token punctuation">:</span> counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>We have a good logic encapsulated within MyComponent, but we have little flexibility in how to use that logic. The state will always render the same thing. What if we provide more flexibility by just exposing logic out of the component, <strong>without caring</strong> on how this is effectively rendering?</p>\n<p>To do so, we take in a props called render that\'s a function and have arguments provided to it:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token operator">...</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token punctuation">:</span> counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    counter<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">,</span>\n    onClick<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClick\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>This makes sure our parent component logic and the rendering is decoupled. The function implementation of this component is the one deciding how the passed in props will evaluate to JSX, so we can put a given functionality, like a counter for example, but instead of tiying it to a specific child component, we leave it open to any others. </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> <span class="token function-variable function">ConsumerComp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token operator">&lt;</span>MyComponent\n    render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"consumer-comp"</span><span class="token operator">></span>\n        <span class="token punctuation">{</span>counter<span class="token punctuation">}</span>\n       <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-28-render-props-with-react/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-02-28T03:11:45.165Z",path:"/render-props-with-react",title:"The Render Props Pattern",excerpt:"A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to delegate rendering away from the component implementation itself, meaning it simply expose function parameters to child components...",tags:["react","javascript"]}}}}}});
//# sourceMappingURL=path---my-attempt-of-deep-equals-fd2cb5061e9060e031b9.js.map