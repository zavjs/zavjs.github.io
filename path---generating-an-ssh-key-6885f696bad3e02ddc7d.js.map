{"version":3,"sources":["webpack:///path---generating-an-ssh-key-6885f696bad3e02ddc7d.js","webpack:///./.cache/json/generating-an-ssh-key.json"],"names":["webpackJsonp","369","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,m3DAAAC,aAAk5DC,MAAA,wBAAAC,KAAA,oBAAAC,KAAA,yBAAAC,MAAA,eAAAC,QAAA,4IAAuQC,aAAgBC,MAAQR,KAAA,q1BAA6uBS,GAAA,0HAAAR,aAAgQE,KAAA,YAAAC,KAAA,uBAAAF,MAAA,uBAAAI,QAAA,GAAAD,MAAA,kCAAsIK,KAAA","file":"path---generating-an-ssh-key-6885f696bad3e02ddc7d.js","sourcesContent":["webpackJsonp([87863409390323],{\n\n/***/ 369:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Passwords tend to be weak and predictable. That's because humans are lazy and end up choosing common passwords like <code class=\\\"language-text\\\">123456</code> or <code class=\\\"language-text\\\">mickeymouse123</code>. Furthermore, it's common for an user to use the same password in multiple different places. That creates problems. For instance, security breaches in one place, like a database, can generate breaches in several others as well.</p>\\n<h3>SSH</h3>\\n<p>SSH provides a solution to that, because of its cryptographic mechanism. We generate two counterparts: a public key and hash. The public key is specifically created to match that one hash. We place the public key in the server, and any attempts to connect necessarily require the hash.</p>\\n<p>Since nothing is perfect, SSH also introduces its own kinds of risks, like the fact that having the hash sitting in your computer means that anyone with access to it will have access to your server. That is topic for later discussions.</p>\\n<h4>Generate SSH files in a \\\"safe\\\" place</h4>\\n<p>The concept of safe here is intended to mean \\\"not easily loseable\\\". This is important because since we're talking of server access, if we configure SSH login and disable password access, that necessarily means if we lose the hash file, <em>we'll be locked out of our server</em>.</p>\\n<p>So, with the command line go to the <code class=\\\"language-text\\\">~/.ssh</code> folder:</p>\\n<p><code class=\\\"language-text\\\">cd ~/.ssh</code></p>\\n<p>Then run <code class=\\\"language-text\\\">ssh-keygen -t rsa</code> (-t rsa indicates rsa as encryption type)</p>\\n<p>The prompt will show a series of questions like which name you want to give to your key. <strong>Important</strong> in the naming step, make sure not to use the default value, because it's likely you already have such file created for other applications in your system. So just provide another name.</p>\",\"frontmatter\":{\"title\":\"Generating an SSH key\",\"date\":\"February 03, 2019\",\"path\":\"/generating-an-ssh-key\",\"tags\":[\"nginx\",\"ssh\"],\"excerpt\":\"Plain text password pose a series of security risks to server security. Using SSH is the best alternative to it. Let's learn how today\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p>A container is a set of one or more applications isolated from the rest of a system. It's a mechanism originated from the necesity of sharing server resources like memory and CPU amongst different apps.</p>\\n<p>The previously used model of Hypervisors, popularly known as virtual machines would require each application to have its own operational system, which is suboptimal as it incurs in monetary and operational costs such as licensing and hardware upgrades, as operational systems require the consumption of resources for its own sustaining.</p>\\n<p>Instead, containers sit on top of and share the same operational system as all others in the machine.</p>\\n<img style=\\\"max-width: 75%; margin: 0 auto; padding: 20px; display: block;\\\" src=\\\"https://www.docker.com/sites/default/files/d8/2018-11/docker-containerized-and-vm-transparent-bg.png\\\">\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2019-02-02-what-is-a-container/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Sa, 02/19\",\"path\":\"/what-is-a-container\",\"title\":\"Glossary: Containers\",\"excerpt\":\"\",\"tags\":[\"container\",\"linux\",\"glossary\"]}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---generating-an-ssh-key-6885f696bad3e02ddc7d.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Passwords tend to be weak and predictable. That's because humans are lazy and end up choosing common passwords like <code class=\\\"language-text\\\">123456</code> or <code class=\\\"language-text\\\">mickeymouse123</code>. Furthermore, it's common for an user to use the same password in multiple different places. That creates problems. For instance, security breaches in one place, like a database, can generate breaches in several others as well.</p>\\n<h3>SSH</h3>\\n<p>SSH provides a solution to that, because of its cryptographic mechanism. We generate two counterparts: a public key and hash. The public key is specifically created to match that one hash. We place the public key in the server, and any attempts to connect necessarily require the hash.</p>\\n<p>Since nothing is perfect, SSH also introduces its own kinds of risks, like the fact that having the hash sitting in your computer means that anyone with access to it will have access to your server. That is topic for later discussions.</p>\\n<h4>Generate SSH files in a \\\"safe\\\" place</h4>\\n<p>The concept of safe here is intended to mean \\\"not easily loseable\\\". This is important because since we're talking of server access, if we configure SSH login and disable password access, that necessarily means if we lose the hash file, <em>we'll be locked out of our server</em>.</p>\\n<p>So, with the command line go to the <code class=\\\"language-text\\\">~/.ssh</code> folder:</p>\\n<p><code class=\\\"language-text\\\">cd ~/.ssh</code></p>\\n<p>Then run <code class=\\\"language-text\\\">ssh-keygen -t rsa</code> (-t rsa indicates rsa as encryption type)</p>\\n<p>The prompt will show a series of questions like which name you want to give to your key. <strong>Important</strong> in the naming step, make sure not to use the default value, because it's likely you already have such file created for other applications in your system. So just provide another name.</p>\",\"frontmatter\":{\"title\":\"Generating an SSH key\",\"date\":\"February 03, 2019\",\"path\":\"/generating-an-ssh-key\",\"tags\":[\"nginx\",\"ssh\"],\"excerpt\":\"Plain text password pose a series of security risks to server security. Using SSH is the best alternative to it. Let's learn how today\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p>A container is a set of one or more applications isolated from the rest of a system. It's a mechanism originated from the necesity of sharing server resources like memory and CPU amongst different apps.</p>\\n<p>The previously used model of Hypervisors, popularly known as virtual machines would require each application to have its own operational system, which is suboptimal as it incurs in monetary and operational costs such as licensing and hardware upgrades, as operational systems require the consumption of resources for its own sustaining.</p>\\n<p>Instead, containers sit on top of and share the same operational system as all others in the machine.</p>\\n<img style=\\\"max-width: 75%; margin: 0 auto; padding: 20px; display: block;\\\" src=\\\"https://www.docker.com/sites/default/files/d8/2018-11/docker-containerized-and-vm-transparent-bg.png\\\">\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2019-02-02-what-is-a-container/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Sa, 02/19\",\"path\":\"/what-is-a-container\",\"title\":\"Glossary: Containers\",\"excerpt\":\"\",\"tags\":[\"container\",\"linux\",\"glossary\"]}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/generating-an-ssh-key.json\n// module id = 369\n// module chunks = 87863409390323"],"sourceRoot":""}