webpackJsonp([67335324583948],{"./node_modules/json-loader/index.js!./.cache/json/tags-javascript.json":function(n,s){n.exports={pathContext:{posts:[{html:'<h3>Flattening an Arbitrarily Nested Object</h3>\n<p>In this post we\'ll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to destructure the object, removing the keys and leaving values only.</p>\n<p>To achieve this, recursion. While traversing the object, we\'ll check if the object\'s property holds a simple value (like a number) or another object. We apply the function recursively until the returned value is a simple one.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  b<span class="token punctuation">:</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span>\n  c<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    d<span class="token punctuation">:</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span>\n    e<span class="token punctuation">:</span> <span class="token string">\'3\'</span><span class="token punctuation">,</span>\n    f<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      g<span class="token punctuation">:</span> <span class="token string">\'4\'</span><span class="token punctuation">,</span>\n      h<span class="token punctuation">:</span> <span class="token string">\'5\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  i<span class="token punctuation">:</span> <span class="token string">\'6\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">serialize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">?</span> \n        <span class="token function">serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>\n          obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>If we test this function, we\'ll see it returns an array, and depending on the level of nesting, internal arrays as values. To make sure we always have a one-level array, our goal now is to flatten it.</p>\n<p>To do so, we\'ll use the example from a previous post <a href="/flattening-arbitrarily-nested-arrays">Flattening Arbitrarily Nested Arrays</a> to recursively flatten the array until the remaining value is not an array.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">flatten</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>\n      Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token operator">?</span> \n        <span class="token function">flatten</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">:</span>\n        curr\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>There you go. The flatten function simply verifies if the <code>curr</code> value is an array or not. If it is, it will flatten it again by checking if its items are also arrays or not. That will be done until only simple values are returned. When that happens, <code>curr</code> will be appended to the original accumulator (identified by the <code>acc</code> parameter).</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n      </div>\n<h3>Composition</h3>\n<p>The initial challenge is solved. Now, to make this look better, why not use functional compositional to achieve a clearer, more beautiful execution order?</p>\n<p>Composition is about putting together small simple functions to achieve a more complex functionality while still maintaing readability. Remember the DOT and KISS principles, respectively <strong>"DO ONE THING"</strong> and <strong>"KEEP IT SIMPLE, STUPID"</strong>. </p>\n<p>Instead of writing one function that does everything, we write multiple functions that are really good at doing one thing only, and compose them together like lego bricks, into higher functionality.</p>\n<p>To achieve this, we\'ll create a composer function that, from an initial value will apply multiple functions in order:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">composer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">curr</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Then, we compose these two functions together and use the composer anytime we wish to do this same operation:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> objectFlattener <span class="token operator">=</span> <span class="token function">composer</span><span class="token punctuation">(</span>\n  serialize<span class="token punctuation">,</span>\n  flatten\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">objectFlattener</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n      </div>',id:"/Users/zavareze/projects/zavjsblog/src/pages/2017-12-22-flattening-arbitrarily-nested-object/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2017-12-22T03:15:59.165Z",path:"/flatenning-arbitrarily-nested-object",title:"Flattening an Arbitrarily Nested Object",excerpt:"In this post, we'll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to deestructure the object, removing the keys and leaving values only; then, we should be able to transform the nested array into a single-level array.",tags:["javascript"]}},{html:'<h2>A Word on Functions</h2>\n<p>Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions. </p>\n<p>This capacity opens a new world of possibilities, especially when it comes to composing functionality. Check this example in JavaScript:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">removeSpaces</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toSlug</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>\n    <span class="token function">toLowerCase</span><span class="token punctuation">(</span>\n      <span class="token function">removeSpaces</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>something<span class="token punctuation">,</span> <span class="token keyword">with</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token keyword">with</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">doSomething</span><span class="token punctuation">(</span>toSlug<span class="token punctuation">,</span> <span class="token string">\'CREATING a @@ $$ UNIFORM url-friendly ** # STRING\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">//creating-a-%40%40-%24%24-uniform-url-friendly-**-%23-string</span>\n</code></pre>\n      </div>\n<p>Creating reusable functionality in a similar fashion to the code above would be quite a considerable challenge in many other programming languages, but at the same time increase in functionality also means increase in complexity. We need to understand how these functions behave in all possible scenarios.</p>\n<p>There are a few different ways to invoke a function: as a function, as a method, and as a constructor. Today we\'ll be discussing that.</p>\n<h3>Functions as functions</h3>\n<p>Referring a function by saying it is invoked as a function might be too obvious, but it\'s not. That\'s because there are different ways to do so, which we\'ll be discussing later.</p>\n<p>To invoke a function as a function, we simply invoke the function as it is, with the execution operator <code>()</code>. Again, it might sound obvious, but we\'ll see how that evolves:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//1.</span>\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Window, if in browser</span>\n\n<span class="token comment">//2.</span>\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Window, again</span>\n</code></pre>\n      </div>\n<p>It\'s safe to say that when we invoke a function as a function its context is always the global object. Window in the case of the browser, or Global Object if we\'re talking about Node.js for example. </p>\n<p>Considering Window is an object, functions invoked as functions are actually invoked as methods, but for Window only. We decide not to treat it as a method invokation because of Window\'s implicit nature. It\'s always going to be the global object, so we might as well categorize it differently.</p>\n<p>Note that ES6\'s arrow functions behave differently, and this is a topic for other post.</p>\n<h3>Functions as methods</h3>\n<p>Methods in JavaScript are nothing more than object properties that refer to functions. See the following example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sound<span class="token punctuation">:</span> <span class="token string">\'Meow\'</span><span class="token punctuation">,</span>\n  getSound<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sound<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ncat<span class="token punctuation">.</span><span class="token function">getSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Meow</span>\n</code></pre>\n      </div>\n<p>Since the <code>getSound</code> method returns \'meow\', which is exactly the cat\'s object sound we might jump to conclude that <code>this</code> always refers to the cat object, which is not true. See the next example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sound<span class="token punctuation">:</span> <span class="token string">\'Woof\'</span><span class="token punctuation">,</span>\n  getSound<span class="token punctuation">:</span> cat<span class="token punctuation">.</span>getSound\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ndog<span class="token punctuation">.</span><span class="token function">getSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Woof</span>\n</code></pre>\n      </div>\n<p>The function itself is not in anyway bound to the initial object (cat). So much that we\'re able to "lend" it to a new one (dog). What happens is <code>this</code> refers to the <strong>execution context</strong> whichever it is, more specifically, <strong>whoever use that method</strong>.</p>\n<p>If we created a Giraffe object we could lend it one more time, and it would have giraffe\'s value. We don\'t need to recreate this here, but remember that for functions invoked as methods what really matters it the execution context, not the definition one. </p>\n<p>This behavior might generate unexpected results. Sometimes we want to delegate functionality, but not hand over context. See pitoresque example below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>\n  names<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'Anna\'</span><span class="token punctuation">,</span> <span class="token string">\'Allison\'</span><span class="token punctuation">,</span> <span class="token string">\'Brandon\'</span><span class="token punctuation">,</span> <span class="token string">\'Caroline\'</span><span class="token punctuation">,</span> <span class="token string">\'Isabel\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  getPeople<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//WARNING: Don\'t do this</span>\n<span class="token keyword">var</span> party <span class="token operator">=</span> <span class="token punctuation">{</span>\n  party<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  addToParty<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>party<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  getPeople<span class="token punctuation">:</span> people<span class="token punctuation">.</span>getPeople\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Remember this is a demonstrative example. You probably wouldn\'t, and if you would you probably shouldn\'t do as shown above. The idea is to add people names to the party object by concatenating it into the party array. Since people object already has a method that does so, the sloppy developer thought about reusing it this way. </p>\n<p>The thing is this is not going to work, because again what really counts is the execution context. <code>party.getPeople</code> will try to find the property called <code>names</code> inside the party object, and it won\'t find.</p>\n<p>The way to solve this is to circumveint the execution context and explicitly setting it  with the <code>bind</code> method, providing the context we want to assign as the first argument for the function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> party <span class="token operator">=</span> <span class="token punctuation">{</span>\n    party<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    addToParty<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/**/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    getPeople<span class="token punctuation">:</span> people<span class="token punctuation">.</span>getPeople<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><code>getPeople</code> when executed will now return <code>people</code>\'s names and not <code>party</code>\'s.</p>\n<p>Other ways to do it, would be with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply</code></a>, and <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call</code></a>, which are just other ways to execute a function with an explicit context. The difference between these two methods are mainly their parameters. You can invoke call with a list of parameters while apply requires an actual array as the second parameter.</p>\n<h3>Functions as constructors</h3>\n<p>Invoking a function as a constructor refers to the mechanism of inheritance in JavaScript.</p>\n<p>The first difference is the fact that invoking a function as a constructor creates a new empty object, and this object is set as the instance\'s context. Whatever you do inside the function constructor referring <code>this</code> will actually mean the instance object, and not the constructor. The context is bound to the new and recently created instance object.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'Purr\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Whenever we refer <code>this</code>, the first place to be looked is the instance object. If nothing under that name is found there, JavaScript goes all the way up in the inheritance chain to see if any ancestors possess a property with that given name:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">SuperAnimal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> <span class="token string">\'Super Master Animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getGrade</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//creating a prototypal inheritance chain</span>\nAnimal<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>As we can see, since no method <code>getGrade</code> or no property <code>grade</code> exists in the cat instance, JavaScript will look all the way up in the inheritance chain. It will look <code>cat</code>, then <code>Animal</code>, then <code>SuperAnimal</code> until there\'s no more places to look.</p>\n<p>Inheritance is another very exciting complex topic to be discussed on a later opportunity, but the overall behavior is this.</p>\n<h3>Remember</h3>\n<p>When it comes to:</p>\n<ul>\n<li>Invoking functions as functions, the context will always be the global context</li>\n<li>Invoking functions as methods, the context will be assigned to the current object executing the method</li>\n<li>Invoking functions as constructors will create a new object and refer to it.</li>\n</ul>\n<p>Also:</p>\n<ul>\n<li>It\'s possible to explicitly set the method context by using <code>bind</code>, <code>call</code> or <code>apply</code>.</li>\n</ul>',
id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-02-a-word-on-functions/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-01-02T03:15:59.165Z",path:"/a-word-on-functions",title:"A Word on Functions",excerpt:"Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions.",tags:["javascript","functions"]}},{html:'<h2>Immutability</h2>\n<p>Redux focus on the importance of immutability by enforcing pure functions as reducers as a way to generate new state, in opposition of patching old one with new data ([1, 2, 3].concat(4) vs [1, 2, 3].push(4)). However, little is discussed on why that is important, and the answer to this lies in one of React\'s lifecycle methods called <code>shouldComponentUpdate</code>.</p>\n<h3>shouldComponentUpdate</h3>\n<p>This method is part of the Update phase, and is one of the first hooks to be triggered. Natively in React, every time a component enters the Update phase, shouldComponent update returns true. However, it is available to developers as a way to further enhance component performance, and that is because React does shallow comparison between old and new props and state.</p>\n<p>To evaluate equality, shallow comparison will do a few different things:</p>\n<ul>\n<li>Compare object signature (objA === objB), that is, if they both reference the same place in memory</li>\n<li>Check if the amount of <strong>first level</strong> properties are the same (Object.keys(objA).length === Object.keys(objB).length)</li>\n<li>Check if both object keys are the same in name and value</li>\n</ul>\n<p>Excerpt from React\'s PureRenderMixin:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">shallowEqual</span><span class="token punctuation">(</span>objA<span class="token punctuation">:</span> mixed<span class="token punctuation">,</span> objB<span class="token punctuation">:</span> mixed<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>objA <span class="token operator">===</span> objB<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> objA <span class="token operator">!==</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> objA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>\n      <span class="token keyword">typeof</span> objB <span class="token operator">!==</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> objB <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> keysA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> keysB <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>keysA<span class="token punctuation">.</span>length <span class="token operator">!==</span> keysB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> bHasOwnProperty <span class="token operator">=</span> hasOwnProperty<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keysA<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">bHasOwnProperty</span><span class="token punctuation">(</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> objA<span class="token punctuation">[</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> objB<span class="token punctuation">[</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">shallowCompare</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span> <span class="token operator">||</span>\n    <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>state<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>One important thing to notice, and that you might have let pass is that Object.keys(obj) only return the first level object properties, which means:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> \n    c<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    d<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      a<span class="token punctuation">:</span> <span class="token number">3</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["a"]</span>\n</code></pre>\n      </div>\n<p>All of the other nested objects are left behind, which means that if our object\'s signature is the same, and the first level scalar value properties (strings, numbers) are equal then the object is deemed to be the same, and React doesn\'t trigger an update. Since we provided a mutated value, our code is not considered pure.</p>\n<p>If in React we had the ability to manually push a value into an array inside state, and that value was passed down to a child component, the child component wouldn\'t update to reflect the new object. That\'s why it\'s only possible to re-render by changing state with setState.</p>\n<h3>Deep Equals</h3>\n<p>I thought about how I would create a deep equals functionality as a way to compare all object values, including nested objects between a given objA and a given objB. The requirements where as follows:</p>\n<ul>\n<li>Make sure the same props that exist in objA, also exist in objB</li>\n<li>Make sure their values are equal</li>\n</ul>\n<p>So the first thing I would do is iterating over the first level properties for objA, and do something if these properties are objects themselves, and something else if not:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n      <span class="token punctuation">:</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>I figured that if these objects are objects themselves, I probably want to keep looking further until it\'s not anymore;</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> \n      <span class="token punctuation">:</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>And also, if it\'s finally not an object, then we\'ll simply check if the given property exists in objB and compare the two:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> b <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Now, with an array of booleans we reduce them to the final value:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span>\n      <span class="token operator">?</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> b <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Tests</h3>\n<p>I\'m using <a href="https://github.com/mjackson">mjackson\'s expectjs library</a> to assert.</p>\n<p>One: I expect objects with the same property names and values, including nested objects, to be considered equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Two: I expect objects with different property names and/or values, including nested objects, to be considered not equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">//different values, same keys</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Cat\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//diferent keys, same values</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> d<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//different keys, different values</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'C\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> make<span class="token punctuation">:</span> <span class="token string">\'D\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Three: I expect objects with different number of properties, including nested objects properties, even if everything else is the same, to be considered not equal.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">//more keys in objA</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//more keys in objB</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>\n  <span class="token function">deepEquals</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'A\'</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">\'Dog\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-15-my-attempt-of-deep-equals/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-02-15T03:11:45.165Z",path:"/my-attempt-of-deep-equals",title:"Attempting Deep Equals",excerpt:"One of the keys for React and Redux development is state immutability. Today, we'll discuss more specifically why, and build a function to compare deep equality betweeen two objects...",tags:["react","javascript"]}},{html:'<h2>Render Props with React</h2>\n<p>A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to <strong>delegate rendering away from the component implementation itself</strong>, meaning it simply expose function parameters to child components, </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token operator">...</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token punctuation">:</span> counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>We have a good logic encapsulated within MyComponent, but we have little flexibility in how to use that logic. The state will always render the same thing. What if we provide more flexibility by just exposing logic out of the component, <strong>without caring</strong> on how this is effectively rendering?</p>\n<p>To do so, we take in a props called render that\'s a function and have arguments provided to it:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token operator">...</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token punctuation">:</span> counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    counter<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">,</span>\n    onClick<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClick\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>This makes sure our parent component logic and the rendering is decoupled. The function implementation of this component is the one deciding how the passed in props will evaluate to JSX, so we can put a given functionality, like a counter for example, but instead of tiying it to a specific child component, we leave it open to any others. </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> <span class="token function-variable function">ConsumerComp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token operator">&lt;</span>MyComponent\n    render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"consumer-comp"</span><span class="token operator">></span>\n        <span class="token punctuation">{</span>counter<span class="token punctuation">}</span>\n       <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',
id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-02-28-render-props-with-react/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-02-28T03:11:45.165Z",path:"/render-props-with-react",title:"The Render Props Pattern",excerpt:"A very good technique to add flexibility in our rendering logic is using the render props pattern, which is a prop we define as a function that allows us to delegate rendering away from the component implementation itself, meaning it simply expose function parameters to child components...",tags:["react","javascript"]}},{html:'<h2>Handling JavaScript Promises</h2>\n<p>For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time. </p>\n<h3>XMLHttpRequest example</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">\'GET\'</span><span class="token punctuation">,</span> <span class="token string">\'api.github.com/users\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'load\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'response is here\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>The XMLHttpRequest way to do things involved callback functions. That is, pieces of code to be executed when the external process is finished and the response is back. </p>\n<p>Soon enough - as code bases grew and environments such as Node.js appeared, it became more and more difficult to handle asynchronous requests in a desired order through a series of steps, handling any errors that might come up, and also keeping good readability. The <strong>callback hell</strong> emerged.</p>\n<h3>Callback Hell</h3>\n<p>As callbacks usage was increased and widely adopted to handle both synchronous and asynchronous operations, a peculiar symptom started to appear: the nesting of these callbacks in a very confusing fashion, leading to poor code readability.</p>\n<h4>Sample Node.js file</h4>\n<p>Checking if a file exists, reading its content and updating it:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> myFile <span class="token operator">=</span> <span class="token string">\'my-file.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> message <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">editFile</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> additionalContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> content <span class="token operator">+</span> additionalContent<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nfs<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>myFile<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n\n            fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token function">editFile</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//writing finished</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3>The Promise Way</h3>\n<p>Promises had a better proposal on how to structure and order asynchronous calls in a series of steps while maintaining readability and organization. Additionally with Promises when errors occurr it\'s possible to catch \'em on the spot, without need for checks in every step of the way.</p>\n<p>To see how to implement a Promise in a very basic manner, first let\'s compare it with an old callback-nesting version of it. The scenario is simple, loading an image and handling cases of sucess and error for it:</p>\n<h4>Old callback-nesting way</h4>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">\'blossom.png\'</span><span class="token punctuation">,</span> <span class="token string">\'wrapper\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>containerId<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    document<span class="token punctuation">.</span><span class="token function">findElementById</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`error found while loading image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> containerId<span class="token punctuation">,</span> success<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">success</span><span class="token punctuation">(</span>containerId<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>With Promises, we need to wrap our operations (timers, requests, etc) on a new Promise instantiation and either Resolve or Reject with the response of these requests. The same example above, in Promises, would be:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">\'blossom.png\'</span><span class="token punctuation">,</span> <span class="token string">\'wrapper\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>containerId<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        document<span class="token punctuation">.</span><span class="token function">findElementById</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`error found while loading image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> containerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n        img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>containerId<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>As you can see, it\'s possible to chain calls together, with <code>.then</code>, and catch errors with <code>.catch</code>. You can do as many operations as you wish, by resolving promises and having the resolved values as the first argument of the next function:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token function-variable function">users</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token string">\'zavjs\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            id<span class="token punctuation">:</span> <span class="token string">\'zavjs\'</span><span class="token punctuation">,</span>\n            content<span class="token punctuation">:</span> <span class="token string">\'This is my description description \'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        getUser<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> users<span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        editUser<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>userName<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            users<span class="token punctuation">[</span>userName<span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> users<span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> users<span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//fetch api uses promises natively</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getUser</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.github.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">getUser</span><span class="token punctuation">(</span><span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token string">\'zavjs\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//json parse</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//returning description</span>\n        <span class="token keyword">return</span> <span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">editUser</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">,</span> data<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>It\'s also possible to assign a Promise to a variable and use it progressively, as necessary, instead of chaining:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token function">promiseFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npromise\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npromise\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">handleSomeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>In essence, a Promise is an object that serves as temporary placeholder for a future evaluation, which is usually an asynchronous operation like an async request or a timer. Using the Promise object, you can layout the path the actual value will take for when it\'s ready to be executed, by registering callbacks to be ran when the operation succeeds or fails.</p>',id:"/Users/zavareze/projects/zavjsblog/src/pages/2017-12-28-handling-javascript-promises/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2017-12-29T03:15:59.165Z",path:"/using-javascript-promises",title:"Using JavaScript Promises",excerpt:"For many years on the web, the way to make asynchronous requests was by using the XMLHttpRequest API. Built my Microsoft, it soon became the standard way to connect client and the server, and remained that way for a long time.",tags:["javascript","promises","ajax"]}},{html:'<h3>What are design patterns?</h3>\n<p>Design patterns are proven reusable solutions to a recurrent problem. To be considered a pattern, the solution must not be obvious. Most of the times, patterns describe a relationship between structures.</p>\n<p>One major benefit of design patterns is the creation of jargons for common vocabulary. Instead of explaining complex structures we just say "why not do a module here, my good sir?". So, tighten your seatbealts and let\'s delve into some of my favorite.</p>\n<blockquote>\n<p><em>Fun fact: did you know the concept of Design Patterns is original from construction? Coined by Christopher Alexander in his book "A Pattern Language", he wrote it to outline common patterns or solutions he came across when building stuff out in the physical world.</em></p>\n</blockquote>\n<blockquote>\n<p><em>For example, the Cloverleaf interchanges are a common proven solution to help drivers transition between highways without the need of turns or even traffic lights.</em></p>\n</blockquote>\n<h3>Design Patterns in JavaScript</h3>\n<hr>\n<p>The first pattern is categorized under the creational type of patterns. A module is simply a containarized toolbox of related functionalities that is commonly created as a list of methods within an object literal:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> SongBox <span class="token operator">=</span> <span class="token punctuation">{</span>\n  songs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  singSong<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// check if the song already exist in the list</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>songs<span class="token punctuation">[</span>song<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// adds if it doesn\'t</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>songs <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>songs<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">:</span> song\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\\u266a"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>songs<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  getSongById<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>songs<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>The Module Pattern</h2>\n<hr>\n<p><strong>The Module Pattern</strong> became more recurrent with modern browser JavaScript in the moment which it started being possible to create files as modules in the browsers, and have them imported by other files. The popularization of this approach is due to tools like Browserify, Webpack, and others.</p>\n<p>We can even make a module to be a function so it accepts arguments, and does calculations, or delays execution before returning the methods. Another common use for modules as functions is to create private vaiables.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// accepting arguments that will enhance functionality</span>\n<span class="token keyword">var</span> <span class="token function-variable function">SongBox</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// songs is a private variable and cannot be retrieved from outside</span>\n  <span class="token comment">// SongBox.songs doesn\'t exist outside</span>\n  <span class="token keyword">var</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">addSong</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    songs <span class="token operator">=</span> songs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">getSongs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> limit <span class="token operator">?</span> songs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span> <span class="token punctuation">:</span> songs<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    addSong<span class="token punctuation">,</span>\n    getSongs\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>What do you think is the benefit for creating modules? My take is that it becomes much better to reason, discern and organize our code if we manage to logically separate all differing structures of our software apart. Each component is very well delimited and we know exactly when one ends and another begins.</p>\n<p>Additionally, if we are able to separate our components we get to be able to test them separately as well. And isn\'t that much better when we need to work on new functionality, or to alter existing ones? Isn\'t separation of concerns a much more efficient tactic when we need to find a pesky bug in the code? I know for a fact it is, because if there\'s a clearer distinction of <em>what\'s what</em>, specific tests will fail, and specific functions will accuse the error more prominently.</p>\n<p>Software developers already know the importance of decomposing big problems in multiple small specialized functions that solve small units (the divide and conquer tactic). With the module pattern, we can take this to another level to group similar functionality.</p>\n<h2>The Facade Pattern</h2>\n<hr>\n<p>Simplicity. Simplicity is key to software development. Not because of machines, but because of those that operate the machines - we, humans. The Facade Pattern is aimed to enhance software construction by providing a simplified interface to a complicated sub-system.</p>\n<p>Like most web developers, my early days of hacking in the web started with jQuery. Oh, and how powerful I felt using jQuery. A few lines of code and BAM! I\'m making an element slide into view, almost like a Ninja. Another line and SHAZAM! this div is fading out from view.</p>\n<p>This apparent simplicity of the few <code>$(el).slideDown()</code> and <code>$(el).fadeOut()</code> methods hide quite a lot of complexity. For starters, the actual animation within those functions usually took way more than a couple of lines. Then, there\'s the problem of browser compatibility. How are you making sure that everything you do in JavaScript is compatible with the latest Chrome browser, and IE8 altogether?</p>\n<p>Something as simple as creating an event listener had different syntaxes in different browsers:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// webkit:</span>\ndiv<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'clicked!\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\ndiv<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ie 8/opera</span>\ndiv<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">\'onclick\'</span><span class="token punctuation">,</span> div<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\ndiv<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">\'onclick\'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Now imagine something a little more complicated, like JS animations. So when it comes to actually supporting all browsers, developers would have to be mindful of quite a few different possibilities for compatibility. jQuery took that away,by taking care of common complexities found in web development, so that the final developer doesn\'t have to.</p>\n<p><code>$(el).css()</code>, <code>$(el).animate()</code> are just a few other examples on why a beginner would feel so competent writing JavaScript.</p>\n<h3>Creating a Facade ourselves</h3>\n<hr>\n<p>A Facade is just a simplified interface for a complex sub-system. Just as the seemingly nice neighbour who smiles and greets, but deep inside despises and envies you.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// Immediately-invoked function expression for</span>\n<span class="token comment">// separate scope</span>\n<span class="token keyword">var</span> myBankingModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> _private <span class="token operator">=</span> <span class="token punctuation">{</span>\n    deposit<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>cash<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>cash <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cash <span class="token operator">+</span> cash<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    transfer<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"transfering"</span> <span class="token operator">+</span> <span class="token string">"$"</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">" to: "</span> <span class="token operator">+</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    getBalance<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cash<span class="token punctuation">,</span> <span class="token string">"is how much you have now"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    depositTransferAndLog<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _private<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>depositAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      _private<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>transferAmount<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>transferDestinationId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      _private<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> account <span class="token operator">=</span> <span class="token function">myBankingModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\naccount<span class="token punctuation">.</span><span class="token function">depositTransferAndLog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  depositAmount<span class="token punctuation">:</span> <span class="token number">1500</span><span class="token punctuation">,</span>\n  transferAmount<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n  transferDestinationId<span class="token punctuation">:</span> <span class="token string">"af043748399930948d9"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Notice that when calling <code>.depositTransferAndLog()</code> we are triggering a set of private behavior within the module, that the consuming part doesn\'t even have to be aware of. We made it much easier to consume a feature without needing to worry about implementation-level details. Think of all APIs you have consumed. They usually expose a few methods that are very intuitive and simple to use while the hardwork is done at the server level.</p>\n<h2>Conclusion</h2>\n<hr>\n<p>Design patterns are proven solutions to recurrent software problems. They can\'t be obvious and they offer good standards on how we create, structure and extend functionality.</p>\n<p><strong>The Module Pattern</strong>: the grouping of similar functions together. Separation of concerns, enhanced testability and debuggability.</p>\n<p><strong>The Facade Pattern</strong>: the simplification of a complex sub-system. Creating abstractions that hide potential complexities or obscurities from the original code.</p>',
id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-09-29-most-useful-design-patterns/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-09-29T03:11:45.165Z",path:"/most-useful-design-patterns",title:"Most Useful Design Patterns in JS",excerpt:"Design patterns are proven solutions to a recurrent problem. Most of the times they describe a relationship between more than one structures",tags:["javascript"]}},{html:'<p>If you\'re familiar with toolkits that aim automating repetitive tasks, like compressing css, or ugliflying js files (like Gulp), you might be wondering how does that work. Today, we\'ll understand these toolkits a little more, while creating a rudimentary copy of one of these tools, that aim to replicate similar functionalities.</p>\n<p>This post aims to demonstrate a few Node modules, and a few development patterns that would help us replicate similar functionalities as that of Gulp, for example. It\'s not intended for actual use or to be taken other than a learning resource.</p>\n<h2>Use Case</h2>\n<p>The way I like to address challenges/issues is by using real world use cases as guiding parameters. For that purpose, I randomly choose "Droll" to be my module\'s name, and there are a handful of things I wish Droll would do:</p>\n<ul>\n<li>Creating tasks that would allow users to encapsulate functionality and execute it when we they see fit</li>\n<li>Watch for changes in directories or files as a way to execute functionality when it happens</li>\n<li>Target and allocate files/file contents into a temporary place that would allow users to modify it, without changing the original copy</li>\n<li>Enable users the ability to modify these temporary files by applying functions and composing functionality</li>\n<li>The ability to create end files based on composed functionality of temporary data</li>\n</ul>\n<p>For example, let\'s assume a simple task that involves watching for changes on a given directory or file, applying changes to a temporary copy of that file, and creating a new file with the modified contents.</p>\n<p>More specifically, a very common development task: having CSS files compressed into a new file. Let\'s assume two folders, one named <code>src</code>, and another named <code>dist</code>. <code>src</code> will contain the intact original css file whereas <code>dist</code> will hold the newly created minified version:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>project\n|   droll.js (library)\n│   drollfile.js (implementation)\n│\n└───src\n│   │   styles.css\n│   \n└───dist\n    │   styles.min.css</code></pre>\n      </div>\n<p>-</p>\n<p>The following would be how I want things to work:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">//drollfile.js</span>\n<span class="token keyword">const</span> droll <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'droll\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//create a droll task of name \'watch:css\'</span>\n<span class="token comment">//assign the task a function to be executed whenever we decide to run it</span>\ndroll<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">\'watch:css\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">//watch for changes on a specific file </span>\n  droll<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">\'./src/styles.css\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//get file contents</span>\n    droll<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">\'./src/styles.css\'</span><span class="token punctuation">)</span>\n      <span class="token comment">//provide functions to modify the temporary data, composing if needed</span>\n      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>doSomethingElse<span class="token punctuation">)</span>\n      <span class="token comment">//create a final file with the modified content</span>\n      <span class="token punctuation">.</span><span class="token function">dist</span><span class="token punctuation">(</span><span class="token string">\'./dist/styles.min.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//arbitrarily deciding to run the task</span>\n<span class="token comment">//for now a javascript line, which later</span>\n<span class="token comment">//can be replaced for a command line like `droll watch:css`, for example</span>\ndroll<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">\'watch:css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<h2>The Node.js File System Module</h2>\n<p>The main star for tonight has to be Node\'s File System Module, as it contains all of the file managing functionalities we need to create Droll. </p>\n<p>See, whenever we wish to read from a file (<code>./src/styles.css</code>, for example), we should use <code>fs.readFile</code>, or even <code>fs.readFileSync</code>. To write, we use <code>fs.writeFile</code>, or <code>fs.writeFileSync</code>. The difference between each of the items in both pairs is asynchronicity - that is, whether you want to block runtime while attempting to read the file or not.</p>\n<p>Since we don\'t expect the user (or any other users for that matter) to be doing concurrent operations (like it would happen if we were to create a Node.js Web server, for example), we will <strong>explicitly</strong> and <strong>intentionally</strong> be using the synchronous versions of these methods. </p>\n<p>Keep in mind however, that using synchronous methods is not recomended when you\'re expected to serve responsive applications in which the main thread is expected to be shared by multiple concurrent operations. You don\'t want user A to be blocked waiting for user\'s B long synchronous operation to finish executing.</p>\n<p>See the module example below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'myfile.txt\'</span><span class="token punctuation">,</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//file contents</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">\'mynewfile.txt\'</span><span class="token punctuation">,</span> <span class="token string">\'my new file is aweseom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//file written</span>\n</code></pre>\n      </div>\n<p>-</p>\n<p>Additionally, the FS module has another very important method called \'watch\'. Watch will, ehrm, well... <em>watch</em> a given directory or filename and enable users the ability to execute functionality when that file is changed.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>fs<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">\'myfile.txt\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'rename\', if file created or deleted </span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'change\', if file changed</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<h2>The Fluent Pattern</h2>\n<p>Another key feature for our library is the ability to chain methods together for a more fluid architecture. This pattern is seen in many JavaScript libraries like jQuery, for example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// jQuery prefers this:</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'.special-div\'</span><span class="token punctuation">)</span>\n  <span class="token comment">//assign the color blue to special div</span>\n  <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">\'color\'</span><span class="token punctuation">,</span> <span class="token string">\'blue\'</span><span class="token punctuation">)</span>\n  <span class="token comment">//target special-div\'s immediate parent</span>\n  <span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">//hide it</span>\n  <span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// instead of this:</span>\n<span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'.special-div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndiv<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">\'color\'</span><span class="token punctuation">,</span> <span class="token string">\'blue\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> parent <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nparent<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<p>It\'s important to notice however that, when we execute any given object\'s method, that object doesn\'t return itself. It returns whatever the method should be returning:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  abc<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">;</span>\n  def<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* not going to working, as it\'s going to try to execute the def method \nfor the value 1 (which doesn\'t exist), instead of the object itself. */</span>\nobj<span class="token punctuation">.</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre>\n      </div>\n<p>-</p>\n<p>The way to make Droll provide the ability to chain its methods is simple: we should return the Droll\'s context upon every method execution. </p>\n<p>A little earlier we have already defined a few desired methods for our library, so let\'s sketch them here. Also, taking in consideration the aforementioned use case, note that the only methods chaining together are <code>src</code>, and <code>pipe</code>, so we\'ll go with that for now.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">//node module, module.exports automatically exports the desired object</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  task<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  watch<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  src<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//1. does something</span>\n    <span class="token comment">//...</span>\n\n    <span class="token comment">//2. return itself</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pipe<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//1. does something</span>\n    <span class="token comment">//...</span>\n\n    <span class="token comment">//2. return itself</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  dist<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  execute<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<h3>Task</h3>\n<p>In order for us to control when a specific functionality will be executed, we should hold that functionality encapsulated while naming it for later reference. We\'ll just create an internal property within Droll to associate a given task name to a given function:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  _tasks<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  task<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>taskname<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//this._tasks[\'watch:js\']</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_tasks<span class="token punctuation">[</span>taskname<span class="token punctuation">]</span> <span class="token operator">=</span> cb<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<h3>Execute</h3>\n<p>We must specify a method to explicitly execute a given task when desired. It\'s simple, let\'s just receive a name, and go inside the internal <code>_tasks</code> property to execute the associated function:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  _tasks<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  execute<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_tasks<span class="token punctuation">[</span>taskName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  task<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* collapsed */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<p>So, for example, we can specify when a task will be executed like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// this is just a simple registering</span>\ndroll<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">\'mytask\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">anon</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'when executed, please log this\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// here is where the \'anon\' function will be executed effectively </span>\ndroll<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">\'mytask\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<h3>Watch</h3>\n<p>To watch for a specific file or directory, let\'s make our Droll\'s <code>watch</code> method receive a path to be watched as the first parameter, and also a callback function to be executed when changes happen, as a second parameter. Let\'s use Node\'s File System module to handle the dirty work:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  _tasks<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  execute<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  task<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  watch<span class="token punctuation">:</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>eventType <span class="token operator">===</span> <span class="token string">\'change\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<h3>Source</h3>\n<p>The source method is ideal for getting file contents. With it, we\'ll specify a file and get it\'s contents with <code>fs.readFileSync</code>. We\'ll create a property inside Droll to hold the file contents:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  _curVal<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  _tasks<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  execute<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  task<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  watch<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  src<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_curVal <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n</code></pre>\n      </div>\n<p>Since we\'re not specifying encoding, Node.js will create a Buffer object and assign it to the <code>_curVal</code> property.</p>\n<h3>Pipe</h3>\n<p>Pipe is a good way to compose functionality. Since we\'re trying to minify a css file, let\'s agree that <code>pipe</code> should accept a function, and execute that function over the temporary value allocated inside Droll\'s object. We\'ll mutate the previously created value to become something new:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  _tasks<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  _curVal<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  execute<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  task<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  watch<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pipe<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_curVal <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_curVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Since <code>_curVal</code> is being stored as a Buffer object, our goal is to apply the function to a stringified version of that Buffer, and not the Buffer instance itself. After applying mutations, we\'ll transform it back to a Buffer object with <code>Buffer.from()</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">{</span>\n  pipe<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_curVal <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_curVal<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>-</p>\n<h3>Dist</h3>\n<p>Dist will simply create a file with the previously set temporary values inside of it. The dist function will only receive one argument, the file name. The file content will be automatically inferred from Droll\'s property.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">{</span>\n  dist<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_curVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>-</p>\n<h2>Final Product</h2>\n<p>The final product will look like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">//droll.js </span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  _tasks<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  _curVal<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  src<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_curVal <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  dist<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_curVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  task<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>taskName<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_tasks<span class="token punctuation">[</span>taskName<span class="token punctuation">]</span> <span class="token operator">=</span> cb<span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  execute<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_tasks<span class="token punctuation">[</span>taskName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pipe<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_curVal <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_curVal<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  watch<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>location<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>eventType <span class="token operator">===</span> <span class="token string">\'change\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>-</p>\n<p>The intended functionality designed at the beginning should work properly, now.\nFor educational purposes let\'s use an actual function inside the pipe method, that would simulate minifying a css file. </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> droll <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./droll\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// use path module to specify the appropriate file location</span>\n<span class="token keyword">const</span> <span class="token function-variable function">toPath</span> <span class="token operator">=</span> <span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// simply remove spaces to simulate minifying</span>\n<span class="token keyword">const</span> <span class="token function-variable function">minify</span> <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=></span> content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\s/g</span><span class="token punctuation">,</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ndroll<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">\'watch:css\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  droll<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token string">\'./src/styles.css\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    droll<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token string">\'./src/styles.css\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>minify<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">dist</span><span class="token punctuation">(</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token string">\'./dist/styles.min.css\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>The final minified css file will be created inside the destination folder. Be sure to test with an actual uncompressed css file and see it being converted into minified css.</p>\n<h2>Improvements</h2>\n<p>This toolkit can be improved in a variety of ways, for example:</p>\n<ul>\n<li>Targeting multiple files, instead of only one, by providing an array of files, instead of a string</li>\n<li>Targeting files by extension, by providing wildcard values such as \'src/*<em>/</em>.js\', in case we wish to target all js or css files inside a given folder</li>\n</ul>\n<p>Checkout the <a href="https://github.com/zavjs/drolljs">github repository</a>. </p>',
id:"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-10-understanding-gulp/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-01-10T03:11:29.165Z",path:"/understanding-automated-toolkits",title:"Understading Automated Toolkits",excerpt:"If you're familiar with toolkits that aim automating repetitive, painful or time consuming tasks, like compressing css, or ugliflying js files (like gulp), you might be wondering how does that work. Today, we'll understand these toolkits a little more, while creating a rudimentary copy that aim to replicate similar functionalities.",tags:["node.js","javascript","automation","gulp"]}}],tagName:"javascript"}}}});
//# sourceMappingURL=path---tags-javascript-7a2fdbc210c07be29f82.js.map