{"version":3,"sources":["webpack:///path---flatenning-arbitrarily-nested-object-e0e802fcc2b4f8712e73.js","webpack:///./.cache/json/flatenning-arbitrarily-nested-object.json"],"names":["webpackJsonp","355","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","next","id"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,wxUAAojVC,aAA8GC,MAAA,0CAAAC,KAAA,oBAAAC,KAAA,wCAAAC,MAAA,cAAAC,QAAA,mSAA8bC,aAAgBC,KAAA,KAAAC,MAAoBT,KAAA,q9YAAuxZU,GAAA,2HAAAT,aAAmTE,KAAA,2BAAAC,KAAA,wBAAAF,MAAA,0BAAAI,QAAA,6PAAAD,MAAA","file":"path---flatenning-arbitrarily-nested-object-e0e802fcc2b4f8712e73.js","sourcesContent":["webpackJsonp([9630271022450],{\n\n/***/ 355:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>Flattening an Arbitrarily Nested Object</h3>\\n<p>In this post we'll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to destructure the object, removing the keys and leaving values only.</p>\\n<p>To achieve this, recursion. While traversing the object, we'll check if the object's property holds a simple value (like a number) or another object. We apply the function recursively until the returned value is a simple one.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span>\\n  c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">,</span>\\n    e<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">,</span>\\n    f<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      g<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'4'</span><span class=\\\"token punctuation\\\">,</span>\\n      h<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'5'</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  i<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'6'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">serialize</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">typeof</span> obj<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">?</span> \\n        <span class=\\\"token function\\\">serialize</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span>\\n          obj<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>If we test this function, we'll see it returns an array, and depending on the level of nesting, internal arrays as values. To make sure we always have a one-level array, our goal now is to flatten it.</p>\\n<p>To do so, we'll use the example from a previous post <a href=\\\"/flattening-arbitrarily-nested-arrays\\\">Flattening Arbitrarily Nested Arrays</a> to recursively flatten the array until the remaining value is not an array.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">flatten</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">flatten</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> acc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>\\n      Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> \\n        <span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span>curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span>\\n        curr\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>There you go. The flatten function simply verifies if the <code class=\\\"language-text\\\">curr</code> value is an array or not. If it is, it will flatten it again by checking if its items are also arrays or not. That will be done until only simple values are returned. When that happens, <code class=\\\"language-text\\\">curr</code> will be appended to the original accumulator (identified by the <code class=\\\"language-text\\\">acc</code> parameter).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">serialize</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 2, 3, 4, 5, 6]</span></code></pre>\\n      </div>\\n<h3>Composition</h3>\\n<p>The initial challenge is solved. Now, to make this look better, why not use functional compositional to achieve a clearer, more beautiful execution order?</p>\\n<p>Composition is about putting together small simple functions to achieve a more complex functionality while still maintaing readability. Remember the DOT and KISS principles, respectively <strong>\\\"DO ONE THING\\\"</strong> and <strong>\\\"KEEP IT SIMPLE, STUPID\\\"</strong>. </p>\\n<p>Instead of writing one function that does everything, we write multiple functions that are really good at doing one thing only, and compose them together like lego bricks, into higher functionality.</p>\\n<p>To achieve this, we'll create a composer function that, from an initial value will apply multiple functions in order:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">composer</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> funcs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> funcs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">curr</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Then, we compose these two functions together and use the composer anytime we wish to do this same operation:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> objectFlattener <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">composer</span><span class=\\\"token punctuation\\\">(</span>\\n  serialize<span class=\\\"token punctuation\\\">,</span>\\n  flatten\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">objectFlattener</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 2, 3, 4, 5, 6]</span></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Flattening an Arbitrarily Nested Object\",\"date\":\"December 22, 2017\",\"path\":\"/flatenning-arbitrarily-nested-object\",\"tags\":[\"javascript\"],\"excerpt\":\"In this post, we'll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to deestructure the object, removing the keys and leaving values only; then, we should be able to transform the nested array into a single-level array.\"}}},\"pathContext\":{\"prev\":null,\"next\":{\"html\":\"<p>As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this</p>\\n<h2>Private Routes in React\\\"</h2>\\n<p>First, make sure you have a React project set up. If not, and you don't know how to, it's probably best to install <code class=\\\"language-text\\\">create-react-app</code>, by going to the terminal and typing <code class=\\\"language-text\\\">npm install -g create-react-app</code>. Then, type <code class=\\\"language-text\\\">create-react-app /path/to/desired/destination</code>, and voilá, you'll have a ready to use React application.</p>\\n<h3>React Router</h3>\\n<p>React Router is a library that allows us to activate browser routing in React, while still being able to use browser features like moving back and moving further. Inside your main App.js, import BrowserRouter from React Router DOM.</p>\\n<p><code class=\\\"language-text\\\">npm install react-router-dom</code></p>\\n<p>This:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//...</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Becomes this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Home <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/Home'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"app-container\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>By instantiating Route components, we're able to specify which component should be evaluated on each specific route inside the application.</p>\\n<p>However, if we wish to create a private route, we need to do the following logic:</p>\\n<ol>\\n<li>Is user allowed to access this page? In short, <code class=\\\"language-text\\\">isAunthenticated</code>?</li>\\n<li>If yes, go to route; otherwise, redirect or go to a default component</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> isAuthenticated <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'utils/auth'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> LoginPage <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/LoginPage'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRoute</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> component<span class=\\\"token punctuation\\\">:</span> Component<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">isAuthenticated</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Component <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>LoginPage <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">isAuthenticated()</code> simply checks if the current user is validated or not. If that's the case, we create the desired component as child of Route. If not, we render the fallback page, which in my case is the LoginPage component.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Home <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/Home'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PrivateComponent <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/PrivateComponent'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PrivateRoute <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./PrivateRoute'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"app-container\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>PrivateRoute to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/private\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>PrivateComponent<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The private route is effectively created. If validated, we show the PrivateComponent, otherwise we show the login page.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-17-private-routes-react/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-17T03:10:27.125Z\",\"path\":\"/private-routes-react\",\"title\":\"Private Routes in React\",\"excerpt\":\"As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this\",\"tags\":[\"react\",\"react-router\",\"\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---flatenning-arbitrarily-nested-object-e0e802fcc2b4f8712e73.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>Flattening an Arbitrarily Nested Object</h3>\\n<p>In this post we'll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to destructure the object, removing the keys and leaving values only.</p>\\n<p>To achieve this, recursion. While traversing the object, we'll check if the object's property holds a simple value (like a number) or another object. We apply the function recursively until the returned value is a simple one.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span>\\n  c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">,</span>\\n    e<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">,</span>\\n    f<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      g<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'4'</span><span class=\\\"token punctuation\\\">,</span>\\n      h<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'5'</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  i<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'6'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">serialize</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">typeof</span> obj<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">?</span> \\n        <span class=\\\"token function\\\">serialize</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span>\\n          obj<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>If we test this function, we'll see it returns an array, and depending on the level of nesting, internal arrays as values. To make sure we always have a one-level array, our goal now is to flatten it.</p>\\n<p>To do so, we'll use the example from a previous post <a href=\\\"/flattening-arbitrarily-nested-arrays\\\">Flattening Arbitrarily Nested Arrays</a> to recursively flatten the array until the remaining value is not an array.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">flatten</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">flatten</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> acc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>\\n      Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> \\n        <span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span>curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span>\\n        curr\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>There you go. The flatten function simply verifies if the <code class=\\\"language-text\\\">curr</code> value is an array or not. If it is, it will flatten it again by checking if its items are also arrays or not. That will be done until only simple values are returned. When that happens, <code class=\\\"language-text\\\">curr</code> will be appended to the original accumulator (identified by the <code class=\\\"language-text\\\">acc</code> parameter).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">serialize</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 2, 3, 4, 5, 6]</span></code></pre>\\n      </div>\\n<h3>Composition</h3>\\n<p>The initial challenge is solved. Now, to make this look better, why not use functional compositional to achieve a clearer, more beautiful execution order?</p>\\n<p>Composition is about putting together small simple functions to achieve a more complex functionality while still maintaing readability. Remember the DOT and KISS principles, respectively <strong>\\\"DO ONE THING\\\"</strong> and <strong>\\\"KEEP IT SIMPLE, STUPID\\\"</strong>. </p>\\n<p>Instead of writing one function that does everything, we write multiple functions that are really good at doing one thing only, and compose them together like lego bricks, into higher functionality.</p>\\n<p>To achieve this, we'll create a composer function that, from an initial value will apply multiple functions in order:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">composer</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> funcs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> funcs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> curr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">curr</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Then, we compose these two functions together and use the composer anytime we wish to do this same operation:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> objectFlattener <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">composer</span><span class=\\\"token punctuation\\\">(</span>\\n  serialize<span class=\\\"token punctuation\\\">,</span>\\n  flatten\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">objectFlattener</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 2, 3, 4, 5, 6]</span></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Flattening an Arbitrarily Nested Object\",\"date\":\"December 22, 2017\",\"path\":\"/flatenning-arbitrarily-nested-object\",\"tags\":[\"javascript\"],\"excerpt\":\"In this post, we'll solve a small challenge: flatten an arbitrarily nested object into an array of values. Our initial goal should be to deestructure the object, removing the keys and leaving values only; then, we should be able to transform the nested array into a single-level array.\"}}},\"pathContext\":{\"prev\":null,\"next\":{\"html\":\"<p>As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this</p>\\n<h2>Private Routes in React\\\"</h2>\\n<p>First, make sure you have a React project set up. If not, and you don't know how to, it's probably best to install <code class=\\\"language-text\\\">create-react-app</code>, by going to the terminal and typing <code class=\\\"language-text\\\">npm install -g create-react-app</code>. Then, type <code class=\\\"language-text\\\">create-react-app /path/to/desired/destination</code>, and voilá, you'll have a ready to use React application.</p>\\n<h3>React Router</h3>\\n<p>React Router is a library that allows us to activate browser routing in React, while still being able to use browser features like moving back and moving further. Inside your main App.js, import BrowserRouter from React Router DOM.</p>\\n<p><code class=\\\"language-text\\\">npm install react-router-dom</code></p>\\n<p>This:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//...</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Becomes this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Home <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/Home'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"app-container\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>By instantiating Route components, we're able to specify which component should be evaluated on each specific route inside the application.</p>\\n<p>However, if we wish to create a private route, we need to do the following logic:</p>\\n<ol>\\n<li>Is user allowed to access this page? In short, <code class=\\\"language-text\\\">isAunthenticated</code>?</li>\\n<li>If yes, go to route; otherwise, redirect or go to a default component</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> isAuthenticated <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'utils/auth'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> LoginPage <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/LoginPage'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRoute</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> component<span class=\\\"token punctuation\\\">:</span> Component<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">isAuthenticated</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Component <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>LoginPage <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">isAuthenticated()</code> simply checks if the current user is validated or not. If that's the case, we create the desired component as child of Route. If not, we render the fallback page, which in my case is the LoginPage component.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Home <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/Home'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PrivateComponent <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/PrivateComponent'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PrivateRoute <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./PrivateRoute'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"app-container\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>PrivateRoute to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/private\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>PrivateComponent<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The private route is effectively created. If validated, we show the PrivateComponent, otherwise we show the login page.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-17-private-routes-react/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-01-17T03:10:27.125Z\",\"path\":\"/private-routes-react\",\"title\":\"Private Routes in React\",\"excerpt\":\"As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this\",\"tags\":[\"react\",\"react-router\",\"\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/flatenning-arbitrarily-nested-object.json\n// module id = 355\n// module chunks = 9630271022450"],"sourceRoot":""}