{"version":3,"sources":["webpack:///path---private-routes-react-8d074cedb248461d4b52.js","webpack:///./.cache/json/private-routes-react.json"],"names":["webpackJsonp","358","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,q9YAAuxZC,aAAmLC,MAAA,0BAAAC,KAAA,mBAAAC,KAAA,wBAAAC,MAAA,2BAAAC,QAAA,gQAAuYC,aAAgBC,MAAQR,KAAA;AAA+zqBS,GAAA,0HAAAR,aAAqyCE,KAAA,YAAAC,KAAA,uBAAAF,MAAA,sBAAAI,QAAA,qQAAAD,MAAA,4BAAiYK,MAASV,KAAA,o3lBAAm7kBS,GAAA,kIAAAR,aAA8rCE,KAAA,YAAAC,KAAA,+BAAAF,MAAA,oCAAAI,QAAA,+IAAAD,MAAA","file":"path---private-routes-react-8d074cedb248461d4b52.js","sourcesContent":["webpackJsonp([128558300923437],{\n\n/***/ 358:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this</p>\\n<h2>Private Routes in React\\\"</h2>\\n<p>First, make sure you have a React project set up. If not, and you don't know how to, it's probably best to install <code class=\\\"language-text\\\">create-react-app</code>, by going to the terminal and typing <code class=\\\"language-text\\\">npm install -g create-react-app</code>. Then, type <code class=\\\"language-text\\\">create-react-app /path/to/desired/destination</code>, and voil√°, you'll have a ready to use React application.</p>\\n<h3>React Router</h3>\\n<p>React Router is a library that allows us to activate browser routing in React, while still being able to use browser features like moving back and moving further. Inside your main App.js, import BrowserRouter from React Router DOM.</p>\\n<p><code class=\\\"language-text\\\">npm install react-router-dom</code></p>\\n<p>This:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//...</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Becomes this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Home <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/Home'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"app-container\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>By instantiating Route components, we're able to specify which component should be evaluated on each specific route inside the application.</p>\\n<p>However, if we wish to create a private route, we need to do the following logic:</p>\\n<ol>\\n<li>Is user allowed to access this page? In short, <code class=\\\"language-text\\\">isAunthenticated</code>?</li>\\n<li>If yes, go to route; otherwise, redirect or go to a default component</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> isAuthenticated <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'utils/auth'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> LoginPage <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/LoginPage'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRoute</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> component<span class=\\\"token punctuation\\\">:</span> Component<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">isAuthenticated</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Component <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>LoginPage <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">isAuthenticated()</code> simply checks if the current user is validated or not. If that's the case, we create the desired component as child of Route. If not, we render the fallback page, which in my case is the LoginPage component.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Home <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/Home'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PrivateComponent <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/PrivateComponent'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PrivateRoute <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./PrivateRoute'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"app-container\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>PrivateRoute to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/private\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>PrivateComponent<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The private route is effectively created. If validated, we show the PrivateComponent, otherwise we show the login page.</p>\",\"frontmatter\":{\"title\":\"Private Routes in React\",\"date\":\"January 17, 2018\",\"path\":\"/private-routes-react\",\"tags\":[\"react\",\"react-router\",\"\"],\"excerpt\":\"As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h2>A Word on Functions</h2>\\n<p>Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions. </p>\\n<p>This capacity opens a new world of possibilities, especially when it comes to composing functionality. Check this example in JavaScript:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">encodeURI</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">encodeURIComponent</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">removeSpaces</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">' '</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">toSlug</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">encodeURIComponent</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">removeSpaces</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>something<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">with</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">something</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">with</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>toSlug<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'CREATING a @@ $$ UNIFORM url-friendly ** # STRING'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token comment\\\">//creating-a-%40%40-%24%24-uniform-url-friendly-**-%23-string</span></code></pre>\\n      </div>\\n<p>Creating reusable functionality in a similar fashion to the code above would be quite a considerable challenge in many other programming languages, but at the same time increase in functionality also means increase in complexity. We need to understand how these functions behave in all possible scenarios.</p>\\n<p>There are a few different ways to invoke a function: as a function, as a method, and as a constructor. Today we'll be discussing that.</p>\\n<h3>Functions as functions</h3>\\n<p>Referring a function by saying it is invoked as a function might be too obvious, but it's not. That's because there are different ways to do so, which we'll be discussing later.</p>\\n<p>To invoke a function as a function, we simply invoke the function as it is, with the execution operator <code class=\\\"language-text\\\">()</code>. Again, it might sound obvious, but we'll see how that evolves:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//1.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//Window, if in browser</span>\\n\\n<span class=\\\"token comment\\\">//2.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">c</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//Window, again</span></code></pre>\\n      </div>\\n<p>It's safe to say that when we invoke a function as a function its context is always the global object. Window in the case of the browser, or Global Object if we're talking about Node.js for example. </p>\\n<p>Considering Window is an object, functions invoked as functions are actually invoked as methods, but for Window only. We decide not to treat it as a method invokation because of Window's implicit nature. It's always going to be the global object, so we might as well categorize it differently.</p>\\n<p>Note that ES6's arrow functions behave differently, and this is a topic for other post.</p>\\n<h3>Functions as methods</h3>\\n<p>Methods in JavaScript are nothing more than object properties that refer to functions. See the following example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> cat <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  sound<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Meow'</span><span class=\\\"token punctuation\\\">,</span>\\n  getSound<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sound<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSound</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//Meow</span></code></pre>\\n      </div>\\n<p>Since the <code class=\\\"language-text\\\">getSound</code> method returns 'meow', which is exactly the cat's object sound we might jump to conclude that <code class=\\\"language-text\\\">this</code> always refers to the cat object, which is not true. See the next example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> dog <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  sound<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Woof'</span><span class=\\\"token punctuation\\\">,</span>\\n  getSound<span class=\\\"token punctuation\\\">:</span> cat<span class=\\\"token punctuation\\\">.</span>getSound\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\ndog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSound</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//Woof</span></code></pre>\\n      </div>\\n<p>The function itself is not in anyway bound to the initial object (cat). So much that we're able to \\\"lend\\\" it to a new one (dog). What happens is <code class=\\\"language-text\\\">this</code> refers to the <strong>execution context</strong> whichever it is, more specifically, <strong>whoever use that method</strong>.</p>\\n<p>If we created a Giraffe object we could lend it one more time, and it would have giraffe's value. We don't need to recreate this here, but remember that for functions invoked as methods what really matters it the execution context, not the definition one. </p>\\n<p>This behavior might generate unexpected results. Sometimes we want to delegate functionality, but not hand over context. See pitoresque example below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> people <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  names<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'Anna'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Allison'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Brandon'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Caroline'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Isabel'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  getPeople<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>names<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//WARNING: Don't do this</span>\\n<span class=\\\"token keyword\\\">var</span> party <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  party<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  addToParty<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>party<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getPeople</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  getPeople<span class=\\\"token punctuation\\\">:</span> people<span class=\\\"token punctuation\\\">.</span>getPeople\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Remember this is a demonstrative example. You probably wouldn't, and if you would you probably shouldn't do as shown above. The idea is to add people names to the party object by concatenating it into the party array. Since people object already has a method that does so, the sloppy developer thought about reusing it this way. </p>\\n<p>The thing is this is not going to work, because again what really counts is the execution context. <code class=\\\"language-text\\\">party.getPeople</code> will try to find the property called <code class=\\\"language-text\\\">names</code> inside the party object, and it won't find.</p>\\n<p>The way to solve this is to circumveint the execution context and explicitly setting it  with the <code class=\\\"language-text\\\">bind</code> method, providing the context we want to assign as the first argument for the function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> party <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    party<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    addToParty<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/**/</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    getPeople<span class=\\\"token punctuation\\\">:</span> people<span class=\\\"token punctuation\\\">.</span>getPeople<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>people<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">getPeople</code> when executed will now return <code class=\\\"language-text\\\">people</code>'s names and not <code class=\\\"language-text\\\">party</code>'s.</p>\\n<p>Other ways to do it, would be with <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\\\"><code class=\\\"language-text\\\">apply</code></a>, and <a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/call\\\"><code class=\\\"language-text\\\">call</code></a>, which are just other ways to execute a function with an explicit context. The difference between these two methods are mainly their parameters. You can invoke call with a list of parameters while apply requires an actual array as the second parameter.</p>\\n<h3>Functions as constructors</h3>\\n<p>Invoking a function as a constructor refers to the mechanism of inheritance in JavaScript.</p>\\n<p>The first difference is the fact that invoking a function as a constructor creates a new empty object, and this object is set as the instance's context. Whatever you do inside the function constructor referring <code class=\\\"language-text\\\">this</code> will actually mean the instance object, and not the constructor. The context is bound to the new and recently created instance object.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Animal</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> cat <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Animal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ncat<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Purr'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Whenever we refer <code class=\\\"language-text\\\">this</code>, the first place to be looked is the instance object. If nothing under that name is found there, JavaScript goes all the way up in the inheritance chain to see if any ancestors possess a property with that given name:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">SuperAnimal</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>grade <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Super Master Animal'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getGrade</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  \\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>grade<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//creating a prototypal inheritance chain</span>\\nAnimal<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SuperAnimal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> cat <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Animal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>cat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getGrade</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>As we can see, since no method <code class=\\\"language-text\\\">getGrade</code> or no property <code class=\\\"language-text\\\">grade</code> exists in the cat instance, JavaScript will look all the way up in the inheritance chain. It will look <code class=\\\"language-text\\\">cat</code>, then <code class=\\\"language-text\\\">Animal</code>, then <code class=\\\"language-text\\\">SuperAnimal</code> until there's no more places to look.</p>\\n<p>Inheritance is another very exciting complex topic to be discussed on a later opportunity, but the overall behavior is this.</p>\\n<h3>Remember</h3>\\n<p>When it comes to:</p>\\n<ul>\\n<li>Invoking functions as functions, the context will always be the global context</li>\\n<li>Invoking functions as methods, the context will be assigned to the current object executing the method</li>\\n<li>Invoking functions as constructors will create a new object and refer to it.</li>\\n</ul>\\n<p>Also:</p>\\n<ul>\\n<li>It's possible to explicitly set the method context by using <code class=\\\"language-text\\\">bind</code>, <code class=\\\"language-text\\\">call</code> or <code class=\\\"language-text\\\">apply</code>.</li>\\n</ul>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-02-a-word-on-functions/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Tu, 01/18\",\"path\":\"/a-word-on-functions\",\"title\":\"A Word on Functions\",\"excerpt\":\"Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions.\",\"tags\":[\"javascript\",\"functions\"]}},\"next\":{\"html\":\"<h3>What are design patterns?</h3>\\n<p>Design patterns are proven reusable solutions to a recurrent problem. To be considered a pattern, the solution must not be obvious. Most of the times, patterns describe a relationship between structures.</p>\\n<p>One major benefit of design patterns is the creation of jargons for common vocabulary. Instead of explaining complex structures we just say \\\"why not do a module here, my good sir?\\\". So, tighten your seatbealts and let's delve into some of my favorite.</p>\\n<blockquote>\\n<p><em>Fun fact: did you know the concept of Design Patterns is original from construction? Coined by Christopher Alexander in his book \\\"A Pattern Language\\\", he wrote it to outline common patterns or solutions he came across when building stuff out in the physical world.</em></p>\\n</blockquote>\\n<blockquote>\\n<p><em>For example, the Cloverleaf interchanges are a common proven solution to help drivers transition between highways without the need of turns or even traffic lights.</em></p>\\n</blockquote>\\n<h3>Design Patterns in JavaScript</h3>\\n<hr>\\n<p>The first pattern is categorized under the creational type of patterns. A module is simply a containarized toolbox of related functionalities that is commonly created as a list of methods within an object literal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> SongBox <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  songs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  singSong<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// check if the song already exist in the list</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>song<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// adds if it doesn't</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> song\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\\u266a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  getSongById<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2>The Module Pattern</h2>\\n<hr>\\n<p><strong>The Module Pattern</strong> became more recurrent with modern browser JavaScript in the moment which it started being possible to create files as modules in the browsers, and have them imported by other files. The popularization of this approach is due to tools like Browserify, Webpack, and others.</p>\\n<p>We can even make a module to be a function so it accepts arguments, and does calculations, or delays execution before returning the methods. Another common use for modules as functions is to create private vaiables.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// accepting arguments that will enhance functionality</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">SongBox</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// songs is a private variable and cannot be retrieved from outside</span>\\n  <span class=\\\"token comment\\\">// SongBox.songs doesn't exist outside</span>\\n  <span class=\\\"token keyword\\\">var</span> songs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">addSong</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    songs <span class=\\\"token operator\\\">=</span> songs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getSongs</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> limit <span class=\\\"token operator\\\">?</span> songs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> songs<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    addSong<span class=\\\"token punctuation\\\">,</span>\\n    getSongs\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>What do you think is the benefit for creating modules? My take is that it becomes much better to reason, discern and organize our code if we manage to logically separate all differing structures of our software apart. Each component is very well delimited and we know exactly when one ends and another begins.</p>\\n<p>Additionally, if we are able to separate our components we get to be able to test them separately as well. And isn't that much better when we need to work on new functionality, or to alter existing ones? Isn't separation of concerns a much more efficient tactic when we need to find a pesky bug in the code? I know for a fact it is, because if there's a clearer distinction of <em>what's what</em>, specific tests will fail, and specific functions will accuse the error more prominently.</p>\\n<p>Software developers already know the importance of decomposing big problems in multiple small specialized functions that solve small units (the divide and conquer tactic). With the module pattern, we can take this to another level to group similar functionality.</p>\\n<h2>The Facade Pattern</h2>\\n<hr>\\n<p>Simplicity. Simplicity is key to software development. Not because of machines, but because of those that operate the machines - we, humans. The Facade Pattern is aimed to enhance software construction by providing a simplified interface to a complicated sub-system.</p>\\n<p>Like most web developers, my early days of hacking in the web started with jQuery. Oh, and how powerful I felt using jQuery. A few lines of code and BAM! I'm making an element slide into view, almost like a Ninja. Another line and SHAZAM! this div is fading out from view.</p>\\n<p>This apparent simplicity of the few <code class=\\\"language-text\\\">$(el).slideDown()</code> and <code class=\\\"language-text\\\">$(el).fadeOut()</code> methods hide quite a lot of complexity. For starters, the actual animation within those functions usually took way more than a couple of lines. Then, there's the problem of browser compatibility. How are you making sure that everything you do in JavaScript is compatible with the latest Chrome browser, and IE8 altogether?</p>\\n<p>Something as simple as creating an event listener had different syntaxes in different browsers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// webkit:</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'clicked!'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ie 8/opera</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onclick'</span><span class=\\\"token punctuation\\\">,</span> div<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">detachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onclick'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Now imagine something a little more complicated, like JS animations. So when it comes to actually supporting all browsers, developers would have to be mindful of quite a few different possibilities for compatibility. jQuery took that away,by taking care of common complexities found in web development, so that the final developer doesn't have to.</p>\\n<p><code class=\\\"language-text\\\">$(el).css()</code>, <code class=\\\"language-text\\\">$(el).animate()</code> are just a few other examples on why a beginner would feel so competent writing JavaScript.</p>\\n<h3>Creating a Facade ourselves</h3>\\n<hr>\\n<p>A Facade is just a simplified interface for a complex sub-system. Just as the seemingly nice neighbour who smiles and greets, but deep inside despises and envies you.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// Immediately-invoked function expression for</span>\\n<span class=\\\"token comment\\\">// separate scope</span>\\n<span class=\\\"token keyword\\\">var</span> myBankingModule <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> _private <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    deposit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>cash<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash <span class=\\\"token operator\\\">+</span> cash<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    transfer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>amount<span class=\\\"token punctuation\\\">,</span> destination<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"transfering\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"$\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">+</span> amount <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" to: \\\"</span> <span class=\\\"token operator\\\">+</span> destination<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    getBalance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is how much you have now\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    depositTransferAndLog<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">deposit</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">.</span>depositAmount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">.</span>transferAmount<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">.</span>transferDestinationId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBalance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> account <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">myBankingModule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\naccount<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">depositTransferAndLog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  depositAmount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1500</span><span class=\\\"token punctuation\\\">,</span>\\n  transferAmount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span>\\n  transferDestinationId<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"af043748399930948d9\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Notice that when calling <code class=\\\"language-text\\\">.depositTransferAndLog()</code> we are triggering a set of private behavior within the module, that the consuming part doesn't even have to be aware of. We made it much easier to consume a feature without needing to worry about implementation-level details. Think of all APIs you have consumed. They usually expose a few methods that are very intuitive and simple to use while the hardwork is done at the server level.</p>\\n<h2>Conclusion</h2>\\n<hr>\\n<p>Design patterns are proven solutions to recurrent software problems. They can't be obvious and they offer good standards on how we create, structure and extend functionality.</p>\\n<p><strong>The Module Pattern</strong>: the grouping of similar functions together. Separation of concerns, enhanced testability and debuggability.</p>\\n<p><strong>The Facade Pattern</strong>: the simplification of a complex sub-system. Creating abstractions that hide potential complexities or obscurities from the original code.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-09-29-most-useful-design-patterns/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Sa, 09/18\",\"path\":\"/most-useful-design-patterns\",\"title\":\"Most Useful Design Patterns in JS\",\"excerpt\":\"Design patterns are proven solutions to a recurrent problem. Most of the times they describe a relationship between more than one structures\",\"tags\":[\"javascript\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---private-routes-react-8d074cedb248461d4b52.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this</p>\\n<h2>Private Routes in React\\\"</h2>\\n<p>First, make sure you have a React project set up. If not, and you don't know how to, it's probably best to install <code class=\\\"language-text\\\">create-react-app</code>, by going to the terminal and typing <code class=\\\"language-text\\\">npm install -g create-react-app</code>. Then, type <code class=\\\"language-text\\\">create-react-app /path/to/desired/destination</code>, and voil√°, you'll have a ready to use React application.</p>\\n<h3>React Router</h3>\\n<p>React Router is a library that allows us to activate browser routing in React, while still being able to use browser features like moving back and moving further. Inside your main App.js, import BrowserRouter from React Router DOM.</p>\\n<p><code class=\\\"language-text\\\">npm install react-router-dom</code></p>\\n<p>This:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">const</span> App <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//...</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Becomes this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Home <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/Home'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"app-container\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>By instantiating Route components, we're able to specify which component should be evaluated on each specific route inside the application.</p>\\n<p>However, if we wish to create a private route, we need to do the following logic:</p>\\n<ol>\\n<li>Is user allowed to access this page? In short, <code class=\\\"language-text\\\">isAunthenticated</code>?</li>\\n<li>If yes, go to route; otherwise, redirect or go to a default component</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> isAuthenticated <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'utils/auth'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> LoginPage <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/LoginPage'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRoute</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> component<span class=\\\"token punctuation\\\">:</span> Component<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">isAuthenticated</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Component <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>LoginPage <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">isAuthenticated()</code> simply checks if the current user is validated or not. If that's the case, we create the desired component as child of Route. If not, we render the fallback page, which in my case is the LoginPage component.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">//App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Home <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/Home'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PrivateComponent <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'containers/PrivateComponent'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PrivateRoute <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./PrivateRoute'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"app-container\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Route to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>PrivateRoute to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/private\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>PrivateComponent<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The private route is effectively created. If validated, we show the PrivateComponent, otherwise we show the login page.</p>\",\"frontmatter\":{\"title\":\"Private Routes in React\",\"date\":\"January 17, 2018\",\"path\":\"/private-routes-react\",\"tags\":[\"react\",\"react-router\",\"\"],\"excerpt\":\"As soon as someone starts to build complex React application, they will often have to deal with a considerable challenge: creating private routes. That is, routes accessible only by authorized people. In this article we'll see one way to achieve this\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h2>A Word on Functions</h2>\\n<p>Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions. </p>\\n<p>This capacity opens a new world of possibilities, especially when it comes to composing functionality. Check this example in JavaScript:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">encodeURI</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">encodeURIComponent</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">removeSpaces</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">' '</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">toSlug</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">encodeURIComponent</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">removeSpaces</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>something<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">with</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">something</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">with</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>toSlug<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'CREATING a @@ $$ UNIFORM url-friendly ** # STRING'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token comment\\\">//creating-a-%40%40-%24%24-uniform-url-friendly-**-%23-string</span></code></pre>\\n      </div>\\n<p>Creating reusable functionality in a similar fashion to the code above would be quite a considerable challenge in many other programming languages, but at the same time increase in functionality also means increase in complexity. We need to understand how these functions behave in all possible scenarios.</p>\\n<p>There are a few different ways to invoke a function: as a function, as a method, and as a constructor. Today we'll be discussing that.</p>\\n<h3>Functions as functions</h3>\\n<p>Referring a function by saying it is invoked as a function might be too obvious, but it's not. That's because there are different ways to do so, which we'll be discussing later.</p>\\n<p>To invoke a function as a function, we simply invoke the function as it is, with the execution operator <code class=\\\"language-text\\\">()</code>. Again, it might sound obvious, but we'll see how that evolves:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//1.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//Window, if in browser</span>\\n\\n<span class=\\\"token comment\\\">//2.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">c</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//Window, again</span></code></pre>\\n      </div>\\n<p>It's safe to say that when we invoke a function as a function its context is always the global object. Window in the case of the browser, or Global Object if we're talking about Node.js for example. </p>\\n<p>Considering Window is an object, functions invoked as functions are actually invoked as methods, but for Window only. We decide not to treat it as a method invokation because of Window's implicit nature. It's always going to be the global object, so we might as well categorize it differently.</p>\\n<p>Note that ES6's arrow functions behave differently, and this is a topic for other post.</p>\\n<h3>Functions as methods</h3>\\n<p>Methods in JavaScript are nothing more than object properties that refer to functions. See the following example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> cat <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  sound<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Meow'</span><span class=\\\"token punctuation\\\">,</span>\\n  getSound<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sound<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSound</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//Meow</span></code></pre>\\n      </div>\\n<p>Since the <code class=\\\"language-text\\\">getSound</code> method returns 'meow', which is exactly the cat's object sound we might jump to conclude that <code class=\\\"language-text\\\">this</code> always refers to the cat object, which is not true. See the next example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> dog <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  sound<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Woof'</span><span class=\\\"token punctuation\\\">,</span>\\n  getSound<span class=\\\"token punctuation\\\">:</span> cat<span class=\\\"token punctuation\\\">.</span>getSound\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\ndog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSound</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//Woof</span></code></pre>\\n      </div>\\n<p>The function itself is not in anyway bound to the initial object (cat). So much that we're able to \\\"lend\\\" it to a new one (dog). What happens is <code class=\\\"language-text\\\">this</code> refers to the <strong>execution context</strong> whichever it is, more specifically, <strong>whoever use that method</strong>.</p>\\n<p>If we created a Giraffe object we could lend it one more time, and it would have giraffe's value. We don't need to recreate this here, but remember that for functions invoked as methods what really matters it the execution context, not the definition one. </p>\\n<p>This behavior might generate unexpected results. Sometimes we want to delegate functionality, but not hand over context. See pitoresque example below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> people <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  names<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'Anna'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Allison'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Brandon'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Caroline'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Isabel'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  getPeople<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>names<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//WARNING: Don't do this</span>\\n<span class=\\\"token keyword\\\">var</span> party <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  party<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  addToParty<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>party<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getPeople</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  getPeople<span class=\\\"token punctuation\\\">:</span> people<span class=\\\"token punctuation\\\">.</span>getPeople\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Remember this is a demonstrative example. You probably wouldn't, and if you would you probably shouldn't do as shown above. The idea is to add people names to the party object by concatenating it into the party array. Since people object already has a method that does so, the sloppy developer thought about reusing it this way. </p>\\n<p>The thing is this is not going to work, because again what really counts is the execution context. <code class=\\\"language-text\\\">party.getPeople</code> will try to find the property called <code class=\\\"language-text\\\">names</code> inside the party object, and it won't find.</p>\\n<p>The way to solve this is to circumveint the execution context and explicitly setting it  with the <code class=\\\"language-text\\\">bind</code> method, providing the context we want to assign as the first argument for the function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> party <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    party<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    addToParty<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/**/</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    getPeople<span class=\\\"token punctuation\\\">:</span> people<span class=\\\"token punctuation\\\">.</span>getPeople<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>people<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">getPeople</code> when executed will now return <code class=\\\"language-text\\\">people</code>'s names and not <code class=\\\"language-text\\\">party</code>'s.</p>\\n<p>Other ways to do it, would be with <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\\\"><code class=\\\"language-text\\\">apply</code></a>, and <a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/call\\\"><code class=\\\"language-text\\\">call</code></a>, which are just other ways to execute a function with an explicit context. The difference between these two methods are mainly their parameters. You can invoke call with a list of parameters while apply requires an actual array as the second parameter.</p>\\n<h3>Functions as constructors</h3>\\n<p>Invoking a function as a constructor refers to the mechanism of inheritance in JavaScript.</p>\\n<p>The first difference is the fact that invoking a function as a constructor creates a new empty object, and this object is set as the instance's context. Whatever you do inside the function constructor referring <code class=\\\"language-text\\\">this</code> will actually mean the instance object, and not the constructor. The context is bound to the new and recently created instance object.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Animal</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> cat <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Animal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ncat<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Purr'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Whenever we refer <code class=\\\"language-text\\\">this</code>, the first place to be looked is the instance object. If nothing under that name is found there, JavaScript goes all the way up in the inheritance chain to see if any ancestors possess a property with that given name:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">SuperAnimal</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>grade <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Super Master Animal'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getGrade</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  \\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>grade<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//creating a prototypal inheritance chain</span>\\nAnimal<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SuperAnimal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> cat <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Animal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>cat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getGrade</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>As we can see, since no method <code class=\\\"language-text\\\">getGrade</code> or no property <code class=\\\"language-text\\\">grade</code> exists in the cat instance, JavaScript will look all the way up in the inheritance chain. It will look <code class=\\\"language-text\\\">cat</code>, then <code class=\\\"language-text\\\">Animal</code>, then <code class=\\\"language-text\\\">SuperAnimal</code> until there's no more places to look.</p>\\n<p>Inheritance is another very exciting complex topic to be discussed on a later opportunity, but the overall behavior is this.</p>\\n<h3>Remember</h3>\\n<p>When it comes to:</p>\\n<ul>\\n<li>Invoking functions as functions, the context will always be the global context</li>\\n<li>Invoking functions as methods, the context will be assigned to the current object executing the method</li>\\n<li>Invoking functions as constructors will create a new object and refer to it.</li>\\n</ul>\\n<p>Also:</p>\\n<ul>\\n<li>It's possible to explicitly set the method context by using <code class=\\\"language-text\\\">bind</code>, <code class=\\\"language-text\\\">call</code> or <code class=\\\"language-text\\\">apply</code>.</li>\\n</ul>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-01-02-a-word-on-functions/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Tu, 01/18\",\"path\":\"/a-word-on-functions\",\"title\":\"A Word on Functions\",\"excerpt\":\"Functions are first class components in JavaScript. That means functions are treated just like any other kind of object, on account that they can be attributed to identifiers (var, let, const), be passed as arguments to, and be returned from other functions.\",\"tags\":[\"javascript\",\"functions\"]}},\"next\":{\"html\":\"<h3>What are design patterns?</h3>\\n<p>Design patterns are proven reusable solutions to a recurrent problem. To be considered a pattern, the solution must not be obvious. Most of the times, patterns describe a relationship between structures.</p>\\n<p>One major benefit of design patterns is the creation of jargons for common vocabulary. Instead of explaining complex structures we just say \\\"why not do a module here, my good sir?\\\". So, tighten your seatbealts and let's delve into some of my favorite.</p>\\n<blockquote>\\n<p><em>Fun fact: did you know the concept of Design Patterns is original from construction? Coined by Christopher Alexander in his book \\\"A Pattern Language\\\", he wrote it to outline common patterns or solutions he came across when building stuff out in the physical world.</em></p>\\n</blockquote>\\n<blockquote>\\n<p><em>For example, the Cloverleaf interchanges are a common proven solution to help drivers transition between highways without the need of turns or even traffic lights.</em></p>\\n</blockquote>\\n<h3>Design Patterns in JavaScript</h3>\\n<hr>\\n<p>The first pattern is categorized under the creational type of patterns. A module is simply a containarized toolbox of related functionalities that is commonly created as a list of methods within an object literal:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> SongBox <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  songs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  singSong<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// check if the song already exist in the list</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>song<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// adds if it doesn't</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> song\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\\u266a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  getSongById<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>songs<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2>The Module Pattern</h2>\\n<hr>\\n<p><strong>The Module Pattern</strong> became more recurrent with modern browser JavaScript in the moment which it started being possible to create files as modules in the browsers, and have them imported by other files. The popularization of this approach is due to tools like Browserify, Webpack, and others.</p>\\n<p>We can even make a module to be a function so it accepts arguments, and does calculations, or delays execution before returning the methods. Another common use for modules as functions is to create private vaiables.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// accepting arguments that will enhance functionality</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">SongBox</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// songs is a private variable and cannot be retrieved from outside</span>\\n  <span class=\\\"token comment\\\">// SongBox.songs doesn't exist outside</span>\\n  <span class=\\\"token keyword\\\">var</span> songs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">addSong</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    songs <span class=\\\"token operator\\\">=</span> songs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>song<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getSongs</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> limit <span class=\\\"token operator\\\">?</span> songs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> songs<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    addSong<span class=\\\"token punctuation\\\">,</span>\\n    getSongs\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>What do you think is the benefit for creating modules? My take is that it becomes much better to reason, discern and organize our code if we manage to logically separate all differing structures of our software apart. Each component is very well delimited and we know exactly when one ends and another begins.</p>\\n<p>Additionally, if we are able to separate our components we get to be able to test them separately as well. And isn't that much better when we need to work on new functionality, or to alter existing ones? Isn't separation of concerns a much more efficient tactic when we need to find a pesky bug in the code? I know for a fact it is, because if there's a clearer distinction of <em>what's what</em>, specific tests will fail, and specific functions will accuse the error more prominently.</p>\\n<p>Software developers already know the importance of decomposing big problems in multiple small specialized functions that solve small units (the divide and conquer tactic). With the module pattern, we can take this to another level to group similar functionality.</p>\\n<h2>The Facade Pattern</h2>\\n<hr>\\n<p>Simplicity. Simplicity is key to software development. Not because of machines, but because of those that operate the machines - we, humans. The Facade Pattern is aimed to enhance software construction by providing a simplified interface to a complicated sub-system.</p>\\n<p>Like most web developers, my early days of hacking in the web started with jQuery. Oh, and how powerful I felt using jQuery. A few lines of code and BAM! I'm making an element slide into view, almost like a Ninja. Another line and SHAZAM! this div is fading out from view.</p>\\n<p>This apparent simplicity of the few <code class=\\\"language-text\\\">$(el).slideDown()</code> and <code class=\\\"language-text\\\">$(el).fadeOut()</code> methods hide quite a lot of complexity. For starters, the actual animation within those functions usually took way more than a couple of lines. Then, there's the problem of browser compatibility. How are you making sure that everything you do in JavaScript is compatible with the latest Chrome browser, and IE8 altogether?</p>\\n<p>Something as simple as creating an event listener had different syntaxes in different browsers:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// webkit:</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'clicked!'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ie 8/opera</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onclick'</span><span class=\\\"token punctuation\\\">,</span> div<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\ndiv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">detachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onclick'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Now imagine something a little more complicated, like JS animations. So when it comes to actually supporting all browsers, developers would have to be mindful of quite a few different possibilities for compatibility. jQuery took that away,by taking care of common complexities found in web development, so that the final developer doesn't have to.</p>\\n<p><code class=\\\"language-text\\\">$(el).css()</code>, <code class=\\\"language-text\\\">$(el).animate()</code> are just a few other examples on why a beginner would feel so competent writing JavaScript.</p>\\n<h3>Creating a Facade ourselves</h3>\\n<hr>\\n<p>A Facade is just a simplified interface for a complex sub-system. Just as the seemingly nice neighbour who smiles and greets, but deep inside despises and envies you.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// Immediately-invoked function expression for</span>\\n<span class=\\\"token comment\\\">// separate scope</span>\\n<span class=\\\"token keyword\\\">var</span> myBankingModule <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> _private <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    deposit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>cash<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash <span class=\\\"token operator\\\">+</span> cash<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    transfer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>amount<span class=\\\"token punctuation\\\">,</span> destination<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"transfering\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"$\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">+</span> amount <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" to: \\\"</span> <span class=\\\"token operator\\\">+</span> destination<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    getBalance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cash<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"is how much you have now\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    depositTransferAndLog<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">deposit</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">.</span>depositAmount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>opts<span class=\\\"token punctuation\\\">.</span>transferAmount<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">.</span>transferDestinationId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _private<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBalance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> account <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">myBankingModule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\naccount<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">depositTransferAndLog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  depositAmount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1500</span><span class=\\\"token punctuation\\\">,</span>\\n  transferAmount<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span>\\n  transferDestinationId<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"af043748399930948d9\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Notice that when calling <code class=\\\"language-text\\\">.depositTransferAndLog()</code> we are triggering a set of private behavior within the module, that the consuming part doesn't even have to be aware of. We made it much easier to consume a feature without needing to worry about implementation-level details. Think of all APIs you have consumed. They usually expose a few methods that are very intuitive and simple to use while the hardwork is done at the server level.</p>\\n<h2>Conclusion</h2>\\n<hr>\\n<p>Design patterns are proven solutions to recurrent software problems. They can't be obvious and they offer good standards on how we create, structure and extend functionality.</p>\\n<p><strong>The Module Pattern</strong>: the grouping of similar functions together. Separation of concerns, enhanced testability and debuggability.</p>\\n<p><strong>The Facade Pattern</strong>: the simplification of a complex sub-system. Creating abstractions that hide potential complexities or obscurities from the original code.</p>\",\"id\":\"/Users/zavareze/projects/zavjsblog/src/pages/2018-09-29-most-useful-design-patterns/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"Sa, 09/18\",\"path\":\"/most-useful-design-patterns\",\"title\":\"Most Useful Design Patterns in JS\",\"excerpt\":\"Design patterns are proven solutions to a recurrent problem. Most of the times they describe a relationship between more than one structures\",\"tags\":[\"javascript\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/private-routes-react.json\n// module id = 358\n// module chunks = 128558300923437"],"sourceRoot":""}